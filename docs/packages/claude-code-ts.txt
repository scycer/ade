========================
CODE SNIPPETS
========================
TITLE: Initialize Anthropic TypeScript client and send a message
DESCRIPTION: Demonstrates how to initialize the Anthropic TypeScript client and send a basic 'Hello, Claude' message. This library is compatible with both TypeScript and JavaScript environments, defaulting to `process.env["ANTHROPIC_API_KEY"]`.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/client-sdks

LANGUAGE: TypeScript
CODE:
```
import Anthropic from '@anthropic-ai/sdk';

const anthropic = new Anthropic({
  apiKey: 'my_api_key', // defaults to process.env["ANTHROPIC_API_KEY"]
});

const msg = await anthropic.messages.create({
  model: "claude-sonnet-4-20250514",
  max_tokens: 1024,
  messages: [{ role: "user", content: "Hello, Claude" }],
});
console.log(msg);
```

----------------------------------------

TITLE: Perform a basic query with Claude Code TypeScript SDK
DESCRIPTION: This example demonstrates the fundamental usage of the `query` function in the Claude Code TypeScript SDK. It shows how to send a prompt, configure options like `maxTurns` and `allowedTools`, and process the streamed results from Claude for tasks like system performance analysis.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: TypeScript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

for await (const message of query({
  prompt: "Analyze system performance",
  abortController: new AbortController(),
  options: {
    maxTurns: 5,
    systemPrompt: "You are a performance engineer",
    allowedTools: ["Bash", "Read", "WebSearch"]
  }
})) {
  if (message.type === "result") {
    console.log(message.result);
  }
}
```

----------------------------------------

TITLE: Text Input - TypeScript
DESCRIPTION: Shows how to use the 'query' function in TypeScript to send text prompts to the Claude SDK and process the streaming results.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: typescript
CODE:
```
// Direct prompt
for await (const message of query({
  prompt: "Explain this code"
})) {
  if (message.type === "result") console.log(message.result);
}

// From variable
const userInput = "Explain this code";
for await (const message of query({ prompt: userInput })) {
  if (message.type === "result") console.log(message.result);
}

```

----------------------------------------

TITLE: TypeScript SDK Configuration Example
DESCRIPTION: This snippet shows a basic configuration for the TypeScript SDK, including allowed tools and a system prompt. It's a foundational example for setting up the SDK's behavior.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: TypeScript
CODE:
```
allowedTools: ["Bash", "Read", "WebSearch"]
  }
})) {
```

----------------------------------------

TITLE: Install Claude Code TypeScript SDK via npm
DESCRIPTION: This snippet provides the command to globally install the `@anthropic-ai/claude-code` package using npm. This is the first step to set up the SDK for developing AI agents with Claude in TypeScript.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: Bash
CODE:
```
npm install -g @anthropic-ai/claude-code
```

----------------------------------------

TITLE: JSON Output with Metadata (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates collecting all messages from a query and accessing the result message with its associated metadata, such as cost and duration. It iterates through the messages, stores them in an array, and then finds the 'result' message.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: typescript
CODE:
```
// Collect all messages for JSON-like access
const messages = [];
for await (const message of query({
  prompt: "How does the data layer work?"
})) {
  messages.push(message);
}

// Access result message with metadata
const result = messages.find(m => m.type === "result");
console.log({
  result: result.result,
  cost: result.total_cost_usd,
  duration: result.duration_ms
});
```

----------------------------------------

TITLE: TypeScript: SRE Incident Response and Code Refactoring Agents
DESCRIPTION: Provides TypeScript examples using the `@anthropic-ai/claude-code` SDK to instantiate agents for SRE incident response and code refactoring. It demonstrates streaming results and appending system prompts.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: typescript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

// SRE incident response agent
for await (const message of query({
  prompt: "API is down, investigate",
  options: {
    systemPrompt: "You are an SRE expert. Diagnose issues systematically and provide actionable solutions.",
    maxTurns: 3
  }
})) {
  if (message.type === "result") console.log(message.result);
}

// Append to default system prompt
for await (const message of query({
  prompt: "Refactor this function",
  options: {
    appendSystemPrompt: "Always include comprehensive error handling and unit tests.",
    maxTurns: 2
  }
})) {
  if (message.type === "result") console.log(message.result);
}
```

----------------------------------------

TITLE: Install Anthropic TypeScript SDK
DESCRIPTION: Installs the Anthropic TypeScript SDK using npm, adding it to your project's dependencies.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/get-started

LANGUAGE: Shell
CODE:
```
npm install @anthropic-ai/sdk
```

----------------------------------------

TITLE: Run TypeScript Agent
DESCRIPTION: Sets up a Node.js project for a TypeScript agent and runs it using `tsx`. This involves initializing the project, installing dependencies, and configuring the package.json.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: Bash
CODE:
```
npm init -y
npm install @anthropic-ai/claude-code tsx
# Add "type": "module" to package.json
# Save code as legal-agent.ts
npx tsx legal-agent.ts
```

----------------------------------------

TITLE: Send Message to Anthropic Claude API with TypeScript SDK
DESCRIPTION: This example demonstrates how to use the Anthropic TypeScript SDK to send a message to the Claude API. It shows how to instantiate the client with an API key and send a message with a specified model and user content, then log the response.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/overview

LANGUAGE: TypeScript
CODE:
```
import Anthropic from '@anthropic-ai/sdk';

const anthropic = new Anthropic({
  apiKey: 'my_api_key', // defaults to process.env["ANTHROPIC_API_KEY"]
});

const msg = await anthropic.messages.create({
  model: "claude-opus-4-20250514",
  max_tokens: 1024,
  messages: [{ role: "user", content: "Hello, Claude" }],
});
console.log(msg);
```

----------------------------------------

TITLE: Create Legal Assistant Agent (TypeScript)
DESCRIPTION: Creates a simple legal assistant agent using TypeScript. It utilizes the `query` function from the SDK to send a prompt and system prompt, then streams the response.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: TypeScript
CODE:
```
// legal-agent.ts
import { query } from "@anthropic-ai/claude-code";

// Create a simple legal assistant
for await (const message of query({
  prompt: "Review this contract clause for potential issues: 'The party agrees to unlimited liability...'",
  options: {
    systemPrompt: "You are a legal assistant. Identify risks and suggest improvements.",
    maxTurns: 2
  }
})) {
  if (message.type === "result") {
    console.log(message.result);
  }
}
```

----------------------------------------

TITLE: Claude Code TypeScript SDK Basic Usage
DESCRIPTION: Illustrates the basic usage of the Claude Code TypeScript SDK, employing the `query` function to initiate a conversation and stream messages asynchronously. It includes parameters for the prompt, an AbortController, and query options like `maxTurns` and `systemPrompt`.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: typescript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

for await (const message of query({
  prompt: "Analyze system performance",
  abortController: new AbortController(),
  options: {
    maxTurns: 5,
    systemPrompt: "You are a performance engineer",
  }
})) {
  // Process streamed messages
}
```

----------------------------------------

TITLE: Install Anthropic TypeScript SDK via npm
DESCRIPTION: This snippet provides the command to install the official Anthropic TypeScript/JavaScript SDK using npm. This SDK simplifies interaction with the Anthropic API in Node.js and browser environments.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/overview

LANGUAGE: TypeScript
CODE:
```
npm install @anthropic-ai/sdk
```

----------------------------------------

TITLE: Plan Mode in TypeScript
DESCRIPTION: Demonstrates the usage of Plan Mode in TypeScript with the Claude Code SDK. This mode restricts Claude from editing files or executing commands, focusing solely on analysis and review.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: typescript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

for await (const message of query({
  prompt: "Your prompt here",
  options: {
    permissionMode: 'plan'
  }
})) {
  if (message.type === "result") {
    console.log(message.result);
  }
}
```

----------------------------------------

TITLE: Multi-turn Conversations in TypeScript
DESCRIPTION: Illustrates how to handle multi-turn conversations using the Claude Code SDK in TypeScript. It shows how to continue the most recent conversation or resume a specific session using session IDs and configuration options.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: typescript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

// Continue most recent conversation
for await (const message of query({
  prompt: "Now refactor this for better performance",
  options: { continueSession: true }
})) {
  if (message.type === "result") console.log(message.result);
}

// Resume specific session
for await (const message of query({
  prompt: "Update the tests",
  options: {
    resumeSessionId: "550e8400-e29b-41d4-a716-446655440000",
    maxTurns: 3
  }
})) {
  if (message.type === "result") console.log(message.result);
}
```

----------------------------------------

TITLE: Stream Input to Claude Code
DESCRIPTION: This example demonstrates how to use streaming input mode to provide messages as an asynchronous iterable to the Claude Code API. This approach enables dynamic message generation, multi-turn conversations, and is essential for advanced interaction patterns.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: javascript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

// Create an async generator for streaming messages
async function* generateMessages() {
  yield {
    type: "user" as const,
    message: {
      role: "user" as const,
      content: "Start analyzing this codebase"
    }
  };

  // Wait for some condition or user input
  await new Promise(resolve => setTimeout(resolve, 1000));

  yield {
    type: "user" as const,
    message: {
      role: "user" as const,
      content: "Now focus on the authentication module"
    }
  };
}

// Use streaming input
for await (const message of query({
  prompt: generateMessages(),
  options: {
    maxTurns: 5,
    allowedTools: ["Read", "Grep", "Bash"]
  }
})) {
  if (message.type === "result") {
    console.log(message.result);
  }
}
```

----------------------------------------

TITLE: Send Message to Anthropic Claude API with TypeScript SDK
DESCRIPTION: This TypeScript code snippet demonstrates how to send a message to the Anthropic Claude API using the official SDK. It initializes the client with an API key and then asynchronously calls the 'messages.create' method, specifying the model, max tokens, and message content. The response message object is then logged to the console.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/getting-started

LANGUAGE: TypeScript
CODE:
```
import Anthropic from '@anthropic-ai/sdk';

const anthropic = new Anthropic({
  apiKey: 'my_api_key', // defaults to process.env["ANTHROPIC_API_KEY"]
});

const msg = await anthropic.messages.create({
  model: "claude-opus-4-20250514",
  max_tokens: 1024,
  messages: [{ role: "user", content: "Hello, Claude" }],
});
console.log(msg);
```

----------------------------------------

TITLE: Provide Prompts to Claude Code Query Using Direct String or Variable
DESCRIPTION: This snippet illustrates two common ways to supply a prompt to the `query` function of the Claude Code SDK. You can either pass the prompt directly as a string literal or use a variable to hold the prompt text, offering flexibility in how prompts are managed.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: TypeScript
CODE:
```
// Direct prompt
for await (const message of query({
  prompt: "Explain this code"
})) {
  if (message.type === "result") console.log(message.result);
}

// From variable
const userInput = "Explain this code";
for await (const message of query({ prompt: userInput })) {
  if (message.type === "result") console.log(message.result);
}
```

----------------------------------------

TITLE: Multi-step Legal Review with Persistent Session (TypeScript)
DESCRIPTION: Demonstrates how to perform a multi-step legal review using a persistent session with the Claude Code SDK in TypeScript. It initializes a session, then iterates through a list of review steps, processing each one within the same session context.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: typescript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

async function legalReview() {
  // Start legal review session
  let sessionId: string;

  for await (const message of query({
    prompt: "Start legal review session",
    options: { maxTurns: 1 }
  })) {
    if (message.type === "system" && message.subtype === "init") {
      sessionId = message.session_id;
    }
  }

  // Multi-step review using same session
  const steps = [
    "Review contract.pdf for liability clauses",
    "Check compliance with GDPR requirements",
    "Generate executive summary of risks"
  ];

  for (const step of steps) {
    for await (const message of query({
      prompt: step,
      options: { resumeSessionId: sessionId, maxTurns: 2 }
    })) {
      if (message.type === "result") {
        console.log(`Step: ${step}`);
        console.log(message.result);
      }
    }
  }
}

```

----------------------------------------

TITLE: Stream Images to Claude Code
DESCRIPTION: This snippet shows how to attach images to messages when interacting with the Claude Code API, which is exclusively supported via streaming input mode. It includes reading an image file and encoding it in base64 format for submission.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: javascript
CODE:
```
import { query } from "@anthropic-ai/claude-code";
import { readFileSync } from "fs";

async function* messagesWithImage() {
  // Send an image with text
  yield {
    type: "user" as const,
    message: {
      role: "user" as const,
      content: [
        {
          type: "text",
          text: "Analyze this screenshot and suggest improvements"
        },
        {
          type: "image",
          source: {
            type: "base64",
            media_type: "image/png",
            data: readFileSync("screenshot.png", "base64")
          }
        }
      ]
    }
  };
}

for await (const message of query({
  prompt: messagesWithImage()
})) {
  if (message.type === "result") console.log(message.result);
}
```

----------------------------------------

TITLE: Accepted Claude model strings for Anthropic TypeScript SDK
DESCRIPTION: Lists the valid string identifiers for various Claude models supported by the Anthropic API, including Claude 4, Claude 3.7, Claude 3.5, and Claude 3 series, along with their respective aliases, for use with the TypeScript SDK.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/client-sdks

LANGUAGE: TypeScript
CODE:
```
// Claude 4 Models
"claude-opus-4-20250514"
"claude-opus-4-0"  // alias
"claude-sonnet-4-20250514"
"claude-sonnet-4-0"  // alias

// Claude 3.7 Models
"claude-3-7-sonnet-20250219"
"claude-3-7-sonnet-latest"  // alias

// Claude 3.5 Models
"claude-3-5-haiku-20241022"
"claude-3-5-haiku-latest"  // alias
"claude-3-5-sonnet-20241022"
"claude-3-5-sonnet-latest"  // alias
"claude-3-5-sonnet-20240620"  // previous version

// Claude 3 Models
"claude-3-opus-20240229"
"claude-3-opus-latest"  // alias
"claude-3-sonnet-20240229"
"claude-3-haiku-20240307"
```

----------------------------------------

TITLE: Access Structured JSON Output and Metadata from Claude Code Query
DESCRIPTION: This example shows how to collect all messages returned by a Claude Code `query` into an array. It then demonstrates how to find the 'result' message and access its content, along with associated metadata such as total cost and duration.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: TypeScript
CODE:
```
// Collect all messages for JSON-like access
const messages = [];
for await (const message of query({
  prompt: "How does the data layer work?"
})) {
  messages.push(message);
}

// Access result message with metadata
const result = messages.find(m => m.type === "result");
console.log({
  result: result.result,
  cost: result.total_cost_usd,
  duration: result.duration_ms
});
```

----------------------------------------

TITLE: Understand Claude Code SDK Message Schema
DESCRIPTION: This section defines the `SDKMessage` TypeScript type, outlining the various message types (assistant, user, result, system) returned by the Claude Code JSON API. It details the structure and properties of each message type, including session IDs, UUIDs, and specific subtypes for results and system initialization, providing a clear contract for API interactions.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: TypeScript
CODE:
```
type SDKMessage =
  // An assistant message
  | {
      type: "assistant";
      uuid: string;
      session_id: string;
      message: Message; // from Anthropic SDK
      parent_tool_use_id: string | null;
    }

  // A user message (input)
  | {
      type: "user";
      uuid?: string;
      session_id: string;
      message: MessageParam; // from Anthropic SDK
      parent_tool_use_id: string | null;
    }

  // A user message (output/replay with required UUID)
  | {
      type: "user";
      uuid: string;
      session_id: string;
      message: MessageParam; // from Anthropic SDK
      parent_tool_use_id: string | null;
    }

  // Emitted as the last message on success
  | {
      type: "result";
      subtype: "success";
      uuid: UUID;
      session_id: string;
      duration_ms: number;
      duration_api_ms: number;
      is_error: boolean;
      num_turns: number;
      result: string;
      total_cost_usd: number;
      usage: Usage;
      permission_denials: SDKPermissionDenial[];
    }

  // Emitted as the last message on error or max turns
  | {
      type: "result";
      subtype: "error_max_turns" | "error_during_execution";
      uuid: UUID;
      session_id: string;
      duration_ms: number;
      duration_api_ms: number;
      is_error: boolean;
      num_turns: number;
      total_cost_usd: number;
      usage: Usage;
      permission_denials: SDKPermissionDenial[];
    }

  // Emitted as the first message at the start of a conversation
  | {
      type: "system";
      subtype: "init";
      uuid: UUID;
      session_id: string;
      apiKeySource: "user" | "project" | "org" | "temporary";
      cwd: string;
      tools: string[];
      mcp_servers: {
        name: string;
        status: string;
      }[];
      model: string;
      permissionMode: "default" | "acceptEdits" | "bypassPermissions" | "plan";
      slash_commands: string[];
      output_style: string;
    };

  type SDKPermissionDenial = {
    tool_name: string;
    tool_use_id: string;
    tool_input: Record<string, unknown>;
  }
```

----------------------------------------

TITLE: Retrieve Default Text Output from Claude Code Query
DESCRIPTION: This snippet demonstrates how to use the `query` function from the @anthropic-ai/claude-code SDK to get a response. By default, the result message type will contain the output as plain text, which is then logged to the console.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: TypeScript
CODE:
```
// Default text output
for await (const message of query({
  prompt: "Explain file src/components/Header.tsx"
})) {
  if (message.type === "result") {
    console.log(message.result);
    // Output: This is a React component showing...
  }
}
```

----------------------------------------

TITLE: SRE Agent with Monitoring Tools (TypeScript)
DESCRIPTION: Demonstrates an SRE agent using the Claude Code SDK in TypeScript. It investigates a payment service outage, specifying monitoring tools (Datadog, PagerDuty, Kubernetes), a system prompt for the SRE role, and a maximum number of turns.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: typescript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

// SRE agent with monitoring tools
for await (const message of query({
  prompt: "Investigate the payment service outage",
  options: {
    mcpConfig: "sre-tools.json",
    allowedTools: ["mcp__datadog", "mcp__pagerduty", "mcp__kubernetes"],
    systemPrompt: "You are an SRE. Use monitoring data to diagnose issues.",
    maxTurns: 4
  }
})) {
  if (message.type === "result") console.log(message.result);
}
```

----------------------------------------

TITLE: TypeScript SDK: Custom Permission Prompt Server
DESCRIPTION: An example of setting up an MCP server in TypeScript to handle custom permission prompts. It defines a tool ('approval_prompt') that either allows or denies requests based on the input content, simulating a permission check.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: typescript
CODE:
```
const server = new McpServer({
  name: "Test permission prompt MCP Server",
  version: "0.0.1",
});

server.tool(
  "approval_prompt",
  'Simulate a permission check - approve if the input contains "allow", otherwise deny',
  {
    tool_name: z.string().describe("The name of the tool requesting permission"),
    input: z.object({}).passthrough().describe("The input for the tool"),
    tool_use_id: z.string().optional().describe("The unique tool use request ID"),
  },
  async ({ tool_name, input }) => {
    return {
      content: [
        {
          type: "text",
          text: JSON.stringify(
            JSON.stringify(input).includes("allow")
              ? {
                  behavior: "allow",
                  updatedInput: input,
                }
              : {
                  behavior: "deny",
                  message: "Permission denied by test approval_prompt tool",
                }
          ),
        },
      ],
    };
  }
);
```

----------------------------------------

TITLE: TypeScript SDK: Using Custom Permission Prompt
DESCRIPTION: Demonstrates how to use a custom permission prompt tool within the Claude Code SDK in TypeScript. It configures the SDK client to use a specific permission prompt tool and includes example logic for processing responses, including permission denials.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: typescript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

for await (const message of query({
  prompt: "Analyze the codebase",
  options: {
    permissionPromptTool: "mcp__test-server__approval_prompt",
    mcpConfig: "my-config.json",
    allowedTools: ["Read", "Grep"]
  }
})) {
  if (message.type === "result") console.log(message.result);
}
```

----------------------------------------

TITLE: Install Anthropic TypeScript/JavaScript SDK
DESCRIPTION: This command shows how to install the official Anthropic TypeScript/JavaScript client library. It uses 'npm', the Node.js package manager, to fetch and install the '@anthropic-ai/sdk' package. This is the first step to using the SDK in a Node.js or browser environment.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/getting-started

LANGUAGE: TypeScript
CODE:
```
npm install @anthropic-ai/sdk
```

----------------------------------------

TITLE: Configure Post-Tool-Use Hook for TypeScript Formatting
DESCRIPTION: This `PostToolUse` hook configuration automatically formats TypeScript files after they are edited, multi-edited, or written by Claude. It uses `jq` to extract the file path and then conditionally runs `npx prettier --write` if the file has a `.ts` extension.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks-guide

LANGUAGE: json
CODE:
```
{
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '.tool_input.file_path' | { read file_path; if echo \"$file_path\" | grep -q '\\.ts$'; then npx prettier --write \"$file_path\"; fi; }"
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Security Audit Pull Request (TypeScript)
DESCRIPTION: Audits a pull request for security vulnerabilities using the Claude Code SDK in TypeScript. It fetches the PR diff using the 'gh' CLI, sends it to the Claude API with a system prompt for security analysis, and processes the streaming results to find the final report.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: TypeScript
CODE:
```
import { query } from "@anthropic-ai/claude-code";
import { execSync } from "child_process";

async function auditPR(prNumber: number) {
  // Get PR diff
  const prDiff = execSync(`gh pr diff ${prNumber}`, { encoding: 'utf8' });

  const messages = [];
  for await (const message of query({
    prompt: prDiff,
    options: {
      systemPrompt: "You are a security engineer. Review this PR for vulnerabilities, insecure patterns, and compliance issues.",
      maxTurns: 3,
      allowedTools: ["Read", "Grep", "WebSearch"]
    }
  })) {
    messages.push(message);
  }

  return messages.find(m => m.type === "result");
}

// Usage
const report = await auditPR(123);
console.log(JSON.stringify(report, null, 2));

```

----------------------------------------

TITLE: Claude Code SDK Configuration Options
DESCRIPTION: Lists and describes the configuration options available for the TypeScript SDK, mirroring arguments supported by the command line. Includes details on `abortController`, `cwd`, `executable`, `executableArgs`, `pathToClaudeCodeExecutable`, and `permissionMode`.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: APIDOC
CODE:
```
Configuration
The TypeScript SDK accepts all arguments supported by the [command line](https://docs.anthropic.com/en/docs/claude-code/cli-reference), as well as the following additional options:
Argument | Description | Default
---|---|--
`abortController` | Abort controller | `new AbortController()`
`cwd` | Current working directory | `process.cwd()`
`executable` | Which JavaScript runtime to use |  `node` when running with Node.js, `bun` when running with Bun
`executableArgs` | Arguments to pass to the executable | `[]`
`pathToClaudeCodeExecutable` | Path to the Claude Code executable | Executable that ships with `@anthropic-ai/claude-code`
`permissionMode` | Permission mode for the session |  `"default"` (options: `"default"`, `"acceptEdits"`, `"plan"`, `"bypassPermissions"`)
```

----------------------------------------

TITLE: Implement SRE Incident Response Agent with Claude Code SDK
DESCRIPTION: This example demonstrates building an automated SRE incident response agent using the Claude Code SDK. It shows how to define a function that takes an incident description and severity, sets a system prompt for an SRE expert, and configures allowed tools and MCPs for diagnosis and action.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: TypeScript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

// Automated incident response agent
async function investigateIncident(
  incidentDescription: string,
  severity = "medium"
) {
  const messages = [];

  for await (const message of query({
    prompt: `Incident: ${incidentDescription} (Severity: ${severity})`,
    options: {
      systemPrompt: "You are an SRE expert. Diagnose the issue, assess impact, and provide immediate action items.",
      maxTurns: 6,
      allowedTools: ["Bash", "Read", "WebSearch", "mcp__datadog"],
      mcpConfig: "monitoring-tools.json"
    }
  })) {
    messages.push(message);
  }

  return messages.find(m => m.type === "result");
}

// Usage
const result = await investigateIncident("Payment API returning 500 errors", "high");
console.log(result.result);
```

----------------------------------------

TITLE: Integrate Web Search Tool with Claude API using cURL
DESCRIPTION: Demonstrates how to make an API request to Claude with the web search tool enabled. This example shows a user message asking about TypeScript updates and includes the `web_search_20250305` tool in the request payload, limiting its uses to 5.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
    --header "x-api-key: $ANTHROPIC_API_KEY" \
    --header "anthropic-version: 2023-06-01" \
    --header "content-type: application/json" \
    --data '{
        "model": "claude-opus-4-20250514",
        "max_tokens": 1024,
        "messages": [
            {
                "role": "user",
                "content": "How do I update a web app to TypeScript 5.5?"
            }
        ],
        "tools": [{
            "type": "web_search_20250305",
            "name": "web_search",
            "max_uses": 5
        }]
    }'
```

----------------------------------------

TITLE: Automated Incident Response Agent (TypeScript)
DESCRIPTION: An automated incident response agent that uses the Claude Code SDK to diagnose issues, assess impact, and provide action items. It takes an incident description and severity as input and returns the investigation results.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: TypeScript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

// Automated incident response agent
async function investigateIncident(
  incidentDescription: string,
  severity = "medium"
) {
  const messages = [];

  for await (const message of query({
    prompt: `Incident: ${incidentDescription} (Severity: ${severity})`,
    options: {
      systemPrompt: "You are an SRE expert. Diagnose the issue, assess impact, and provide immediate action items.",
      maxTurns: 6,
      allowedTools: ["Bash", "Read", "WebSearch", "mcp__datadog"],
      mcpConfig: "monitoring-tools.json"
    }
  })) {
    messages.push(message);
  }

  return messages.find(m => m.type === "result");
}

// Usage
const result = await investigateIncident("Payment API returning 500 errors", "high");
console.log(result.result);
```

----------------------------------------

TITLE: Create Custom Permission Handling Tool with MCPs in JavaScript
DESCRIPTION: This example demonstrates how to define a custom tool named 'approval_prompt' using an McpServer. It simulates a permission check, allowing or denying based on input, and shows how to integrate this custom tool with the @anthropic-ai/claude-code SDK for use in queries.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: TypeScript
CODE:
```
const server = new McpServer({
  name: "Test permission prompt MCP Server",
  version: "0.0.1",
});

server.tool(
  "approval_prompt",
  'Simulate a permission check - approve if the input contains "allow", otherwise deny',
  {
    tool_name: z.string().describe("The name of the tool requesting permission"),
    input: z.object({}).passthrough().describe("The input for the tool"),
    tool_use_id: z.string().optional().describe("The unique tool use request ID"),
  },
  async ({ tool_name, input }) => {
    return {
      content: [
        {
          type: "text",
          text: JSON.stringify(
            JSON.stringify(input).includes("allow")
              ? {
                  behavior: "allow",
                  updatedInput: input,
                }
              : {
                  behavior: "deny",
                  message: "Permission denied by test approval_prompt tool",
                }
          ),
        },
      ],
    };
  }
);

// Use in SDK
import { query } from "@anthropic-ai/claude-code";

for await (const message of query({
  prompt: "Analyze the codebase",
  options: {
    permissionPromptTool: "mcp__test-server__approval_prompt",
    mcpConfig: "my-config.json",
    allowedTools: ["Read", "Grep"]
  }
})) {
  if (message.type === "result") console.log(message.result);
}
```

----------------------------------------

TITLE: Resume Claude Code Sessions
DESCRIPTION: This snippet illustrates how to manage conversation sessions with the Claude Code API. It shows examples of continuing the most recent conversation or resuming a specific session using unique session IDs, allowing for multi-turn interactions.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: javascript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

// Continue most recent conversation
for await (const message of query({
  prompt: "Now refactor this for better performance",
  options: { continue: true }
})) {
  if (message.type === "result") console.log(message.result);
}

// Resume specific session
for await (const message of query({
  prompt: "Update the tests",
  options: {
    resume: "550e8400-e29b-41d4-a716-446655440000",
    maxTurns: 3
  }
})) {
  if (message.type === "result") console.log(message.result);
}
```

----------------------------------------

TITLE: Default Text Output with Streaming
DESCRIPTION: This snippet shows how to get default text output from the Claude SDK, streaming the response as it arrives. It iterates through messages and prints the text content.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: typescript
CODE:
```
for await (const message of query({
  prompt: "Explain file src/components/Header.tsx"
})) {
  if (message.type === "result") {
    console.log(message.result);
    // Output: This is a React component showing...
  }
}
```

----------------------------------------

TITLE: Automate Security Review of Pull Requests with Claude Code SDK
DESCRIPTION: This snippet provides an example of an automated security review agent for pull requests. It fetches a PR diff using `execSync`, then uses the Claude Code SDK with a security-focused system prompt and relevant tools (Read, Grep, WebSearch) to analyze the diff for vulnerabilities and insecure patterns.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: TypeScript
CODE:
```
import { query } from "@anthropic-ai/claude-code";
import { execSync } from "child_process";

async function auditPR(prNumber: number) {
  // Get PR diff
  const prDiff = execSync(`gh pr diff ${prNumber}`, { encoding: 'utf8' });

  const messages = [];
  for await (const message of query({
    prompt: prDiff,
    options: {
      systemPrompt: "You are a security engineer. Review this PR for vulnerabilities, insecure patterns, and compliance issues.",
      maxTurns: 3,
      allowedTools: ["Read", "Grep", "WebSearch"]
    }
  })) {
    messages.push(message);
  }

  return messages.find(m => m.type === "result");
}

// Usage
const report = await auditPR(123);
console.log(JSON.stringify(report, null, 2));
```

----------------------------------------

TITLE: Message Schema Definition
DESCRIPTION: This APIDOC defines the TypeScript types for messages exchanged with the Claude SDK. It covers various message types including assistant, user, result (success and error), and system initialization messages, detailing their properties and potential values.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: APIDOC
CODE:
```
type SDKMessage =
  // An assistant message
  | {
      type: "assistant";
      message: Message; // from Anthropic SDK
      session_id: string;
    }

  // A user message
  | {
      type: "user";
      message: MessageParam; // from Anthropic SDK
      session_id: string;
    }

  // Emitted as the last message
  | {
      type: "result";
      subtype: "success";
      duration_ms: float;
      duration_api_ms: float;
      is_error: boolean;
      num_turns: int;
      result: string;
      session_id: string;
      total_cost_usd: float;
    }

  // Emitted as the last message, when we've reached the maximum number of turns
  | {
      type: "result";
      subtype: "error_max_turns" | "error_during_execution";
      duration_ms: float;
      duration_api_ms: float;
      is_error: boolean;
      num_turns: int;
      session_id: string;
      total_cost_usd: float;
    }

  // Emitted as the first message at the start of a conversation
  | {
      type: "system";
      subtype: "init";
      apiKeySource: string;
      cwd: string;
      session_id: string;
      tools: string[];
      mcp_servers: {
        name: string;
        status: string;
      }[];
      model: string;
      permissionMode: "default" | "acceptEdits" | "bypassPermissions" | "plan";
    };

`Message` and `MessageParam` types are available in Anthropic SDKs. For example, see the Anthropic [TypeScript](https://github.com/anthropics/anthropic-sdk-typescript) and [Python](https://github.com/anthropics/anthropic-sdk-python/) SDKs.
```

----------------------------------------

TITLE: Implement Multi-turn Legal Assistant with Claude Code SDK
DESCRIPTION: This snippet demonstrates how to use the `@anthropic-ai/claude-code` SDK to conduct a multi-turn legal review session. It initializes a session and then performs several steps (reviewing a contract, checking GDPR compliance, generating a summary) using the same session ID to maintain context across turns.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: TypeScript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

async function legalReview() {
  // Start legal review session
  let sessionId: string;

  for await (const message of query({
    prompt: "Start legal review session",
    options: { maxTurns: 1 }
  })) {
    if (message.type === "system" && message.subtype === "init") {
      sessionId = message.session_id;
    }
  }

  // Multi-step review using same session
  const steps = [
    "Review contract.pdf for liability clauses",
    "Check compliance with GDPR requirements",
    "Generate executive summary of risks"
  ];

  for (const step of steps) {
    for await (const message of query({
      prompt: step,
      options: { resume: sessionId, maxTurns: 2 }
    })) {
      if (message.type === "result") {
        console.log(`Step: ${step}`);
        console.log(message.result);
      }
    }
  }
}
```

----------------------------------------

TITLE: Migrate SDK Prompt Caching Calls to New Syntax
DESCRIPTION: This snippet addresses a common TypeError encountered when using prompt caching in SDKs after an upgrade. It provides updated code examples for both Python and TypeScript, demonstrating how to remove the deprecated beta prefix as prompt caching is now generally available.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/prompt-caching

LANGUAGE: Python
CODE:
```
python client.beta.prompt_caching.messages.create(...)
```

LANGUAGE: Python
CODE:
```
python client.messages.create(...)
```

LANGUAGE: TypeScript
CODE:
```
client.beta.promptCaching.messages.create(...)
```

LANGUAGE: TypeScript
CODE:
```
client.messages.create(...)
```

----------------------------------------

TITLE: Integrate Custom Tools with Claude Code via MCP
DESCRIPTION: This snippet illustrates how to extend the capabilities of your Claude Code agents by integrating custom tools using the Model Context Protocol (MCP). It shows how to specify an MCP configuration file and declare allowed tools for the agent to utilize.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: javascript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

// SRE agent with monitoring tools
for await (const message of query({
  prompt: "Investigate the payment service outage",
  options: {
    mcpConfig: "sre-tools.json",
    allowedTools: ["mcp__datadog", "mcp__pagerduty", "mcp__kubernetes"],
    systemPrompt: "You are an SRE. Use monitoring data to diagnose issues.",
    maxTurns: 4
  }
})) {
  if (message.type === "result") console.log(message.result);
}
```

----------------------------------------

TITLE: Configure Custom System Prompts for Claude Code
DESCRIPTION: This example demonstrates how to define or modify an agent's role, expertise, and behavior using custom system prompts in the Claude Code API. It shows both setting a new system prompt and appending additional instructions to the default prompt.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

LANGUAGE: javascript
CODE:
```
import { query } from "@anthropic-ai/claude-code";

// SRE incident response agent
for await (const message of query({
  prompt: "API is down, investigate",
  options: {
    systemPrompt: "You are an SRE expert. Diagnose issues systematically and provide actionable solutions.",
    maxTurns: 3
  }
})) {
  if (message.type === "result") console.log(message.result);
}

// Append to default system prompt
for await (const message of query({
  prompt: "Refactor this function",
  options: {
    appendSystemPrompt: "Always include comprehensive error handling and unit tests.",
    maxTurns: 2
  }
})) {
  if (message.type === "result") console.log(message.result);
}
```

----------------------------------------

TITLE: Using Plan Mode with Claude Code
DESCRIPTION: Explains how to utilize Plan Mode in the Claude Code SDK, which allows Claude to analyze code without making modifications. This is beneficial for code reviews and planning changes. Examples are provided for command line, TypeScript, and Python.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: bash
CODE:
```
claude -p "Review this code" --permission-mode plan
```

----------------------------------------

TITLE: Handling `max_tokens` Stop Reason for Incomplete Tool Use
DESCRIPTION: This code snippet demonstrates how to detect if Claude's response was truncated due to the `max_tokens` limit, specifically when an incomplete `tool_use` block is present. It shows how to retry the API request with an increased `max_tokens` value to get the full tool use instruction.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: Python
CODE:
```
# Check if response was truncated during tool use
if response.stop_reason == "max_tokens":
    # Check if the last content block is an incomplete tool_use
    last_block = response.content[-1]
    if last_block.type == "tool_use":
        # Send the request with higher max_tokens
        response = client.messages.create(
            model="claude-opus-4-20250514",
            max_tokens=4096,  # Increased limit
            messages=messages,
            tools=tools
        )
```

LANGUAGE: TypeScript
CODE:
```

```

----------------------------------------

TITLE: Multi-turn Conversations with Claude Code
DESCRIPTION: Demonstrates how to manage multi-turn conversations using the Claude Code SDK. This includes continuing the most recent conversation or resuming a specific conversation by its session ID. Examples are provided for command line, TypeScript, and Python.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: bash
CODE:
```
# Continue the most recent conversation
claude --continue "Now refactor this for better performance"

# Resume a specific conversation by session ID
claude --resume 550e8400-e29b-41d4-a716-446655440000 "Update the tests"

# Resume in non-interactive mode
claude --resume 550e8400-e29b-41d4-a716-446655440000 "Fix all linting issues" --no-interactive
```

----------------------------------------

TITLE: Handling `pause_turn` Stop Reason for Server Tools
DESCRIPTION: This code snippet illustrates the initial setup for handling the `pause_turn` stop reason, which indicates that the Anthropic API has paused a long-running turn, typically when server-side tools like web search are being used internally by Claude.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: Python
CODE:
```
import anthropic

client = anthropic.Anthropic()
```

LANGUAGE: TypeScript
CODE:
```

```

----------------------------------------

TITLE: API Reference: tools.type
DESCRIPTION: Defines the type of the tool, with 'custom' as an available option.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
tools.type:
  Type: enum<string> | null
  Available options: custom
```

----------------------------------------

TITLE: Example Tool Definition JSON
DESCRIPTION: Provides a JSON example for defining a tool's `input_schema`, including properties, their descriptions and types, and required fields, as used in Anthropic's tool definition.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: json
CODE:
```
{
  "description": "Get the current weather in a given location",
  "input_schema": {
    "properties": {
      "location": {
        "description": "The city and state, e.g. San Francisco, CA",
        "type": "string"
      },
      "unit": {
        "description": "Unit for the output - one of (celsius, fahrenheit)",
        "type": "string"
      }
    },
    "required": ["location"],
    "type": "object"
  },
  "name": "get_weather"
}
```

----------------------------------------

TITLE: API Reference: tools.input_schema
DESCRIPTION: Specifies the JSON schema for a tool's input, defining the structure of the `input` that the tool accepts and the model produces.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
tools.input_schema:
  Type: object
  Required: true
  Description: JSON schema for this tool's input. This defines the shape of the `input` that your tool accepts and that the model will produce.
  Child Attributes:
    type:
      Type: enum<string>
      Required: true
      Available options: object
    properties:
      Type: object | null
    required:
      Type: string[] | null
```

----------------------------------------

TITLE: Preventing imports within markdown code spans and blocks
DESCRIPTION: To avoid potential collisions and misinterpretations, the `@path/to/import` syntax is explicitly not evaluated inside markdown code spans and code blocks. This ensures that literal code examples containing `@` symbols are not treated as file imports.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/memory

LANGUAGE: Markdown
CODE:
```
This code span will not be treated as an import: `@anthropic-ai/claude-code`

```

----------------------------------------

TITLE: Install Claude Code SDK (NPM)
DESCRIPTION: Installs the Claude Code SDK globally using NPM. This is a prerequisite for using the SDK in Node.js environments.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: Bash
CODE:
```
npm install -g @anthropic-ai/claude-code
```

----------------------------------------

TITLE: Preventing Imports in Claude Code Markdown Code Spans
DESCRIPTION: This example highlights that the Claude Code import syntax (`@path/to/import`) is not evaluated within markdown code spans or code blocks. This design choice prevents potential collisions and ensures that literal code examples containing `@` symbols are not misinterpreted as imports.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/memory

LANGUAGE: Markdown
CODE:
```
This code span will not be treated as an import: `@anthropic-ai/claude-code`
```

----------------------------------------

TITLE: Define `get_weather` Tool with JSON Schema
DESCRIPTION: This JSON snippet defines a `get_weather` tool, specifying its name, a brief description, and an `input_schema` using JSON Schema. The schema details the expected parameters (`location` and `unit`) for the tool, including their types, descriptions, and required fields.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: json
CODE:
```
{
  "name": "get_weather",
  "description": "Get the current weather in a given location",
  "input_schema": {
    "type": "object",
    "properties": {
      "location": {
        "type": "string",
        "description": "The city and state, e.g. San Francisco, CA"
      },
      "unit": {
        "type": "string",
        "enum": ["celsius", "fahrenheit"],
        "description": "The unit of temperature, either 'celsius' or 'fahrenheit'"
      }
    },
    "required": ["location"]
  }
}
```

----------------------------------------

TITLE: Claude's Chain of Thought and Parallel Tool Use Example (JSON)
DESCRIPTION: This JSON response from Claude demonstrates its 'chain of thought' reasoning process, where it outlines the steps it plans to take to answer a query. It also includes a `tool_use` content block, showing how Claude initiates a tool call with a unique ID, tool name, and input parameters.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: json
CODE:
```
{
  "role": "assistant",
  "content": [
    {
      "type": "text",
      "text": "<thinking>To answer this question, I will: 1. Use the get_weather tool to get the current weather in San Francisco. 2. Use the get_time tool to get the current time in the America/Los_Angeles timezone, which covers San Francisco, CA.</thinking>"
    },
    {
      "type": "tool_use",
      "id": "toolu_01A09q90qw90lq917835lq9",
      "name": "get_weather",
      "input": {"location": "San Francisco, CA"}
    }
  ]
}
```

----------------------------------------

TITLE: Illustrate Valid and Invalid OTEL_RESOURCE_ATTRIBUTES Formatting (Bash)
DESCRIPTION: These Bash examples highlight the strict formatting requirements for the `OTEL_RESOURCE_ATTRIBUTES` environment variable, which adheres to the W3C Baggage specification. It demonstrates that values cannot contain spaces and provides valid alternatives using underscores or camelCase.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/monitoring-usage

LANGUAGE: Bash
CODE:
```
# ❌ Invalid - contains spaces
export OTEL_RESOURCE_ATTRIBUTES="org.name=John's Organization"

# ✅ Valid - use underscores or camelCase instead
export OTEL_RESOURCE_ATTRIBUTES="org.name=Johns_Organization"
export OTEL_RESOURCE_ATTRIBUTES="org.name=JohnsOrganization"
```

----------------------------------------

TITLE: Example JSON Payloads for Claude Computer Use Actions
DESCRIPTION: Provides concrete JSON examples for invoking various actions supported by the Anthropic Claude computer use tool, demonstrating the required structure and parameters for screenshot, left_click, type, and scroll.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool

LANGUAGE: JSON
CODE:
```
{
  "action": "screenshot"
}
```

LANGUAGE: JSON
CODE:
```
{
  "action": "left_click",
  "coordinate": [500, 300]
}
```

LANGUAGE: JSON
CODE:
```
{
  "action": "type",
  "text": "Hello, world!"
}
```

LANGUAGE: JSON
CODE:
```
{
  "action": "scroll",
  "coordinate": [500, 400],
  "scroll_direction": "down",
  "scroll_amount": 3
}
```

----------------------------------------

TITLE: API Parameter: Tool Choice Type
DESCRIPTION: Specifies the type of tool choice strategy. Currently, only `auto` is an available option.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
tool_choice.type

enum<string>

required

Available options:

`auto`
```

----------------------------------------

TITLE: Text Input - Command Line
DESCRIPTION: Demonstrates how to provide text input directly as an argument or via standard input to the 'claude' command-line tool.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: bash
CODE:
```
# Direct argument
claude -p "Explain this code"

# From stdin
echo "Explain this code" | claude -p

```

----------------------------------------

TITLE: Example JSON Response for Listing Models
DESCRIPTION: A sample JSON payload demonstrating the structure and typical values returned by the Anthropic API when successfully listing models. It shows an array of model objects and pagination metadata.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list

LANGUAGE: JSON
CODE:
```
{
  "data": [
    {
      "created_at": "2025-02-19T00:00:00Z",
      "display_name": "Claude 3.7 Sonnet",
      "id": "claude-3-7-sonnet-20250219",
      "type": "model"
    }
  ],
  "first_id": "<string>",
  "has_more": true,
  "last_id": "<string>"
}
```

----------------------------------------

TITLE: Define a simple weather tool using JSON Schema for Claude API
DESCRIPTION: This JSON schema defines a `get_weather` tool for use with Anthropic's Claude API. It specifies the tool's name, a detailed description of its functionality, and an input schema requiring a `location` string and an optional `unit` string, which must be either 'celsius' or 'fahrenheit'.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: JSON
CODE:
```
{
  "name": "get_weather",
  "description": "Get the current weather in a given location",
  "input_schema": {
    "type": "object",
    "properties": {
      "location": {
        "type": "string",
        "description": "The city and state, e.g. San Francisco, CA"
      },
      "unit": {
        "type": "string",
        "enum": ["celsius", "fahrenheit"],
        "description": "The unit of temperature, either 'celsius' or 'fahrenheit'"
      }
    },
    "required": ["location"]
  }
}
```

----------------------------------------

TITLE: Define Sequential Tools for Claude API Call (Shell/JSON)
DESCRIPTION: This snippet provides an example of defining sequential tools for the Anthropic Claude API. It shows how `get_location` can be called first to obtain a user's location, and then that location can be used as input for the `get_weather` tool in a subsequent call, illustrating a multi-step tool execution flow.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --data \
'{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "tools": [
        {
            "name": "get_location",
            "description": "Get the current user location based on their IP address. This tool has no parameters or arguments.",
            "input_schema": {
                "type": "object",
                "properties": {}
            }
        },
        {
            "name": "get_weather",
            "description": "Get the current weather in a given location",
            "input_schema": {
                "type": "object",
                "properties": {
                    "location": {
                        "type": "string",
                        "description": "The city and state, e.g. San Francisco, CA"
                    },
                    "unit": {
                        "type": "string",
                        "enum": ["celsius", "fahrenheit"],
                        "description": "The unit of temperature, either 'celsius' or 'fahrenheit'"
                    }
                },
                "required": ["location"]
            }
        }
    ],
    "messages": [{
        "role": "user",
        "content": "What is the weather like where I am?"
    }]
}'
```

----------------------------------------

TITLE: PreToolUse Hook Input for Claude Code
DESCRIPTION: Example JSON input for the `PreToolUse` hook, demonstrating the structure for a 'Write' tool operation, including the `file_path` and `content` within `tool_input`.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "session_id": "abc123",
  "transcript_path": "/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
  "cwd": "/Users/...",
  "hook_event_name": "PreToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "/path/to/file.txt",
    "content": "file content"
  }
}
```

----------------------------------------

TITLE: Claude Code SDK - Output and Input Formats
DESCRIPTION: Details the different output and input formats supported by the Claude Code SDK. This includes default text output, JSON output, streaming JSON, and how to handle different input types.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: APIDOC
CODE:
```
Output Formats:
  - Text Output (Default): Standard text-based responses.
  - JSON Output: Structured responses in JSON format.
  - Streaming JSON Output: Real-time JSON data streams.
Input Formats:
  - Text Input (Default): Standard text-based prompts.
  - Streaming JSON Input: Real-time JSON data streams as input.
```

----------------------------------------

TITLE: API Parameters for Defining Client Tools
DESCRIPTION: This section details the top-level parameters used when defining client tools in the Anthropic API request. It describes `name`, `description`, and `input_schema`, including their types, constraints, and purpose.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: APIDOC
CODE:
```
API Request Parameter: tools
Description: Top-level parameter for specifying client tools.

Tool Definition Parameters:
- name:
    Type: string
    Description: The name of the tool. Must match the regex `^[a-zA-Z0-9_-]{1,64}$`.
- description:
    Type: string
    Description: A detailed plaintext description of what the tool does, when it should be used, and how it behaves.
- input_schema:
    Type: JSON Schema object
    Description: A JSON Schema object defining the expected parameters for the tool.
```

----------------------------------------

TITLE: Force Claude to Use a Specific Tool (Python)
DESCRIPTION: This Python snippet illustrates how to use the `tool_choice` parameter in an API request to explicitly force Claude to use a particular tool by its name. It sets the `type` to 'tool' and specifies the `name` of the desired tool.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: python
CODE:
```
tool_choice = {"type": "tool", "name": "get_weather"}
```

----------------------------------------

TITLE: Example API Request for URL-Based Image Input
DESCRIPTION: This JSON snippet illustrates how to structure an API request to Claude when providing an image via a URL. It specifies the 'image' type and uses a 'url' source, pointing to an external image file.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision

LANGUAGE: JSON
CODE:
```
{
  "type": "image",
  "source": {
    "type": "url",
    "url": "https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg"
  }
}
```

----------------------------------------

TITLE: Streaming JSON Input - Command Line
DESCRIPTION: Demonstrates how to send streaming JSON input to the 'claude' command-line tool for conversational turns, specifying input and output formats.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: bash
CODE:
```
$ echo '{"type":"user","message":{"role":"user","content":[{"type":"text","text":"Explain this code"}]}}' | claude -p --output-format=stream-json --input-format=stream-json --verbose

```

----------------------------------------

TITLE: Application returns file content to Claude
DESCRIPTION: This snippet demonstrates how the application responds to Claude's `view` command by providing the content of `primes.py` as a `tool_result` within the messages array, continuing the conversation flow.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "content-type: application/json" \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -d '{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "tools": [
      {
        "type": "text_editor_20250429",
        "name": "str_replace_based_edit_tool"
      }
    ],
    "messages": [
      {
        "role": "user",
        "content": "There'\''s a syntax error in my primes.py file. Can you help me fix it?"
      },
      {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I'\''ll help you fix the syntax error in your primes.py file. First, let me take a look at the file to identify the issue."
                },
                {
                    "type": "tool_use",
                    "id": "toolu_01AbCdEfGhIjKlMnOpQrStU",
                    "name": "str_replace_based_edit_tool",
                    "input": {
                        "command": "view",
                        "path": "primes.py"
                    }
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "tool_result",
                    "tool_use_id": "toolu_01AbCdEfGhIjKlMnOpQrStU",
                    "content": "1: def is_prime(n):\n2:     \"\"\"Check if a number is prime.\"\"\"\n3:     if n <= 1:\n4:         return False\n5:     if n <= 3:\n6:         return True\n7:     if n % 2 == 0 or n % 3 == 0:\n8:         return False\n9:     i = 5\n10:     while i * i <= n:\n11:         if n % i == 0 or n % (i + 2) == 0:\n12:             return False\n13:         i += 6\n14:     return True\n15: \n16: def get_primes(limit):\n17:     \"\"\"Generate a list of prime numbers up to the given limit.\"\"\"\n18:     primes = []\n19:     for num in range(2, limit + 1)\n20:         if is_prime(num):\n21:             primes.append(num)\n22:     return primes\n23: \n24: def main():\n25:     \"\"\"Main function to demonstrate prime number generation.\"\"\"\n26:     limit = 100\n27:     prime_list = get_primes(limit)\n28:     print(f\"Prime numbers up to {limit}:\")\n29:     print(prime_list)\n30:     print(f\"Found {len(prime_list)} prime numbers.\")\n31: \n32: if __name__ == \"__main__\":\n33:     main()"
                }
            ]
        }
    ]
  }'
```

LANGUAGE: Python
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "content-type: application/json" \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -d '{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "tools": [
      {
        "type": "text_editor_20250429",
        "name": "str_replace_based_edit_tool"
      }
    ],
    "messages": [
      {
        "role": "user",
        "content": "There'\''s a syntax error in my primes.py file. Can you help me fix it?"
      },
      {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I'\''ll help you fix the syntax error in your primes.py file. First, let me take a look at the file to identify the issue."
                },
                {
                    "type": "tool_use",
                    "id": "toolu_01AbCdEfGhIjKlMnOpQrStU",
                    "name": "str_replace_based_edit_tool",
                    "input": {
                        "command": "view",
                        "path": "primes.py"
                    }
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "tool_result",
                    "tool_use_id": "toolu_01AbCdEfGhIjKlMnOpQrStU",
                    "content": "1: def is_prime(n):\n2:     \"\"\"Check if a number is prime.\"\"\"\n3:     if n <= 1:\n4:         return False\n5:     if n <= 3:\n6:         return True\n7:     if n % 2 == 0 or n % 3 == 0:\n8:         return False\n9:     i = 5\n10:     while i * i <= n:\n11:         if n % i == 0 or n % (i + 2) == 0:\n12:             return False\n13:         i += 6\n14:     return True\n15: \n16: def get_primes(limit):\n17:     \"\"\"Generate a list of prime numbers up to the given limit.\"\"\"\n18:     primes = []\n19:     for num in range(2, limit + 1)\n20:         if is_prime(num):\n21:             primes.append(num)\n22:     return primes\n23: \n24: def main():\n25:     \"\"\"Main function to demonstrate prime number generation.\"\"\"\n26:     limit = 100\n27:     prime_list = get_primes(limit)\n28:     print(f\"Prime numbers up to {limit}:\")\n29:     print(prime_list)\n30:     print(f\"Found {len(prime_list)} prime numbers.\")\n31: \n32: if __name__ == \"__main__\":\n33:     main()"
                }
            ]
        }
    ]
  }'
```

LANGUAGE: TypeScript
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "content-type: application/json" \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -d '{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "tools": [
      {
        "type": "text_editor_20250429",
        "name": "str_replace_based_edit_tool"
      }
    ],
    "messages": [
      {
        "role": "user",
        "content": "There'\''s a syntax error in my primes.py file. Can you help me fix it?"
      },
      {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I'\''ll help you fix the syntax error in your primes.py file. First, let me take a look at the file to identify the issue."
                },
                {
                    "type": "tool_use",
                    "id": "toolu_01AbCdEfGhIjKlMnOpQrStU",
                    "name": "str_replace_based_edit_tool",
                    "input": {
                        "command": "view",
                        "path": "primes.py"
                    }
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "tool_result",
                    "tool_use_id": "toolu_01AbCdEfGhIjKlMnOpQrStU",
                    "content": "1: def is_prime(n):\n2:     \"\"\"Check if a number is prime.\"\"\"\n3:     if n <=
```

----------------------------------------

TITLE: Anthropic API Content Types
DESCRIPTION: Specifies that the Anthropic API exclusively uses JSON for request and response bodies, requiring the `content-type: application/json` header for direct integrations.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/getting-started

LANGUAGE: APIDOC
CODE:
```
Request Header: content-type
Value: application/json
Description: Specifies that request and response bodies are JSON.
```

----------------------------------------

TITLE: Configure Claude Code Hooks with Tool Matchers
DESCRIPTION: This snippet illustrates the basic JSON structure for configuring Claude Code hooks, organizing them by event name. It shows how to define a 'matcher' to specify tool patterns (e.g., 'ToolPattern') and an array of 'hooks' containing commands to execute. The 'command' field specifies the bash command to run, and an optional 'timeout' can be set.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "hooks": {
    "EventName": [
      {
        "matcher": "ToolPattern",
        "hooks": [
          {
            "type": "command",
            "command": "your-command-here"
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Claude Tool Use for Structured JSON Output (Shell)
DESCRIPTION: Demonstrates how to configure Claude to produce structured JSON output using a single tool (`record_summary`) and the `tool_choice` parameter. This example shows a `curl` command to interact with the Anthropic API, passing an image and the tool definition.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: Shell
CODE:
```
#!/bin/bash
IMAGE_URL="https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg"
IMAGE_MEDIA_TYPE="image/jpeg"
IMAGE_BASE64=$(curl "$IMAGE_URL" | base64)

curl https://api.anthropic.com/v1/messages \
     --header "content-type: application/json" \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --data \
'{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "tools": [{
        "name": "record_summary",
        "description": "Record summary of an image using well-structured JSON.",
        "input_schema": {
            "type": "object",
            "properties": {
                "key_colors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "r": { "type": "number", "description": "red value [0.0, 1.0]" },
                            "g": { "type": "number", "description": "green value [0.0, 1.0]" },
```

----------------------------------------

TITLE: Initiate Tool Use with Claude (Multiple Tools)
DESCRIPTION: Demonstrates how to define multiple tools (get_weather and get_time) in a single request to Claude, allowing the model to select and use the appropriate tool(s) based on the user's query.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
```

LANGUAGE: Python
CODE:
```

```

LANGUAGE: Java
CODE:
```

```

----------------------------------------

TITLE: API Reference: tools.description
DESCRIPTION: Provides a detailed description of what the tool does, which helps the model understand and use the tool effectively.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
tools.description:
  Type: string
  Description: Description of what this tool does. Tool descriptions should be as detailed as possible. The more information that the model has about what the tool is and how to use it, the better it will perform. You can use natural language descriptions to reinforce important aspects of the tool input JSON schema.
  Examples: "Get the current weather in a given location"
```

----------------------------------------

TITLE: Bash Helper Function Approach
DESCRIPTION: Demonstrates using helper functions in Bash to encapsulate JSON parsing logic for cleaner and more maintainable status line scripts.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/statusline

LANGUAGE: bash
CODE:
```
#!/bin/bash
# Read JSON input once
input=$(cat)

# Helper functions for common extractions
get_model_name() { echo "$input" | jq -r '.model.display_name'; }
get_current_dir() { echo "$input" | jq -r '.workspace.current_dir'; }
get_project_dir() { echo "$input" | jq -r '.workspace.project_dir'; }
get_version() { echo "$input" | jq -r '.version'; }

# Use the helpers
MODEL=$(get_model_name)
DIR=$(get_current_dir)
echo "[$MODEL] 📁 ${DIR##*/}"
```

----------------------------------------

TITLE: Provide tools to Claude using Messages API (Shell)
DESCRIPTION: Demonstrates how to define and provide a custom tool (get_weather) to Claude using the Anthropic Messages API via a curl command. The example shows the tool's schema and a user prompt.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "content-type: application/json" \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -d '{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "tools": [
      {
        "name": "get_weather",
        "description": "Get the current weather in a given location",
        "input_schema": {
          "type": "object",
          "properties": {
            "location": {
              "type": "string",
              "description": "The city and state, e.g. San Francisco, CA"
            }
          },
          "required": ["location"]
        }
      }
    ],
    "messages": [
      {
        "role": "user",
        "content": "What is the weather like in San Francisco?"
      }
    ]
  }'
```

----------------------------------------

TITLE: Define a good tool description for Claude
DESCRIPTION: This example demonstrates a well-structured and detailed tool definition for Claude. It includes a comprehensive description of the tool's purpose, usage conditions, parameter meanings, and limitations, which is crucial for Claude's effective tool selection and execution.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: JSON
CODE:
```
{
  "name": "get_stock_price",
  "description": "Retrieves the current stock price for a given ticker symbol. The ticker symbol must be a valid symbol for a publicly traded company on a major US stock exchange like NYSE or NASDAQ. The tool will return the latest trade price in USD. It should be used when the user asks about the current or most recent price of a specific stock. It will not provide any other information about the stock or company.",
  "input_schema": {
    "type": "object",
    "properties": {
      "ticker": {
        "type": "string",
        "description": "The stock ticker symbol, e.g. AAPL for Apple Inc."
      }
    },
    "required": ["ticker"]
  }
}
```

----------------------------------------

TITLE: Tool Input for String Replacement Edit
DESCRIPTION: Defines the input structure for the `str_replace_based_edit_tool`, specifying the command, file path, and the old and new strings for replacement. This JSON object represents the parameters passed to the tool for a text replacement operation.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: JSON
CODE:
```
{
  "name": "str_replace_based_edit_tool",
  "input": {
    "command": "str_replace",
    "path": "primes.py",
    "old_str": "    for num in range(2, limit + 1)",
    "new_str": "    for num in range(2, limit + 1):"
  }
}
```

----------------------------------------

TITLE: Claude Code Slash Command Syntax and Types
DESCRIPTION: Explains the fundamental syntax for Claude Code slash commands, differentiating between built-in, custom, project, and personal commands. It also covers command types and their usage within the Claude Code environment.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/slash-commands

LANGUAGE: APIDOC
CODE:
```
Slash Command Syntax:
  /command_name [arguments]

Command Types:
  - Built-in: Predefined commands provided by Claude Code.
  - Custom: User-defined commands.
  - Project: Commands specific to the current project.
  - Personal: Commands available for personal use.

Features:
  - Namespacing: Organizing commands within specific scopes.
  - Arguments: Passing data to commands.
  - Bash Command Execution: Running shell commands.
  - File References: Referencing files within commands.
  - Thinking Mode: Enabling a specific mode for command execution.
  - Frontmatter: Using frontmatter for command configuration.
  - Dynamic Discovery: Automatic detection of commands.
  - Naming Conventions: Guidelines for naming commands.
```

----------------------------------------

TITLE: Anthropic API Reference
DESCRIPTION: Provides details on Anthropic's API, including methods, parameters, and return values for interacting with their models.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/data-usage

LANGUAGE: APIDOC
CODE:
```
OpenAIModel:
  __init__(model_name: str, provider: str = 'openai')
    model_name: The name of the OpenAI model to use
    provider: The provider to use (defaults to 'openai')

Messages API:
  create(model: str, messages: list, max_tokens: int, system: str = None, ...)
    model: The model to use for generation (e.g., 'claude-3-opus-20240229')
    messages: A list of message objects, each with 'role' and 'content'
    max_tokens: The maximum number of tokens to generate
    system: An optional system prompt to guide the model's behavior
    Returns: A message object containing the model's response

Tools:
  Tools are used to enable models to interact with external systems.
  Define tools with a 'name', 'description', and 'input_schema'.
  Example:
    tools = [
        {
            "name": "get_weather",
            "description": "Get the current weather in a location",
            "input_schema": {
                "type": "object",
                "properties": {
                    "location": {
                        "type": "string",
                        "description": "The city and state, e.g. San Francisco, CA"
                    }
                },
                "required": ["location"]
            }
        }
    ]

Tool Use:
  The model can decide to call a tool by returning a tool_use object.
  Example:
    {
        "role": "assistant",
        "content": [
            {
                "type": "tool_use",
                "id": "toolu_abc123",
                "name": "get_weather",
                "input": {"location": "Boston, MA"}
            }
        ]
    }

Tool Result:
  Respond to the tool_use by sending a tool_result object.
  Example:
    {
        "role": "user",
        "content": [
            {
                "type": "tool_result",
                "tool_use_id": "toolu_abc123",
                "content": "10 degrees Celsius"
            }
        ]
    }
```

----------------------------------------

TITLE: PostToolUse Hook Input for Claude Code
DESCRIPTION: Example JSON input for the `PostToolUse` hook, showing the structure after a tool operation, including `tool_input` and `tool_response` with `filePath` and `success` status for a 'Write' tool.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "session_id": "abc123",
  "transcript_path": "/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
  "cwd": "/Users/...",
  "hook_event_name": "PostToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "/path/to/file.txt",
    "content": "file content"
  },
  "tool_response": {
    "filePath": "/path/to/file.txt",
    "success": true
  }
}
```

----------------------------------------

TITLE: Define `get_stock_price` Tool with Detailed Description (Best Practice)
DESCRIPTION: This example demonstrates best practices for defining a tool, specifically highlighting the importance of a highly detailed `description`. It shows how to specify the tool's name, a comprehensive description of its functionality, usage conditions, and limitations, along with its `input_schema`.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: json
CODE:
```
{
  "name": "get_stock_price",
  "description": "Retrieves the current stock price for a given ticker symbol. The ticker symbol must be a valid symbol for a publicly traded company on a major US stock exchange like NYSE or NASDAQ. The tool will return the latest trade price in USD. It should be used when the user asks about the current or most recent price of a specific stock. It will not provide any other information about the stock or company.",
  "input_schema": {
    "type": "object",
    "properties": {
      "ticker": {
        "type": "string",
        "description": "The stock ticker symbol, e.g. AAPL for Apple Inc."
      }
    },
    "required": ["ticker"]
  }
}
```

----------------------------------------

TITLE: IPython/Jupyter Integration with Claude Code SDK (Python)
DESCRIPTION: Demonstrates how to use the Claude Code SDK directly within IPython or Jupyter environments. It shows how to connect to the client, execute queries, process streaming messages, and disconnect, all using `await` directly in cells.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: python
CODE:
```
# In Jupyter, use await directly in cells
client = ClaudeSDKClient()
await client.connect()
await client.query("Analyze data.csv")
async for msg in client.receive_response():
    print(msg)
await client.disconnect()

```

----------------------------------------

TITLE: Anthropic Claude Tool Definitions (APIDOC)
DESCRIPTION: This section documents the structure for defining tools that can be used with Anthropic's Claude API. It includes examples of `get_weather`, `get_time`, and `get_location` tools, detailing their names, descriptions, and input schemas with parameter types, descriptions, and required fields.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: APIDOC
CODE:
```
Tool: get_weather
  Description: Get the current weather in a given location
  Input Schema:
    type: object
    properties:
      location:
        type: string
        description: The city and state, e.g. San Francisco, CA
      unit:
        type: string
        enum: ["celsius", "fahrenheit"]
        description: The unit of temperature, either 'celsius' or 'fahrenheit'
    required: ["location"]

Tool: get_time
  Description: Get the current time in a given time zone
  Input Schema:
    type: object
    properties:
      timezone:
        type: string
        description: The IANA time zone name, e.g. America/Los_Angeles
    required: ["timezone"]

Tool: get_location
  Description: Get the current user location based on their IP address. This tool has no parameters or arguments.
  Input Schema:
    type: object
    properties: {}
```

----------------------------------------

TITLE: Define Multiple Tools for Claude API Call (Shell/JSON)
DESCRIPTION: This snippet shows an example of defining two independent tools, `get_weather` and `get_time`, within a single Anthropic Claude API request. It illustrates how Claude can use these tools, potentially in parallel or sequentially, to answer a user's query that requires information from both.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --data \
'{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "tools": [{
        "name": "get_weather",
        "description": "Get the current weather in a given location",
        "input_schema": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "The city and state, e.g. San Francisco, CA"
                },
                "unit": {
                    "type": "string",
                    "enum": ["celsius", "fahrenheit"],
                    "description": "The unit of temperature, either 'celsius' or 'fahrenheit'"
                }
            },
            "required": ["location"]
        }
    },
    {
        "name": "get_time",
        "description": "Get the current time in a given time zone",
        "input_schema": {
            "type": "object",
            "properties": {
                "timezone": {
                    "type": "string",
                    "description": "The IANA time zone name, e.g. America/Los_Angeles"
                }
            },
            "required": ["timezone"]
        }
    }],
    "messages": [{
        "role": "user",
        "content": "What is the weather like right now in New York? Also what time is it there?"
    }]
}'
```

----------------------------------------

TITLE: Text Editor Tool API Specification
DESCRIPTION: Details the schema-less nature of the text editor tool, specifying different tool types based on Claude model versions and outlining the various commands supported by the tool for file operations.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: APIDOC
CODE:
```
Text Editor Tool:
  Type (Claude 4): "text_editor_20250429"
  Type (Claude Sonnet 3.7): "text_editor_20250124"
  Type (Claude Sonnet 3.5): "text_editor_20241022"
  Commands:
    view: Read and return file contents
    str_replace: Replace text in file
    create: Create new file
    insert: Insert text at location
    undo_edit: Restore from backup (not supported in Claude 4)
```

----------------------------------------

TITLE: Example of Claude's Chain of Thought JSON Response
DESCRIPTION: This JSON snippet demonstrates how Claude Opus 3 model expresses its internal reasoning process (chain of thought) when `tool_choice` is set to `auto`. It shows a `text` content block containing the thinking process and a `tool_use` content block for calling the `get_weather` tool, illustrating a multi-step plan to answer a user query.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: JSON
CODE:
```
{
  "role": "assistant",
  "content": [
    {
      "type": "text",
      "text": "<thinking>To answer this question, I will: 1. Use the get_weather tool to get the current weather in San Francisco. 2. Use the get_time tool to get the current time in the America/Los_Angeles timezone, which covers San Francisco, CA.</thinking>"
    },
    {
      "type": "tool_use",
      "id": "toolu_01A09q90qw90lq917835lq9",
      "name": "get_weather",
      "input": {"location": "San Francisco, CA"}
    }
  ]
}
```

----------------------------------------

TITLE: Claude Initiates File View to Diagnose Syntax Error
DESCRIPTION: This JSON snippet shows Claude's initial interaction, where it uses the `str_replace_based_edit_tool` with the `view` command to inspect the `primes.py` file. This step is crucial for Claude to understand the file's content and identify potential issues.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: APIDOC
CODE:
```
{
  "type": "tool_use",
  "id": "toolu_01AbCdEfGhIjKlMnOpQrStU",
  "name": "str_replace_based_edit_tool",
  "input": {
    "command": "view",
    "path": "primes.py"
  }
}
```

----------------------------------------

TITLE: Example Output from Claude API Call (Python)
DESCRIPTION: An example of the structured output received from the Anthropic Claude API after a successful text generation request, showing the text content of the response.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/get-started

LANGUAGE: Python
CODE:
```
[TextBlock(text="The ocean's salty brine,\nA tale of time and design.\nRocks and rivers, their minerals shed,\nAccumulating in the ocean's bed.\nEvaporation leaves salt behind,\nIn the vast waters, forever enshrined.", type='text')]
```

----------------------------------------

TITLE: Markdown Formatting Hook
DESCRIPTION: This JSON configuration defines a 'PostToolUse' hook to execute a Python script for formatting markdown files, fixing language tags and spacing.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks-guide

LANGUAGE: json
CODE:
```
{
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/markdown_formatter.py"
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Define and Use Claude Code Slash Command with Arguments
DESCRIPTION: Shows how to create a custom slash command that accepts dynamic arguments using the `$ARGUMENTS` placeholder, and provides an example of how to invoke it with specific values.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/slash-commands

LANGUAGE: Shell
CODE:
```
echo 'Fix issue #$ARGUMENTS following our coding standards' > .claude/commands/fix-issue.md
```

LANGUAGE: Shell
CODE:
```
> /fix-issue 123
```

----------------------------------------

TITLE: Anthropic API Error Response JSON Structure
DESCRIPTION: This snippet illustrates the standardized JSON format for error responses from the Anthropic API. All errors are encapsulated within a top-level `error` object, which consistently includes `type` and `message` fields to provide details about the specific error encountered. This predictable structure aids in parsing and handling API errors programmatically.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/errors

LANGUAGE: JSON
CODE:
```
{
  "type": "error",
  "error": {
    "type": "not_found_error",
    "message": "The requested resource could not be found."
  }
}
```

----------------------------------------

TITLE: Make Streaming API Request to Claude with Tool Use
DESCRIPTION: This `curl` command demonstrates how to send a streaming API request to the Anthropic Claude model. It defines a `get_weather` tool with a `location` parameter and instructs Claude to use this tool to find the weather in San Francisco, showcasing the beta feature of fine-grained streaming for tool parameter values.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming

LANGUAGE: Shell
CODE:
```
  curl https://api.anthropic.com/v1/messages \
    -H "content-type: application/json" \
    -H "x-api-key: $ANTHROPIC_API_KEY" \
    -H "anthropic-version: 2023-06-01" \
    -d '{
      "model": "claude-opus-4-20250514",
      "max_tokens": 1024,
      "tools": [
        {
          "name": "get_weather",
          "description": "Get the current weather in a given location",
          "input_schema": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string",
                "description": "The city and state, e.g. San Francisco, CA"
              }
            },
            "required": ["location"]
          }
        }
      ],
      "tool_choice": {"type": "any"},
      "messages": [
        {
          "role": "user",
          "content": "What is the weather like in San Francisco?"
        }
      ],
      "stream": true
    }'
```

----------------------------------------

TITLE: Send Structured Messages and Image Inputs with Claude Code SDK
DESCRIPTION: This snippet demonstrates how to send various types of messages to Claude using the `claude_code_sdk`. It covers sending simple text queries, referencing image files (which Claude's Read tool processes), and sending a sequence of multiple text messages to guide a multi-step interaction. It highlights the SDK's ability to handle image inputs automatically.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-python

LANGUAGE: python
CODE:
```
from claude_code_sdk import ClaudeSDKClient, ClaudeCodeOptions

async with ClaudeSDKClient() as client:
    # Text message
    await client.query("Analyze this code for security issues")

    # Message with image reference (image will be read by Claude's Read tool)
    await client.query("Explain what's shown in screenshot.png")

    # Multiple messages in sequence
    messages = [
        "First, analyze the architecture diagram in diagram.png",
        "Now suggest improvements based on the diagram",
        "Finally, generate implementation code"
    ]

    for msg in messages:
        await client.query(msg)
        async for response in client.receive_response():
            # Process each response
            pass

# The SDK handles image files through Claude's built-in Read tool
# Supported formats: PNG, JPG, PDF, and other common formats
```

----------------------------------------

TITLE: Configuring Hooks for MCP Tools
DESCRIPTION: Demonstrates how to configure hooks for MCP tools using a JSON structure. It shows how to target specific tools or entire servers using regular expressions in the 'matcher' field and specifies the 'type' and 'command' for the hook.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: json
CODE:
```
{
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "mcp__memory__.*",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'Memory operation initiated' >> ~/mcp-operations.log"
          }
        ]
      },
      {
        "matcher": "mcp__.*__write.*",
        "hooks": [
          {
            "type": "command",
            "command": "/home/user/scripts/validate-mcp-write.py"
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Claude Proposes Syntax Error Fix using str_replace Tool
DESCRIPTION: This JSON snippet demonstrates Claude's response after identifying the syntax error. It uses the `str_replace_based_edit_tool` with the `str_replace` command to specify the exact string to be replaced (`old_str`) and its corrected version (`new_str`) in the `primes.py` file.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: APIDOC
CODE:
```
{
  "id": "msg_01VwXyZAbCdEfGhIjKlMnO",
  "model": "claude-opus-4-20250514",
  "stop_reason": "tool_use",
  "role": "assistant",
  "content": [
    {
      "type": "text",
      "text": "I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you."
    },
    {
      "type": "tool_use",
      "id": "toolu_01PqRsTuVwXyZAbCdEfGh",
      "name": "str_replace_based_edit_tool",
      "input": {
        "command": "str_replace",
        "path": "primes.py",
        "old_str": "    for num in range(2, limit + 1)",
        "new_str": "    for num in range(2, limit + 1):"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Anthropic Messages API Streaming Error Example
DESCRIPTION: Provides an example of an `error` event that might be sent in the event stream, such as an `overloaded_error`.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming

LANGUAGE: APIDOC
CODE:
```
event: error
data: {"type": "error", "error": {"type": "overloaded_error", "message": "Overloaded"}}
```

----------------------------------------

TITLE: API Parameter: Tool Choice Strategy
DESCRIPTION: Defines how the model should use provided tools. Options include using a specific tool, any tool, deciding itself, or not using tools at all.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
tool_choice

object

How the model should use the provided tools. The model can use a specific tool, any available tool, decide by itself, or not use tools at all.

* Auto
* Any
* Tool
* None

Show child attributes
```

----------------------------------------

TITLE: PreCompact Hook Input for Claude Code
DESCRIPTION: Example JSON input for the `PreCompact` hook, detailing the `trigger` type (e.g., 'manual') and any `custom_instructions` provided.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "session_id": "abc123",
  "transcript_path": "~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
  "hook_event_name": "PreCompact",
  "trigger": "manual",
  "custom_instructions": ""
}
```

----------------------------------------

TITLE: Node.js Status Line Example
DESCRIPTION: A Node.js script that reads JSON from stdin, extracts session information, and displays the model name, current directory, and Git branch.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/statusline

LANGUAGE: javascript
CODE:
```
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Read JSON from stdin
let input = '';
process.stdin.on('data', chunk => input += chunk);
process.stdin.on('end', () => {
    const data = JSON.parse(input);

    // Extract values
    const model = data.model.display_name;
    const currentDir = path.basename(data.workspace.current_dir);

    // Check for git branch
    let gitBranch = '';
    try {
        const headContent = fs.readFileSync('.git/HEAD', 'utf8').trim();
        if (headContent.startsWith('ref: refs/heads/')) {
            gitBranch = ` | 🌿 ${headContent.replace('ref: refs/heads/', '')}`;
        }
    } catch (e) {
        // Not a git repo or can't read HEAD
    }

    console.log(`[${model}] 📁 ${currentDir}${gitBranch}`);
});

```

----------------------------------------

TITLE: Claude Code Unix Philosophy Example
DESCRIPTION: Demonstrates the composability and scriptability of Claude Code by piping log output to Claude for anomaly detection and alerting.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/overview

LANGUAGE: bash
CODE:
```
tail -f app.log | claude -p "Slack me if you see any anomalies appear in this log stream"
```

----------------------------------------

TITLE: Claude Code Unix Philosophy Example
DESCRIPTION: Demonstrates the composability and scriptability of Claude Code by piping log output to Claude for anomaly detection and alerting.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/index

LANGUAGE: bash
CODE:
```
tail -f app.log | claude -p "Slack me if you see any anomalies appear in this log stream"
```

----------------------------------------

TITLE: Claude Tool Use Output with Inferred Parameters (JSON)
DESCRIPTION: This JSON snippet demonstrates a `tool_use` block returned by Claude when it attempts to infer missing required parameters for a tool call. In this example, Claude infers 'New York, NY' and 'fahrenheit' for the `get_weather` tool, even if the user prompt didn't explicitly provide them.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: JSON
CODE:
```
{
  "type": "tool_use",
  "id": "toolu_01A09q90qw90lq917835lq9",
  "name": "get_weather",
  "input": {"location": "New York, NY", "unit": "fahrenheit"}
}
```

----------------------------------------

TITLE: Example Python Code with Syntax Error (primes.py)
DESCRIPTION: This Python code snippet represents the content of the `primes.py` file, which contains functions for checking prime numbers and generating a list of primes. It includes a deliberate syntax error in the `get_primes` function's for loop, which Claude is designed to fix.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: Python
CODE:
```
def is_prime(n):
    """Check if a number is prime."""
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def get_primes(limit):
    """Generate a list of prime numbers up to the given limit."""
    primes = []
    for num in range(2, limit + 1)
        if is_prime(num):
            primes.append(num)
    return primes

def main():
    """Main function to demonstrate prime number generation."""
    limit = 100
    prime_list = get_primes(limit)
    print(f"Prime numbers up to {limit}:")
    print(prime_list)
    print(f"Found {len(prime_list)} prime numbers.")

if __name__ == "__main__":
    main()
```

----------------------------------------

TITLE: API parameters for specifying client tools in Claude requests
DESCRIPTION: This API documentation outlines the structure for defining client tools within the `tools` top-level parameter of the Anthropic API request. Each tool definition requires a `name`, a `description` of its purpose, and an `input_schema` conforming to JSON Schema to define expected parameters.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: APIDOC
CODE:
```
tools (top-level parameter):
  Each tool definition includes:
    name: string (required)
      Description: The name of the tool. Must match the regex `^[a-zA-Z0-9_-]{1,64}$`.
    description: string (required)
      Description: A detailed plaintext description of what the tool does, when it should be used, and how it behaves.
    input_schema: object (required)
      Description: A JSON Schema object defining the expected parameters for the tool.
```

----------------------------------------

TITLE: Response Format Schema
DESCRIPTION: This JSON object defines the structure of a successful result message returned by the Claude API, including fields like type, subtype, cost, duration, and the actual result content.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: APIDOC
CODE:
```
{
  "type": "result",
  "subtype": "success",
  "total_cost_usd": 0.003,
  "is_error": false,
  "duration_ms": 1234,
  "duration_api_ms": 800,
  "num_turns": 6,
  "result": "The response text here...",
  "session_id": "abc123"
}
```

----------------------------------------

TITLE: Creating a Reusable Streaming Print Helper Function for Claude SDK
DESCRIPTION: Illustrates how to define an asynchronous helper function, `stream_print`, to handle streaming responses from the `ClaudeSDKClient`. This function queries the client with a given prompt and then iterates through the received messages to print text content incrementally, ensuring real-time output.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-python

LANGUAGE: Python
CODE:
```
async def stream_print(client, prompt):
    await client.query(prompt)
    async for msg in client.receive_response():
        if hasattr(msg, 'content'):
            for block in msg.content:
                if hasattr(block, 'text'):
                    print(block.text, end='', flush=True)
```

----------------------------------------

TITLE: API Reference: tools.name
DESCRIPTION: Defines the `name` property for a tool, which is used by the model to call the tool and appears in `tool_use` blocks. It is a required string with a length constraint.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
tools.name:
  Type: string
  Required: true
  Description: Name of the tool. This is how the tool will be called by the model and in `tool_use` blocks.
  Required string length: 1 - 64
```

----------------------------------------

TITLE: Initialize Anthropic Python client and send a message
DESCRIPTION: Demonstrates how to initialize the Anthropic Python client using an API key and send a basic 'Hello, Claude' message to the API. It uses the `messages.create` method with a specified model and `max_tokens`.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/client-sdks

LANGUAGE: Python
CODE:
```
import anthropic

client = anthropic.Anthropic(
    # defaults to os.environ.get("ANTHROPIC_API_KEY")
    api_key="my_api_key",
)
message = client.messages.create(
    model="claude-sonnet-4-20250514",
    max_tokens=1024,
    messages=[
        {"role": "user", "content": "Hello, Claude"}
    ]
)
print(message.content)
```

----------------------------------------

TITLE: SessionEnd Hook Input for Claude Code
DESCRIPTION: Example JSON input for the `SessionEnd` hook, providing the `reason` for the session termination (e.g., 'exit').

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "session_id": "abc123",
  "transcript_path": "~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
  "cwd": "/Users/...",
  "hook_event_name": "SessionEnd",
  "reason": "exit"
}
```

----------------------------------------

TITLE: Notification Hook Input for Claude Code
DESCRIPTION: Example JSON input for the `Notification` hook, which provides a `message` to indicate events like task completion.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "session_id": "abc123",
  "transcript_path": "/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
  "cwd": "/Users/...",
  "hook_event_name": "Notification",
  "message": "Task completed successfully"
}
```

----------------------------------------

TITLE: Python SDK Basic Usage with Streaming
DESCRIPTION: Demonstrates how to use the `ClaudeSDKClient` for streaming responses in Python. It shows initializing the client with options, sending a query, and iterating through received messages to print text content.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: Python
CODE:
```
import asyncio
from claude_code_sdk import ClaudeSDKClient, ClaudeCodeOptions

async def main():
    async with ClaudeSDKClient(
        options=ClaudeCodeOptions(
            system_prompt="You are a performance engineer",
            allowed_tools=["Bash", "Read", "WebSearch"],
            max_turns=5
        )
    ) as client:
        await client.query("Analyze system performance")

        # Stream responses
        async for message in client.receive_response():
            if hasattr(message, 'content'):
                for block in message.content:
                    if hasattr(block, 'text'):
                        print(block.text, end='', flush=True)

# Run as script
asyncio.run(main())

# Or in IPython/Jupyter: await main()
```

----------------------------------------

TITLE: Anthropic List Models API Response Schema (200 OK)
DESCRIPTION: Defines the JSON structure of the successful response (HTTP 200 OK) when listing Anthropic models, including a data array with model details and pagination cursors.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list

LANGUAGE: JSON
CODE:
```
{
  "data": [
    {
      "created_at": "2025-02-19T00:00:00Z",
      "display_name": "Claude 3.7 Sonnet",
      "id": "claude-3-7-sonnet-20250219",
      "type": "model"
    }
  ],
  "first_id": "<string>",
  "has_more": true,
  "last_id": "<string>"
}
```

----------------------------------------

TITLE: Send Tool Result Back to Claude (JSON)
DESCRIPTION: This JSON snippet shows how to send the result of a tool execution back to Claude. It uses a `tool_result` content block, referencing the `tool_use_id` from Claude's previous request and providing the `content` (output) of the tool.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: json
CODE:
```
{
  "role": "user",
  "content": [
    {
      "type": "tool_result",
      "tool_use_id": "toolu_01A09q90qw90lq917835lq9",
      "content": "15 degrees"
    }
  ]
}
```

----------------------------------------

TITLE: Anthropic API HTTP Error Codes Reference
DESCRIPTION: This section details the standard HTTP status codes returned by the Anthropic API, their corresponding internal error types, and descriptive messages. It covers common client-side errors (4xx) and server-side errors (5xx), including specific notes on rate limits and temporary overloads. Understanding these codes is crucial for robust error handling in API integrations.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/errors

LANGUAGE: APIDOC
CODE:
```
400 - invalid_request_error: There was an issue with the format or content of your request. We may also use this error type for other 4XX status codes not listed below.
401 - authentication_error: There’s an issue with your API key.
403 - permission_error: Your API key does not have permission to use the specified resource.
404 - not_found_error: The requested resource was not found.
413 - request_too_large: Request exceeds the maximum allowed number of bytes.
429 - rate_limit_error: Your account has hit a rate limit.
500 - api_error: An unexpected error has occurred internal to Anthropic’s systems.
529 - overloaded_error: Anthropic’s API is temporarily overloaded.
  529 errors can occur when Anthropic APIs experience high traffic across all users. In rare cases, if your organization has a sharp increase in usage, you might see this type of error.
  To avoid 529 errors, ramp up your traffic gradually and maintain consistent usage patterns.
```

----------------------------------------

TITLE: Claude Code SDK - Python Best Practices
DESCRIPTION: Highlights Python-specific best practices for using the Claude Code SDK. This section covers key patterns and tips for effective development, including IPython/Jupyter integration.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: APIDOC
CODE:
```
Python-Specific Best Practices:
  - Key Patterns: Recommended approaches for structuring Claude interactions in Python.
  - IPython/Jupyter Tips: Optimizations for using the SDK within Jupyter notebooks.
  - General Best Practices: Advice for efficient and effective use of the SDK.
```

----------------------------------------

TITLE: Integrate Stytch for Authentication with Claude Code
DESCRIPTION: Configure and manage Stytch authentication services, including redirect URLs, email templates, and workspace settings, by adding its MCP server via HTTP transport.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: Shell
CODE:
```
claude mcp add --transport http stytch http://mcp.stytch.dev/mcp
```

----------------------------------------

TITLE: Calling Anthropic API to Fix Syntax Error with Text Editor Tool (Python)
DESCRIPTION: This Python snippet demonstrates how to initialize the Anthropic client and make a `messages.create` call, providing the `text_editor_20250124` tool to Claude Sonnet 3.7 for fixing a syntax error in a file.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: python
CODE:
```
import anthropic

client = anthropic.Anthropic()

response = client.messages.create(
    model="claude-3-7-sonnet-20250219",
    max_tokens=1024,
    tools=[
        {
            "type": "text_editor_20250124",
            "name": "str_replace_editor"
        }
    ],
    messages=[
        {
            "role": "user",
            "content": "There's a syntax error in my primes.py file. Can you help me fix it?"
        }
    ]
)

print(response)
```

----------------------------------------

TITLE: Python SDK Example: Basic Message
DESCRIPTION: A simple example demonstrating how to send a basic message using the Claude Python SDK. This illustrates the fundamental structure of making a call to the Claude API.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: Python
CODE:
```
from anthropic import Anthropic

client = Anthropic(
    api_key="YOUR_ANTHROPIC_API_KEY",
)

message = client.messages.create(
    model="claude-3-opus-20240229",
    max_tokens=1000,
    messages=[
        {"role": "user", "content": "Hello, Claude"}
    ]
)

print(message.content)
```

----------------------------------------

TITLE: cURL Example to List Anthropic Models
DESCRIPTION: Demonstrates how to make a cURL request to the Anthropic API to list available models, including required headers for authentication and API version.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list

LANGUAGE: cURL
CODE:
```
curl https://api.anthropic.com/v1/models \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01"
```

----------------------------------------

TITLE: Claude Tool Use Mechanism and Integration Steps
DESCRIPTION: Detailed explanation of how tool use works with Claude, covering client and server tool types, and the four-step process for integrating and executing client tools.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: APIDOC
CODE:
```
How tool use works:
  Claude supports two types of tools:
    1. Client tools: Execute on your systems.
       - User-defined custom tools.
       - Anthropic-defined tools (e.g., computer use, text editor) requiring client implementation.
    2. Server tools: Execute on Anthropic’s servers (e.g., web search tool).
       - Specified in API request, no client implementation needed.
  Anthropic-defined tools use versioned types (e.g., web_search_20250305).

  Client tools integration steps:
    1. Provide Claude with tools and a user prompt:
       - Define client tools (name, description, input schemas) in API request.
       - Include user prompt.
    2. Claude decides to use a tool:
       - Claude assesses if tools can help.
       - Constructs a tool use request.
       - API response has `stop_reason` of `tool_use` for client tools.
    3. Execute the tool and return results:
       - Extract tool name and input from Claude’s request.
       - Execute tool code on your system.
       - Return results in a new `user` message with a `tool_result` content block.
    4. Claude uses tool result to formulate a response:
       - Claude analyzes tool results to craft final response.
  Note: Steps 3 and 4 are optional; tool use request (step 2) might be sufficient.
```

----------------------------------------

TITLE: Python SDK with Structured Messages and Image Inputs
DESCRIPTION: Illustrates sending structured messages, including text and image references, using the Python SDK. The SDK handles image files via Claude's Read tool, supporting formats like PNG, JPG, and PDF.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: Python
CODE:
```
from claude_code_sdk import ClaudeSDKClient, ClaudeCodeOptions

async with ClaudeSDKClient() as client:
    # Text message
    await client.query("Analyze this code for security issues")

    # Message with image reference (image will be read by Claude's Read tool)
    await client.query("Explain what's shown in screenshot.png")

    # Multiple messages in sequence
    messages = [
        "First, analyze the architecture diagram in diagram.png",
        "Now suggest improvements based on the diagram",
        "Finally, generate implementation code"
    ]

    for msg in messages:
        await client.query(msg)
        async for response in client.receive_response():
            # Process each response
            pass

# The SDK handles image files through Claude's built-in Read tool
# Supported formats: PNG, JPG, PDF, and other common formats
```

----------------------------------------

TITLE: Example Debug Output for Claude Hooks
DESCRIPTION: This snippet shows the console output when running the `claude` command with the `--debug` flag. It provides detailed logs about the execution of hooks, including which hook is being executed, the commands being matched and run, and the final status and output of the hook command.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: Shell
CODE:
```
[DEBUG] Executing hooks for PostToolUse:Write
[DEBUG] Getting matching hook commands for PostToolUse with query: Write
[DEBUG] Found 1 hook matchers in settings
[DEBUG] Matched 1 hooks for query "Write"
[DEBUG] Found 1 hook commands to execute
[DEBUG] Executing hook command: <Your command> with timeout 60000ms
[DEBUG] Hook command completed with status 0: <Your stdout>
```

----------------------------------------

TITLE: Claude API Call to Apply String Replacement Fix
DESCRIPTION: Shows how to make an API call to Claude to apply a string replacement fix using the `text_editor_20250429` tool. It includes the assistant's initial message, the `tool_use` block with the `str_replace` command, and the subsequent `tool_result` from the user, demonstrating a complete interaction for a code fix.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: Python
CODE:
```
response = client.messages.create(
    model="claude-opus-4-20250514",
    max_tokens=1024,
    tools=[
        {
            "type": "text_editor_20250429",
            "name": "str_replace_based_edit_tool"
        }
    ],
    messages=[
        # Previous messages...
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you."
                },
                {
                    "type": "tool_use",
                    "id": "toolu_01PqRsTuVwXyZAbCdEfGh",
                    "name": "str_replace_based_edit_tool",
                    "input": {
                        "command": "str_replace",
                        "path": "primes.py",
                        "old_str": "    for num in range(2, limit + 1)",
                        "new_str": "    for num in range(2, limit + 1):"
                    }
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "tool_result",
                    "tool_use_id": "toolu_01PqRsTuVwXyZAbCdEfGh",
                    "content": "Successfully replaced text at exactly one location."
                }
            ]
        }
    ]
)
```

----------------------------------------

TITLE: UserPromptSubmit Hook Input for Claude Code
DESCRIPTION: Example JSON input for the `UserPromptSubmit` hook, capturing the `prompt` text submitted by the user.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "session_id": "abc123",
  "transcript_path": "/Users/.../.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
  "cwd": "/Users/...",
  "hook_event_name": "UserPromptSubmit",
  "prompt": "Write a function to calculate the factorial of a number"
}
```

----------------------------------------

TITLE: Stream Anthropic Claude Messages using Python SDK
DESCRIPTION: Illustrates how to incrementally stream responses from the Anthropic Claude API using the official Python SDK. The example shows client initialization, sending a message, and iterating through the `text_stream` to print content as it arrives.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: python
CODE:
```
import anthropic

client = anthropic.Anthropic()

with client.messages.stream(
    max_tokens=1024,
    messages=[{"role": "user", "content": "Hello"}],
    model="claude-opus-4-20250514",
) as stream:
    for text in stream.text_stream:
        print(text, end="", flush=True)
```

----------------------------------------

TITLE: Provide Text Editor Tool to Claude Sonnet 3.5 via Messages API (Shell) with Beta Header
DESCRIPTION: Shows how to integrate the str_replace_editor tool (type text_editor_20241022) with the claude-3-5-sonnet-20241022 model using the Anthropic Messages API. This example includes the anthropic-beta: computer-use-2024-10-22 header, enabling specific beta functionalities for Claude's interaction with files based on user prompts.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "content-type: application/json" \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -H "anthropic-beta: computer-use-2024-10-22" \
  -d '{
    "model": "claude-3-5-sonnet-20241022",
    "max_tokens": 1024,
    "tools": [
      {
        "type": "text_editor_20241022",
        "name": "str_replace_editor"
      }
    ],
    "messages": [
      {
        "role": "user",
        "content": "There'\''s a syntax error in my primes.py file. Can you help me fix it?"
      }
    ]
  }'
```

----------------------------------------

TITLE: Anthropic Claude API: Top-Level Response Fields
DESCRIPTION: Details the top-level fields returned in responses from the Anthropic Claude API, including identifiers, choices array details, object type, creation timestamp, model name, finish reason, content, and usage statistics.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk

LANGUAGE: APIDOC
CODE:
```
| Field                       | Support status       |
| --------------------------- | -------------------- |
| `id`                        | Fully supported      |
| `choices[]`                 | Will always have a length of 1 |
| `choices[].finish_reason`   | Fully supported      |
| `choices[].index`           | Fully supported      |
| `choices[].message.role`    | Fully supported      |
| `choices[].message.content` | Fully supported      |
| `choices[].message.tool_calls` | Fully supported      |
| `object`                    | Fully supported      |
| `created`                   | Fully supported      |
| `model`                     | Fully supported      |
| `finish_reason`             | Fully supported      |
| `content`                   | Fully supported      |
| `usage.completion_tokens`   | Fully supported      |
| `usage.prompt_tokens`       | Fully supported      |
| `usage.total_tokens`        | Fully supported      |
| `usage.completion_tokens_details` | Always empty         |
| `usage.prompt_tokens_details` | Always empty         |
| `choices[].message.refusal` | Always empty         |
| `choices[].message.audio`   | Always empty         |
| `logprobs`                  | Always empty         |
| `service_tier`              | Always empty         |
| `system_fingerprint`        | Always empty         |
```

----------------------------------------

TITLE: Claude's Request to View File Contents
DESCRIPTION: Shows Claude's initial response when asked to fix a syntax error, where it requests to view the file using the `str_replace_based_edit_tool` with the `view` command. This indicates Claude's first step in diagnosing the problem.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: JSON
CODE:
```
{
  "id": "msg_01XAbCDeFgHiJkLmNoPQrStU",
  "model": "claude-opus-4-20250514",
  "stop_reason": "tool_use",
  "role": "assistant",
  "content": [
    {
      "type": "text",
      "text": "I'll help you fix the syntax error in your primes.py file. First, let me take a look at the file to identify the issue."
    },
    {
      "type": "tool_use",
      "id": "toolu_01AbCdEfGhIjKlMnOpQrStU",
      "name": "str_replace_based_edit_tool",
      "input": {
        "command": "view",
        "path": "primes.py"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Install Claude Code via npm
DESCRIPTION: This snippet demonstrates the standard global installation of Claude Code using npm. It's the recommended method for most users and requires Node.js 18+.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/setup

LANGUAGE: JavaScript
CODE:
```
npm install -g @anthropic-ai/claude-code
```

----------------------------------------

TITLE: General Claude Code Hook Input Structure
DESCRIPTION: This snippet illustrates the common JSON structure received by all Claude Code hooks via stdin, including `session_id`, `transcript_path`, `cwd`, and `hook_event_name`, along with a placeholder for event-specific data.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  // Common fields
  "session_id": "string",
  "transcript_path": "string",  // Path to conversation JSON
  "cwd": "string",              // The current working directory when the hook is invoked

  // Event-specific fields
  "hook_event_name": "string",
  "...": ""
}
```

----------------------------------------

TITLE: Importing files in CLAUDE.md for project overview and commands
DESCRIPTION: CLAUDE.md files can import additional files using `@path/to/import` syntax. This example demonstrates importing a README for project overview, package.json for npm commands, and a git instructions file for common workflows.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/memory

LANGUAGE: Markdown
CODE:
```
See @README for project overview and @package.json for available npm commands for this project.

# Additional Instructions
- git workflow @docs/git-instructions.md

```

----------------------------------------

TITLE: Claude Code CI/CD Integration Example
DESCRIPTION: Illustrates how Claude Code can be integrated into CI/CD pipelines to automate tasks like code translation and pull request creation.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/overview

LANGUAGE: bash
CODE:
```
claude -p "If there are new text strings, translate them into French and raise a PR for @lang-fr-team to review"
```

----------------------------------------

TITLE: Control Claude CLI Output Format (Text, JSON, Stream-JSON)
DESCRIPTION: Explains how to specify the output format for the `claude` CLI tool using the `--output-format` flag. It covers plain text (default), structured JSON, and real-time streaming JSON, which are useful for integrating Claude's responses into scripts or other tools.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/common-workflows

LANGUAGE: Shell
CODE:
```
cat data.txt | claude -p 'summarize this data' --output-format text > summary.txt
```

LANGUAGE: Shell
CODE:
```
cat code.py | claude -p 'analyze this code for bugs' --output-format json > analysis.json
```

LANGUAGE: Shell
CODE:
```
cat log.txt | claude -p 'parse this log file for errors' --output-format stream-json
```

----------------------------------------

TITLE: Advanced Debugging Steps for Claude Code Hooks
DESCRIPTION: This section details advanced debugging techniques for Claude Code hooks. It covers inspecting hook execution using the `--debug` flag, validating JSON schemas, checking environment variables, testing edge cases, monitoring system resources, and implementing structured logging within hook scripts.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: bash
CODE:
```
claude --debug
```

LANGUAGE: json
CODE:
```
# Validate hook input/output with external JSON schema validation tools
```

LANGUAGE: shell
CODE:
```
# Check environment variables for correct Claude Code setup
# Test hooks with unusual file paths or inputs to identify edge cases
# Monitor system resources (CPU, memory) during hook execution
# Implement structured logging within hook scripts for detailed insights
```

----------------------------------------

TITLE: Claude Code CI/CD Integration Example
DESCRIPTION: Illustrates how Claude Code can be integrated into CI/CD pipelines to automate tasks like code translation and pull request creation.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/index

LANGUAGE: bash
CODE:
```
claude -p "If there are new text strings, translate them into French and raise a PR for @lang-fr-team to review"
```

----------------------------------------

TITLE: PreToolUse Hook Event JSON for Tool Call Decisions
DESCRIPTION: This JSON structure is used by `PreToolUse` hooks to control the execution of a tool call. It allows specifying a `permissionDecision` as 'allow', 'deny', or 'ask', along with an optional `permissionDecisionReason` to explain the decision to Claude or the user.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "hookSpecificOutput": {
    "hookEventName": "PreToolUse",
    "permissionDecision": "allow" | "deny" | "ask",
    "permissionDecisionReason": "My reason here"
  }
}
```

----------------------------------------

TITLE: Text and Image Input - Python
DESCRIPTION: Illustrates using the ClaudeSDKClient in Python for text and image inputs, including processing streaming responses and handling multiple mixed-content inputs.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: python
CODE:
```
import asyncio
from claude_code_sdk import ClaudeSDKClient

async def process_inputs():
    async with ClaudeSDKClient() as client:
        # Text input
        await client.query("Explain this code")
        async for message in client.receive_response():
            # Process streaming response
            pass

        # Image input (Claude will use Read tool automatically)
        await client.query("What's in this diagram? screenshot.png")
        async for message in client.receive_response():
            # Process image analysis
            pass

        # Multiple inputs with mixed content
        inputs = [
            "Analyze the architecture in diagram.png",
            "Compare it with best practices",
            "Generate improved version"
        ]

        for prompt in inputs:
            await client.query(prompt)
            async for message in client.receive_response():
                # Process each response
                pass

asyncio.run(process_inputs())

```

----------------------------------------

TITLE: Anthropic Claude API: Function Role Message Fields
DESCRIPTION: Details the fields available for messages with the 'function' role in the Anthropic Claude API. This includes content variations (string, array with text type), tool_choice, and name fields.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk

LANGUAGE: APIDOC
CODE:
```
| Field         | Variant                  | Support status |
| ------------- | ------------------------ | -------------- |
| `content`     | `string`                 | Fully supported|
| `content`     | `array`, `type == "text"` | Fully supported|
| `tool_choice` | N/A                      | Fully supported|
| `name`        | N/A                      | Ignored        |
```

----------------------------------------

TITLE: Application Applies Code Fix and Returns Tool Result
DESCRIPTION: This snippet shows how an application integrates with Claude's tool use. After receiving Claude's `tool_use` message, the application executes the `str_replace` command and then sends a `tool_result` message back to Claude, confirming the successful text replacement.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: Python
CODE:
```
response = client.messages.create(
    model="claude-opus-4-20250514",
    max_tokens=1024,
    tools=[
        {
            "type": "text_editor_20250429",
            "name": "str_replace_based_edit_tool"
        }
    ],
    messages=[
        # Previous messages...
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I found the syntax error in your primes.py file. In the `get_primes` function, there is a missing colon (:) at the end of the for loop line. Let me fix that for you."
                },
                {
                    "type": "tool_use",
                    "id": "toolu_01PqRsTuVwXyZAbCdEfGh",
                    "name": "str_replace_based_edit_tool",
                    "input": {
                        "command": "str_replace",
                        "path": "primes.py",
                        "old_str": "    for num in range(2, limit + 1)",
                        "new_str": "    for num in range(2, limit + 1):"
                    }
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "tool_result",
                    "tool_use_id": "toolu_01PqRsTuVwXyZAbCdEfGh",
                    "content": "Successfully replaced text at exactly one location."
                }
            ]
        }
    ]
)
```

----------------------------------------

TITLE: API Parameter: Thinking Type
DESCRIPTION: Specifies the type of thinking configuration. Currently, only `enabled` is an available option.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
thinking.type

enum<string>

required

Available options:

`enabled`
```

----------------------------------------

TITLE: Create Claude Message with Go SDK
DESCRIPTION: This Go code snippet demonstrates how to initialize the Anthropic client and send a message to the Claude API. It sets up a new client with an API key, then creates a message with a specified model, max tokens, and user content, handling potential errors.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/client-sdks

LANGUAGE: Go
CODE:
```
package main

import (
	"context"
	"fmt"
	"github.com/anthropics/anthropic-sdk-go"
	"github.com/anthropics/anthropic-sdk-go/option"
)

func main() {
	client := anthropic.NewClient(
		option.WithAPIKey("my-anthropic-api-key"),
	)
	message, err := client.Messages.New(context.TODO(), anthropic.MessageNewParams{
		Model:     anthropic.F(anthropic.ModelClaudeSonnet4_0),
		MaxTokens: anthropic.F(int64(1024)),
		Messages: anthropic.F([]anthropic.MessageParam{
			anthropic.NewUserMessage(anthropic.NewTextBlock("What is a quaternion?")),
		}),
	})
	if err != nil {
		panic(err.Error())
	}
	fmt.Printf("%+v\n", message.Content)
}
```

----------------------------------------

TITLE: Basic Request and Response with Anthropic Messages API
DESCRIPTION: Demonstrates a fundamental interaction with the Anthropic Messages API, showing how to send a simple user message and receive an assistant's response. This example includes the cURL command for the request and the expected JSON structure for the response.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages-examples

LANGUAGE: Shell
CODE:
```
#!/bin/sh
curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --data \
'{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "messages": [
        {"role": "user", "content": "Hello, Claude"}
    ]
}'
```

LANGUAGE: JSON
CODE:
```
{
  "id": "msg_01XFDUDYJgAACzvnptvVoYEL",
  "type": "message",
  "role": "assistant",
  "content": [
    {
      "type": "text",
      "text": "Hello!"
    }
  ],
  "model": "claude-opus-4-20250514",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "usage": {
    "input_tokens": 12,
    "output_tokens": 6
  }
}
```

----------------------------------------

TITLE: Anthropic Claude Model Constants in Go
DESCRIPTION: This snippet lists the available constants for specifying Claude models within the Anthropic Go SDK. It categorizes models by their series (Claude 4, 3.7, 3.5, 3) and includes specific versions and 'latest' aliases.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/client-sdks

LANGUAGE: Go
CODE:
```
// Claude 4 Models
anthropic.ModelClaudeOpus4_0
anthropic.ModelClaudeOpus4_20250514
anthropic.ModelClaudeSonnet4_0
anthropic.ModelClaudeSonnet4_20250514

// Claude 3.7 Models
anthropic.ModelClaude3_7SonnetLatest
anthropic.ModelClaude3_7Sonnet20250219

// Claude 3.5 Models
anthropic.ModelClaude3_5HaikuLatest
anthropic.ModelClaude3_5Haiku20241022
anthropic.ModelClaude3_5SonnetLatest
anthropic.ModelClaude3_5Sonnet20241022
anthropic.ModelClaude_3_5_Sonnet_20240620

// Claude 3 Models
anthropic.ModelClaude3OpusLatest
anthropic.ModelClaude_3_Opus_20240229
anthropic.ModelClaude_3_Sonnet_20240229
anthropic.ModelClaude_3_Haiku_20240307
```

----------------------------------------

TITLE: Set Anthropic API Key
DESCRIPTION: Sets the ANTHROPIC_API_KEY environment variable, which is required for authenticating with the Anthropic API. Replace 'your-api-key-here' with your actual API key.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: Bash
CODE:
```
export ANTHROPIC_API_KEY="your-api-key-here"
```

----------------------------------------

TITLE: Example Bash Script for Dynamic OpenTelemetry Headers
DESCRIPTION: This Bash script demonstrates how to generate dynamic HTTP headers for OpenTelemetry. The script must output valid JSON with string key-value pairs, which can then be used for authentication or other purposes by the OpenTelemetry exporter.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/monitoring-usage

LANGUAGE: Bash
CODE:
```
#!/bin/bash
# Example: Multiple headers
echo "{\"Authorization\": \"Bearer $(get-token.sh)\", \"X-API-Key\": \"$(get-api-key.sh)\"}"
```

----------------------------------------

TITLE: Direct Await Usage in Jupyter Cells with ClaudeSDKClient
DESCRIPTION: Demonstrates how to directly use `await` with the `ClaudeSDKClient` within Jupyter notebook cells for connecting, querying, receiving responses, and disconnecting. This pattern is suitable for interactive data analysis and immediate feedback.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-python

LANGUAGE: Python
CODE:
```
client = ClaudeSDKClient()
await client.connect()
await client.query("Analyze data.csv")
async for msg in client.receive_response():
    print(msg)
await client.disconnect()
```

----------------------------------------

TITLE: Defining Image and Text Content in Claude API Messages
DESCRIPTION: This code snippet demonstrates how to structure image and text content within a message array for the Claude API. It shows how to include images via URL and intersperse them with text prompts for multimodal conversations.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision

LANGUAGE: JSON
CODE:
```
"type": "image",
"source": {
    "type": "url",
    "url": "https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg",
},
},
{
    "type": "text",
    "text": "Image 2:"
},
{
    "type": "image",
    "source": {
        "type": "url",
        "url": "https://upload.wikimedia.org/wikipedia/commons/b/b5/Iridescent.green.sweat.bee1.jpg",
    },
},
{
    "type": "text",
    "text": "How are these images different?"
}
],
}
],
)
```

----------------------------------------

TITLE: Anthropic API Authentication
DESCRIPTION: Explains that all requests require an `x-api-key` header for authentication. Notes that Client SDKs handle this automatically, while direct integrations require manual header inclusion.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/getting-started

LANGUAGE: APIDOC
CODE:
```
Header: x-api-key
Type: string
Description: Your API key for authentication.
Required: Yes
```

----------------------------------------

TITLE: Configure Claude Code Telemetry with Multiple Exporters in Shell
DESCRIPTION: Demonstrates how to configure Claude Code telemetry to use multiple OpenTelemetry exporters simultaneously, specifically console and OTLP. It also specifies the OTLP protocol as HTTP/JSON for the OTLP exporter.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/monitoring-usage

LANGUAGE: Shell
CODE:
```
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=console,otlp
export OTEL_EXPORTER_OTLP_PROTOCOL=http/json
```

----------------------------------------

TITLE: Automating Tool Use Workflows with Anthropic Claude API
DESCRIPTION: This Python function demonstrates a robust pattern for integrating tool use with the Anthropic Claude API. It iteratively calls the API, detects when a tool needs to be used via the `tool_use` stop reason, executes the tool, and then feeds the results back into the conversation to continue the workflow until a final response is generated.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/handling-stop-reasons

LANGUAGE: Python
CODE:
```
def complete_tool_workflow(client, user_query, tools):
    messages = [{"role": "user", "content": user_query}]

    while True:
        response = client.messages.create(
            model="claude-sonnet-4-20250514",
            messages=messages,
            tools=tools
        )

        if response.stop_reason == "tool_use":
            # Execute tools and continue
            tool_results = execute_tools(response.content)
            messages.append({"role": "assistant", "content": response.content})
            messages.append({"role": "user", "content": tool_results})
        else:
            # Final response
            return response
```

----------------------------------------

TITLE: Python Function to Handle Claude Text Editor Tool Calls
DESCRIPTION: A Python helper function skeleton demonstrating how to process different commands from Claude's text editor tool calls, including viewing, replacing, creating, inserting, and undoing edits, with considerations for model version compatibility.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: python
CODE:
```
def handle_editor_tool(tool_call, model_version):
    input_params = tool_call.input
    command = input_params.get('command', '')
    file_path = input_params.get('path', '')

    if command == 'view':
        # Read and return file contents
        pass
    elif command == 'str_replace':
        # Replace text in file
        pass
    elif command == 'create':
        # Create new file
        pass
    elif command == 'insert':
        # Insert text at location
        pass
    elif command == 'undo_edit':
        # Check if it's a Claude 4 model
        if 'str_replace_based_edit_tool' in model_version:
            return {"error": "undo_edit command is not supported in Claude 4"}
        # Restore from backup for Claude 3.7/3.5
        pass
```

----------------------------------------

TITLE: Add HTTP MCP Servers with Various Configurations
DESCRIPTION: Illustrates how to add HTTP-based MCP servers, which are common for REST APIs. Examples include basic syntax, connecting to Notion, and using a Bearer token for authentication.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: shell
CODE:
```
# Real example: Connect to Notion
claude mcp add --transport http notion https://mcp.notion.com/mcp
```

LANGUAGE: shell
CODE:
```
# Example with Bearer token
claude mcp add --transport http secure-api https://api.example.com/mcp \
  --header "Authorization: Bearer your-token"
```

----------------------------------------

TITLE: Claude Model Tool Result Response Example
DESCRIPTION: Illustrates the JSON structure for returning the result of a tool execution back to the Claude model in a subsequent user message, linking the result to the original `tool_use_id`.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: json
CODE:
```
[
  {
    "type": "tool_result",
    "tool_use_id": "toolu_01D7FLrfh4GYq7yT1ULFeyMV",
    "content": "259.75 USD"
  }
]
```

----------------------------------------

TITLE: Python Code to Process Claude's Tool Use Responses
DESCRIPTION: This Python snippet illustrates how to iterate through Claude's response content, identify tool use calls, execute the corresponding tool function, and return the results back to Claude using a `tool_result` message.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: python
CODE:
```
# Process tool use in Claude's response
for content in response.content:
    if content.type == "tool_use":
        # Execute the tool based on command
        result = handle_editor_tool(content)

        # Return result to Claude
        tool_result = {
            "type": "tool_result",
            "tool_use_id": content.id,
            "content": result
        }
```

----------------------------------------

TITLE: Anthropic Messages API Request Body JSON Examples
DESCRIPTION: Illustrative JSON examples demonstrating various message structures and content types for the Anthropic Messages API, including single user messages, multi-turn conversations, partially-filled responses, and image content blocks.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: JSON
CODE:
```
[{"role": "user", "content": "Hello, Claude"}]
```

LANGUAGE: JSON
CODE:
```
[
  {"role": "user", "content": "Hello there."},
  {"role": "assistant", "content": "Hi, I'm Claude. How can I help you?"},
  {"role": "user", "content": "Can you explain LLMs in plain English?"}
]
```

LANGUAGE: JSON
CODE:
```
[
  {"role": "user", "content": "What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun"},
  {"role": "assistant", "content": "The best answer is ("}
]
```

LANGUAGE: JSON
CODE:
```
{"role": "user", "content": "Hello, Claude"}
```

LANGUAGE: JSON
CODE:
```
{"role": "user", "content": [{"type": "text", "text": "Hello, Claude"}]}
```

LANGUAGE: JSON
CODE:
```
{"role": "user", "content": [
  {
    "type": "image",
    "source": {
      "type": "base64",
      "media_type": "image/jpeg",
      "data": "/9j/4AAQSkZJRg..."
    }
  },
  {"type": "text", "text": "What is in this image?"}
]}
```

----------------------------------------

TITLE: Stop and SubagentStop Hook Input for Claude Code
DESCRIPTION: Example JSON input for the `Stop` hook, indicating whether a stop hook is currently active via the `stop_hook_active` flag.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "session_id": "abc123",
  "transcript_path": "~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
  "hook_event_name": "Stop",
  "stop_hook_active": true
}
```

----------------------------------------

TITLE: Install Claude Code using NPM
DESCRIPTION: Installs the Claude Code CLI globally using npm, requiring Node.js 18 or newer. This is a common method for developers with an existing Node.js environment.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: Shell
CODE:
```
npm install -g @anthropic-ai/claude-code
```

----------------------------------------

TITLE: Provide Text Editor Tool to Claude 4 (Opus) via Messages API (Shell)
DESCRIPTION: Demonstrates how to provide the str_replace_based_edit_tool (type text_editor_20250429) to the claude-opus-4-20250514 model using the Anthropic Messages API. This allows Claude to assist with file modifications, such as fixing syntax errors, by receiving a user prompt.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "content-type: application/json" \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -d '{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "tools": [
      {
        "type": "text_editor_20250429",
        "name": "str_replace_based_edit_tool"
      }
    ],
    "messages": [
      {
        "role": "user",
        "content": "There'\''s a syntax error in my primes.py file. Can you help me fix it?"
      }
    ]
  }'
```

----------------------------------------

TITLE: Claude's response: View file content
DESCRIPTION: This JSON response shows Claude's assistant turn, where it uses the `str_replace_based_edit_tool` with the `view` command to request the content of `primes.py`.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: JSON
CODE:
```
{
  "id": "msg_01XAbCDeFgHiJkLmNoPQrStU",
  "model": "claude-opus-4-20250514",
  "stop_reason": "tool_use",
  "role": "assistant",
  "content": [
    {
      "type": "text",
      "text": "I'll help you fix the syntax error in your primes.py file. First, let me take a look at the file to identify the issue."
    },
    {
      "type": "tool_use",
      "id": "toolu_01AbCdEfGhIjKlMnOpQrStU",
      "name": "str_replace_based_edit_tool",
      "input": {
        "command": "view",
        "path": "primes.py"
      }
    }
  ]
}
```

----------------------------------------

TITLE: Initiate Claude Conversation with Text Editor Tool
DESCRIPTION: Demonstrates how to start a conversation with Claude using a `curl` command, providing the `text_editor_20250429` tool and an initial user prompt to fix a syntax error in a file. This sets up the interaction for Claude to begin analyzing the code.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "content-type: application/json" \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -d '{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "tools": [
      {
        "type": "text_editor_20250429",
        "name": "str_replace_based_edit_tool"
      }
    ],
    "messages": [
      {
        "role": "user",
        "content": "There'\''s a syntax error in my primes.py file. Can you help me fix it?"
      }
    ]
  }'
```

----------------------------------------

TITLE: Install Claude Code CLI using NPM
DESCRIPTION: This command installs the Claude Code command-line interface globally using Node Package Manager (NPM). This is the recommended way to get started with Claude Code.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code

LANGUAGE: bash
CODE:
```
npm install -g @anthropic-ai/claude-code
```

----------------------------------------

TITLE: record_summary Tool Input Schema Definition
DESCRIPTION: Defines the JSON schema for the `input` of the `record_summary` tool. It specifies that the input is an object with a `key_colors` array, where each item is an object containing `r`, `g`, `b` (red, green, blue) color components as numbers between 0.0 and 1.0.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: APIDOC
CODE:
```
{
            "type": "object",
            "properties": {
                "key_colors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "r": { "type": "number", "description": "red value [0.0, 1.0]" },
                            "g": { "type": "number", "description": "green value [0.0, 1.0]" }
```

----------------------------------------

TITLE: Initiate Tool Use with Claude (Single Tool)
DESCRIPTION: Send an initial message to Claude, defining a single tool (get_weather) and posing a user query. Claude is expected to respond by indicating its intent to use the tool.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --data \
'{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "tools": [{
        "name": "get_weather",
        "description": "Get the current weather in a given location",
        "input_schema": {
            "type": "object",
            "properties": {
                "location": {
                    "type": "string",
                    "description": "The city and state, e.g. San Francisco, CA"
                },
                "unit": {
                    "type": "string",
                    "enum": ["celsius", "fahrenheit"],
                    "description": "The unit of temperature, either \"celsius\" or \"fahrenheit\""
                }
            },
            "required": ["location"]
        }
    }],
    "messages": [{"role": "user", "content": "What is the weather like in San Francisco?"}]
}'
```

LANGUAGE: Python
CODE:
```

```

LANGUAGE: Java
CODE:
```

```

----------------------------------------

TITLE: Stream Anthropic API messages using Python SDK
DESCRIPTION: Demonstrates how to use the Anthropic Python SDK to stream responses from the Claude API, printing each text chunk as it arrives.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming

LANGUAGE: Python
CODE:
```
import anthropic

client = anthropic.Anthropic()

with client.messages.stream(
    max_tokens=1024,
    messages=[{"role": "user", "content": "Hello"}],
    model="claude-opus-4-20250514",
) as stream:
  for text in stream.text_stream:
      print(text, end="", flush=True)
```

----------------------------------------

TITLE: Claude Code SDK Overview and Core Usage
DESCRIPTION: Provides an overview of the Claude Code SDK, explaining why to use it and what can be built. It covers quick start guides, core usage patterns, authentication methods (Anthropic API key and third-party credentials), and multi-turn conversations.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: APIDOC
CODE:
```
Claude Code SDK:
  Purpose: Enables developers to integrate Claude's capabilities into their applications.
  Key Features:
    - Multi-turn conversations
    - Custom system prompts
    - Plan Mode for structured task execution
    - Custom tools via MCP (Message Content Processing)
    - Support for various output formats (Text, JSON, Streaming JSON)
    - Support for various input formats (Text, Streaming JSON)
  Authentication:
    - Anthropic API Key: Primary method for authenticating requests.
    - Third-party API Credentials: For integrating with other services.
  Usage:
    - Quick Start: Basic steps to get started with the SDK.
    - Core Usage: Fundamental patterns for interacting with Claude.
    - Advanced Usage: Techniques for more complex scenarios.
  Related Resources:
    - CLI usage and controls
    - GitHub Actions integration
    - Common workflows
```

----------------------------------------

TITLE: List Anthropic Models API Endpoint
DESCRIPTION: Describes the API endpoint for listing available Anthropic models, including the HTTP method and path.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list

LANGUAGE: APIDOC
CODE:
```
GET /v1/models
```

----------------------------------------

TITLE: Using Beta Namespace in Anthropic SDKs
DESCRIPTION: This snippet demonstrates how to access new beta features through the `beta` namespace available in Anthropic client SDKs. It shows a Python example of creating a message with a specific beta feature, which should be used in conjunction with beta headers.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/client-sdks

LANGUAGE: Python
CODE:
```
import anthropic

client = anthropic.Anthropic(
    # defaults to os.environ.get("ANTHROPIC_API_KEY")
    api_key="my_api_key",
)
message = client.beta.messages.create(
    model="claude-sonnet-4-20250514",
    max_tokens=1024,
    messages=[
        {"role": "user", "content": "Hello, Claude"}
    ],
    betas=["beta-feature-name"]
)
print(message.content)
```

----------------------------------------

TITLE: Handle various input formats with Claude SDK
DESCRIPTION: This example illustrates how to send different types of inputs (text, image, multiple mixed inputs) to the Claude SDK and process the streaming responses. It shows basic text queries, image input using a filename, and iterating through multiple prompts for sequential processing.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-python

LANGUAGE: python
CODE:
```
import asyncio
from claude_code_sdk import ClaudeSDKClient

async def process_inputs():
    async with ClaudeSDKClient() as client:
        # Text input
        await client.query("Explain this code")
        async for message in client.receive_response():
            # Process streaming response
            pass

        # Image input (Claude will use Read tool automatically)
        await client.query("What's in this diagram? screenshot.png")
        async for message in client.receive_response():
            # Process image analysis
            pass

        # Multiple inputs with mixed content
        inputs = [
            "Analyze the architecture in diagram.png",
            "Compare it with best practices",
            "Generate improved version"
        ]

        for prompt in inputs:
            await client.query(prompt)
            async for message in client.receive_response():
                # Process each response
                pass

asyncio.run(process_inputs())
```

----------------------------------------

TITLE: Define a poor tool description for Claude
DESCRIPTION: This example illustrates an ineffective tool definition due to its overly brief and vague description. Such a definition provides insufficient context for Claude, leading to potential misinterpretations or incorrect tool usage.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: JSON
CODE:
```
{
  "name": "get_stock_price",
  "description": "Gets the stock price for a ticker.",
  "input_schema": {
    "type": "object",
    "properties": {
      "ticker": {
        "type": "string"
      }
    },
    "required": ["ticker"]
  }
}
```

----------------------------------------

TITLE: Prepare Image Data for Claude API Requests
DESCRIPTION: This snippet demonstrates how to prepare image data for use with the Claude API. It shows how to encode an image to base64 using `curl` for base64-encoded requests and notes that URLs can be used directly for URL-based requests.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision

LANGUAGE: Shell
CODE:
```
# For URL-based images, you can use the URL directly in your JSON request

# For base64-encoded images, you need to first encode the image
# Example of how to encode an image to base64 in bash:
BASE64_IMAGE_DATA=$(curl -s "https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg" | base64)

# The encoded data can now be used in your API calls
```

----------------------------------------

TITLE: Query Claude Code about its features and usage
DESCRIPTION: Shows how to ask Claude Code questions about its own functionalities and capabilities. This allows users to learn about general features, how to use slash commands, or potential integrations like Docker.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: Shell
CODE:
```
> what can Claude Code do?
```

LANGUAGE: Shell
CODE:
```
> how do I use slash commands in Claude Code?
```

LANGUAGE: Shell
CODE:
```
> can Claude Code work with Docker?
```

----------------------------------------

TITLE: Provide Text Editor Tool to Claude Sonnet 3.7 via Messages API (Shell)
DESCRIPTION: Illustrates providing the str_replace_editor tool (type text_editor_20250124) to the claude-3-7-sonnet-20250124 model through the Anthropic Messages API. This setup enables Claude to interact with and modify files based on user requests, like resolving code issues.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "content-type: application/json" \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -d '{
    "model": "claude-3-7-sonnet-20250124",
    "max_tokens": 1024,
    "tools": [
      {
        "type": "text_editor_20250124",
        "name": "str_replace_editor"
      }
    ],
    "messages": [
      {
        "role": "user",
        "content": "There'\''s a syntax error in my primes.py file. Can you help me fix it?"
      }
    ]
  }'
```

----------------------------------------

TITLE: Anthropic Claude API Message Object Response Schema
DESCRIPTION: Defines the structure of the Message object returned by the Anthropic Claude API, detailing each field, its type, requirements, and possible values. Includes examples for content generation and usage metrics.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
Message object:
  id:
    type: string
    required: true
    description: Unique object identifier. The format and length of IDs may change over time.
    examples: "msg_013Zva2CMHLNnXjNJJKqJ2EF"
  type:
    type: enum<string>
    default: message
    required: true
    description: Object type. For Messages, this is always "message".
    available_options: ["message"]
  role:
    type: enum<string>
    default: assistant
    required: true
    description: Conversational role of the generated message. This will always be "assistant".
    available_options: ["assistant"]
  content:
    type: object[]
    required: true
    description: Content generated by the model. This is an array of content blocks, each of which has a type that determines its shape.
    example: [{"type": "text", "text": "Hi, I'm Claude."}]
    notes: If the request input `messages` ended with an `assistant` turn, then the response `content` will continue directly from that last turn. You can use this to constrain the model's output.
    constrained_example_input: [
      {"role": "user", "content": "What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun"},
      {"role": "assistant", "content": "The best answer is ("}
    ]
    constrained_example_output: [{"type": "text", "text": "B)"}]
    child_attributes:
      signature:
        type: string
        required: true
      thinking:
        type: string
        required: true
      type:
        type: enum<string>
        default: thinking
        required: true
        available_options: ["thinking"]
        examples: [
          {
            "text": "Hi! My name is Claude.",
            "type": "text"
          }
        ]
  model:
    type: string
    required: true
    description: The model that handled the request.
    required_string_length: 1 - 256
    examples: "claude-3-7-sonnet-20250219"
  stop_reason:
    type: enum<string> | null
    required: true
    description: The reason that we stopped.
    possible_values:
      - "end_turn": the model reached a natural stopping point
      - "max_tokens": we exceeded the requested `max_tokens` or the model's maximum
      - "stop_sequence": one of your provided custom `stop_sequences` was generated
      - "tool_use": the model invoked one or more tools
      - "pause_turn": we paused a long-running turn. You may provide the response back as-is in a subsequent request to let the model continue.
      - "refusal"
    notes: In non-streaming mode this value is always non-null. In streaming mode, it is null in the `message_start` event and non-null otherwise.
    available_options: ["end_turn", "max_tokens", "stop_sequence", "tool_use", "pause_turn", "refusal"]
  stop_sequence:
    type: string | null
    required: true
    description: Which custom stop sequence was generated, if any. This value will be a non-null string if one of your custom stop sequences was generated.
  usage:
    type: object
    required: true
    description: Billing and rate-limit usage. Anthropic's API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems. Under the hood, the API transforms requests into a format suitable for the model. The model's output then goes through a parsing stage before becoming an API response. As a result, the token counts in `usage` will not match one-to-one with the exact visible content of an API request or response. For example, `output_tokens` will be non-zero, even for an empty string response from Claude. Total input tokens in a request is the summation of `input_tokens`, `cache_creation_input_tokens`, and `cache_read_input_tokens`.
    child_attributes:
      cache_creation:
        type: object | null
        required: true
        description: Breakdown of cached tokens by TTL
        child_attributes:
          ephemeral_1h_input_tokens:
            type: integer
            default: 0
            required: true
            description: The number of input tokens used to create the 1 hour cache entry.
            required_range: x >= 0
          ephemeral_5m_input_tokens:
            type: integer
            default: 0
            required: true
            description: The number of input tokens used to create the 5 minute cache entry.
            required_range: x >= 0
      cache_creation_input_tokens:
        type: integer | null
        required: true
        description: The number of input tokens used to create the cache entry.
        required_range: x >= 0
        examples: 2051
      cache_read_input_tokens:
        type: integer | null
        required: true
        description: The number of input tokens read from the cache.
        required_range: x >= 0
        examples: 2051
      input_tokens:
        type: integer
        required: true
        description: The number of input tokens which were used.
        required_range: x >= 0
        examples: 2095
      output_tokens:
        type: integer
        required: true
        description: The number of output tokens which were used.
```

----------------------------------------

TITLE: Refactor Code with Claude Code: Async/Await Conversion
DESCRIPTION: This prompt demonstrates how to use Claude Code for refactoring tasks, specifically converting an authentication module from using callbacks to async/await. It highlights the AI's capability in code modernization.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: Natural Language Prompt
CODE:
```
> refactor the authentication module to use async/await instead of callbacks
```

----------------------------------------

TITLE: Configure Claude Code GitHub Action with unified parameters
DESCRIPTION: This configuration example demonstrates how to use the `anthropics/claude-code-action@v1` GitHub Action. It shows the use of `anthropic_api_key` for authentication, an optional `prompt` for instructions, and `claude_args` for passing additional CLI arguments to Claude Code.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/github-actions

LANGUAGE: YAML
CODE:
```
- uses: anthropics/claude-code-action@v1
  with:
    anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
    prompt: "Your instructions here" # Optional
    claude_args: "--max-turns 5" # Optional CLI arguments
```

----------------------------------------

TITLE: Reference Project-Specific Hook Scripts using CLAUDE_PROJECT_DIR
DESCRIPTION: This snippet shows how to use the `CLAUDE_PROJECT_DIR` environment variable within a hook command to reference scripts located within your project directory. This ensures that scripts, like `check-style.sh`, are executed correctly regardless of Claude Code's current working directory. This is particularly useful for `PostToolUse` events where project-specific validation or cleanup is required.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Write|Edit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/check-style.sh"
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Enable Interleaved Thinking for Advanced Tool Use in Claude API
DESCRIPTION: This snippet demonstrates how to activate interleaved thinking in Claude 4 models, allowing Claude to perform internal reasoning between multiple tool calls. This is achieved by adding the `anthropic-beta: interleaved-thinking-2025-05-14` header to the API request, which can significantly improve the quality of responses for complex problems requiring sequential tool interactions.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: python
CODE:
```
response = client.messages.create(
    model="claude-sonnet-4-20250514",
    max_tokens=16000,
    thinking={
        "type": "enabled",
        "budget_tokens": 10000
    },
    tools=[calculator_tool, database_tool],
    extra_headers={
        "anthropic-beta": "interleaved-thinking-2025-05-14"
    },
    messages=[{
        "role": "user",
        "content": "What's the total revenue if we sold 150 units of product A at $50 each?"
    }]
)
```

----------------------------------------

TITLE: Make Markdown Formatter Script Executable
DESCRIPTION: This command makes the markdown_formatter.py script executable, allowing it to be run directly.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks-guide

LANGUAGE: bash
CODE:
```
chmod +x .claude/hooks/markdown_formatter.py
```

----------------------------------------

TITLE: Install Claude Code SDK and Dependencies
DESCRIPTION: Instructions for installing the `claude-code-sdk` Python package from PyPI and its required `@anthropic-ai/claude-code` Node.js dependency from NPM. Optionally, install IPython for interactive development.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-python

LANGUAGE: Shell
CODE:
```
pip install claude-code-sdk
npm install -g @anthropic-ai/claude-code  # Required dependency
```

LANGUAGE: Shell
CODE:
```
pip install ipython
```

----------------------------------------

TITLE: Integrate Plaid for Banking Data with Claude Code
DESCRIPTION: Analyze, troubleshoot, and optimize Plaid integrations, including banking data and financial account linking, by adding its MCP server via SSE transport.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: Shell
CODE:
```
claude mcp add --transport sse plaid https://api.dashboard.plaid.com/mcp/sse
```

----------------------------------------

TITLE: API Response Schema for Listing Models
DESCRIPTION: Defines the structure of the successful 200 OK response when listing available models. It includes an array of model objects, each with release date, display name, unique ID, and type, along with pagination metadata.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list

LANGUAGE: APIDOC
CODE:
```
Response (200 OK):
  Content-Type: application/json
  data: object[] (required)
    created_at: string (required)
      Description: RFC 3339 datetime string representing the time at which the model was released. May be set to an epoch value if the release date is unknown.
      Examples: "2025-02-19T00:00:00Z"
    display_name: string (required)
      Description: A human-readable name for the model.
      Examples: "Claude 3.7 Sonnet"
    id: string (required)
      Description: Unique model identifier.
      Examples: "claude-3-7-sonnet-20250219"
    type: enum<string> (required, default: model)
      Description: Object type. For Models, this is always "model".
      Available options: model
  first_id: string | null (required)
    Description: First ID in the data list. Can be used as the before_id for the previous page.
  has_more: boolean (required)
    Description: Indicates if there are more results in the requested page direction.
  last_id: string | null (required)
    Description: Last ID in the data list. Can be used as the after_id for the next page.
```

----------------------------------------

TITLE: Sending Client Tool Result with Images to Claude
DESCRIPTION: This JSON example shows how to return a `tool_result` to Claude that includes both text and image content. The `content` field is an array of content blocks, allowing for rich media results from client-side tools, with images encoded in base64.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: JSON
CODE:
```
{
  "role": "user",
  "content": [
    {
      "type": "tool_result",
      "tool_use_id": "toolu_01A09q90qw90lq917835lq9",
      "content": [
        {"type": "text", "text": "15 degrees"},
        {
          "type": "image",
          "source": {
            "type": "base64",
            "media_type": "image/jpeg",
            "data": "/9j/4AAQSkZJRg..."
          }
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Make API Request with Fine-grained Tool Streaming (Shell)
DESCRIPTION: This example demonstrates how to use fine-grained tool streaming with the Anthropic API. It sends a message to Claude to write a long poem to a file using the `make_file` tool, enabling streaming of the `lines_of_text` parameter without buffering or JSON validation. Note the `anthropic-beta` header.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/fine-grained-tool-streaming

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "content-type: application/json" \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -H "anthropic-beta: fine-grained-tool-streaming-2025-05-14" \
  -d '{
    "model": "claude-sonnet-4-20250514",
    "max_tokens": 65536,
    "tools": [
      {
        "name": "make_file",
        "description": "Write text to a file",
        "input_schema": {
          "type": "object",
          "properties": {
            "filename": {
              "type": "string",
              "description": "The filename to write text to"
            },
            "lines_of_text": {
              "type": "array",
              "description": "An array of lines of text to write to the file"
            }
          },
          "required": ["filename", "lines_of_text"]
        }
      }
    ],
    "messages": [
      {
        "role": "user",
        "content": "Can you write a long poem and make a file called poem.txt?"
      }
    ],
    "stream": true
  }' | jq '.usage'
```

----------------------------------------

TITLE: Integrate Netlify with Claude Code
DESCRIPTION: Create, deploy, and manage websites on Netlify, controlling aspects from secrets to form submissions, by adding its MCP server via HTTP transport.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: Shell
CODE:
```
claude mcp add --transport http netlify https://netlify-mcp.netlify.app/mcp
```

----------------------------------------

TITLE: Upload Image to Claude Files API
DESCRIPTION: This example demonstrates how to upload an image to the Claude Files API. This method is recommended for images used repeatedly or to avoid encoding overhead, allowing the image to be referenced by its file ID in subsequent API calls.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision

LANGUAGE: Shell
CODE:
```
# First, upload your image to the Files API
curl -X POST https://api.anthropic.com/v1/files \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -H "anthropic-beta: files-api-2025-04-14" \
  -F "file=@image.jpg"
```

----------------------------------------

TITLE: Install Claude Code CLI via NPM
DESCRIPTION: This command installs the Claude Code command-line interface globally using npm, making it accessible from any directory in your terminal. This is the initial step for setting up Claude Code.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/overview

LANGUAGE: bash
CODE:
```
npm install -g @anthropic-ai/claude-code
```

----------------------------------------

TITLE: Sending Empty Client Tool Result to Claude
DESCRIPTION: This JSON example illustrates how to send a `tool_result` message to Claude when a client-side tool execution yields no explicit content. It still requires the `tool_use_id` to identify the original tool request.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: JSON
CODE:
```
{
  "role": "user",
  "content": [
    {
      "type": "tool_result",
      "tool_use_id": "toolu_01A09q90qw90lq917835lq9"
    }
  ]
}
```

----------------------------------------

TITLE: Important OpenAI SDK Compatibility Limitations
DESCRIPTION: This section details the most substantial differences in API behavior when using the OpenAI SDK with Anthropic's API, including ignored parameters, unsupported input types, and how system messages are handled.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk

LANGUAGE: APIDOC
CODE:
```
API behavior differences:
- The "strict" parameter for function calling is ignored; tool use JSON is not guaranteed to follow supplied schema.
- Audio input is not supported; it will be ignored and stripped from input.
- Prompt caching is not supported (but available in the native Anthropic SDK).
- System/developer messages are hoisted and concatenated to the beginning of the conversation, as Anthropic only supports a single initial system message.
- Most unsupported fields are silently ignored rather than producing errors.
```

----------------------------------------

TITLE: Provide text input to Claude Code
DESCRIPTION: Explains two methods for providing text input to Claude Code: directly as a command-line argument for simple queries or via standard input (stdin) using a pipe for more dynamic or larger inputs.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-headless

LANGUAGE: Bash
CODE:
```
# Direct argument
claude -p "Explain this code"
```

LANGUAGE: Bash
CODE:
```
# From stdin
echo "Explain this code" | claude -p
```

----------------------------------------

TITLE: Anthropic Messages API: POST /v1/messages Endpoint and Examples
DESCRIPTION: Comprehensive documentation for the Anthropic Messages API endpoint, including its purpose, required headers, request body structure, and an example successful response. It also provides a cURL code example for making requests.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
POST /v1/messages

Description: Send a structured list of input messages with text and/or image content, and the model will generate the next message in the conversation. Can be used for either single queries or stateless multi-turn conversations.

Request Headers:
  anthropic-beta: string[] (Optional)
    Description: Optional header to specify the beta version(s) you want to use. To use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.
  anthropic-version: string (Required)
    Description: The version of the Anthropic API you want to use. Read more about versioning and our version history here.
  x-api-key: string (Required)
    Description: Your unique API key for authentication. This key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the Console. Each key is scoped to a Workspace.

Request Body (JSON):
  model: string (Required) - The name of the model to use, e.g., "claude-3-7-sonnet-20250219".
  max_tokens: integer (Required) - The maximum number of tokens to generate in the response, e.g., 1024.
  messages: array of objects (Required) - A list of messages to send.
    - role: string ("user" or "assistant") - The role of the message sender.
    - content: string or array of objects - The content of the message, which can be text or a mix of text and image content.

Response (200 OK - JSON):
  content: array of objects - The generated content from the model.
    - text: string - The text content of the message, e.g., "Hi! My name is Claude."
    - type: string - The type of content, e.g., "text".
  id: string - Unique identifier for the message, e.g., "msg_013Zva2CMHLNnXjNJJKqJ2EF".
  model: string - The model that generated the response, e.g., "claude-3-7-sonnet-20250219".
  role: string - The role of the message sender (always "assistant" for responses).
  stop_reason: string or null - The reason the model stopped generating, e.g., "end_turn".
  stop_sequence: string or null - The stop sequence that caused the model to stop.
  type: string - The type of object, e.g., "message".
  usage: object - Token usage statistics.
    - input_tokens: integer - Number of tokens in the input, e.g., 2095.
    - output_tokens: integer - Number of tokens in the output, e.g., 503.

Response (4XX Error):
  Indicates client-side errors (e.g., invalid input, authentication failure).
```

LANGUAGE: cURL
CODE:
```
curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --data \
'{
    "model": "claude-3-7-sonnet-20250219",
    "max_tokens": 1024,
    "messages": [
        {"role": "user", "content": "Hello, world"}
    ]
}'
```

LANGUAGE: JSON
CODE:
```
{
  "content": [
    {
      "text": "Hi! My name is Claude.",
      "type": "text"
    }
  ],
  "id": "msg_013Zva2CMHLNnXjNJJKqJ2EF",
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "input_tokens": 2095,
    "output_tokens": 503
  }
}
```

----------------------------------------

TITLE: Install Anthropic Python SDK
DESCRIPTION: Installs the Anthropic Python SDK into the currently active virtual environment using pip.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/get-started

LANGUAGE: Shell
CODE:
```
pip install anthropic
```

----------------------------------------

TITLE: Command-Line Usage: Text Output Example
DESCRIPTION: Illustrates the default text output format when using Claude Code from the command line to explain a file. This shows a simple query for code explanation.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: bash
CODE:
```
claude -p "Explain file src/components/Header.tsx"
# Output: This is a React component showing...
```

----------------------------------------

TITLE: API Parameter: Tool Definitions
DESCRIPTION: Defines tools the model may use. Includes `name`, `description`, and `input_schema`. Model may return `tool_use` blocks, which can be run and results returned via `tool_result` blocks. Supports client and server tools.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
tools

object[]

Definitions of tools that the model may use.

If you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.

There are two types of tools: **client tools** and **server tools**. The behavior described below applies to client tools. For [server tools](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/overview#server-tools), see their individual documentation as each has its own behavior (e.g., the [web search tool](https://docs.anthropic.com/en/docs/agents-and-tools/tool-use/web-search-tool)).

Each tool definition includes:

* `name`: Name of the tool.
* `description`: Optional, but strongly-recommended description of the tool.
* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.
```

LANGUAGE: JSON
CODE:
```
[
  {
    "name": "get_stock_price",
    "description": "Get the current stock price for a given ticker symbol.",
    "input_schema": {
      "type": "object",
      "properties": {
        "ticker": {
          "type": "string",
          "description": "The stock ticker symbol, e.g. AAPL for Apple Inc."
        }
      },
      "required": ["ticker"]
    }
  }
]
```

----------------------------------------

TITLE: Claude's Explanation of the Code Fix
DESCRIPTION: Illustrates the final response from Claude after a successful code fix, providing a detailed text explanation of the syntax error, the specific change made, and the reasoning behind it, including code diffs for clarity.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: JSON
CODE:
```
{
  "id": "msg_01IjKlMnOpQrStUvWxYzAb",
  "model": "claude-opus-4-20250514",
  "stop_reason": "end_turn",
  "role": "assistant",
  "content": [
    {
      "type": "text",
      "text": "I've fixed the syntax error in your primes.py file. The issue was in the `get_primes` function at line 19. There was a missing colon (:) at the end of the for loop line.\n\nHere's what I changed:\n\nFrom:\n```python\nfor num in range(2, limit + 1)\n```\n\nTo:\n```python\nfor num in range(2, limit + 1):\n```\n\nIn Python, a colon is required at the end of statements that start a new code block, such as for loops, if statements, function definitions, etc. Without the colon, Python raises a syntax error because it doesn't know where the code block begins.\n\nYour code should now run correctly. The function will properly generate a list of prime numbers up to the specified limit."
    }
  ]
}
```

----------------------------------------

TITLE: Set Anthropic API Key Environment Variable
DESCRIPTION: Sets the `ANTHROPIC_API_KEY` environment variable, which the Anthropic SDKs automatically use for authentication. This example is for macOS and Linux.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/get-started

LANGUAGE: Shell
CODE:
```
export ANTHROPIC_API_KEY='your-api-key-here'
```

----------------------------------------

TITLE: Example .mcp.json Configuration File
DESCRIPTION: Illustrates the structure of the `.mcp.json` file created when a project-scoped MCP server is added, detailing its `mcpServers` object with command, args, and env properties.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "shared-server": {
      "command": "/path/to/server",
      "args": [],
      "env": {}
    }
  }
}
```

----------------------------------------

TITLE: Add MCP Server from Inline JSON Configuration
DESCRIPTION: Provides examples for adding an MCP server directly from a JSON string using the `claude mcp add-json` command. It demonstrates both basic syntax and a detailed example for a `stdio` server, including `command`, `args`, and `env` properties.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: shell
CODE:
```
claude mcp add-json <name> '<json>'
```

LANGUAGE: shell
CODE:
```
claude mcp add-json weather-api '{"type":"stdio","command":"/path/to/weather-cli","args":["--api-key","abc123"],"env":{"CACHE_DIR":"/tmp"}}'
```

----------------------------------------

TITLE: Example Streaming API Response for Claude Tool Use
DESCRIPTION: This section provides an example of the streaming response received from the Anthropic API when a tool-use request is made. It illustrates the various event types (`message_start`, `content_block_start`, `ping`, `content_block_delta`, `content_block_stop`, `message_delta`, `message_stop`) and how text and tool input JSON are streamed incrementally, including partial JSON updates for tool parameters.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming

LANGUAGE: JSON
CODE:
```
event: message_start
data: {"type":"message_start","message":{"id":"msg_014p7gG3wDgGV9EUtLvnow3U","type":"message","role":"assistant","model":"claude-opus-4-20250514","stop_sequence":null,"usage":{"input_tokens":472,"output_tokens":2},"content":[],"stop_reason":null}}

event: content_block_start
data: {"type":"content_block_start","index":0,"content_block":{"type":"text","text":""}}

event: ping
data: {"type": "ping"}

event: content_block_delta
data: {"type":"content_block_delta","index":0,"delta":{"type":"text_delta","text":"Okay"}}

event: content_block_delta
data: {"type":"content_block_delta","index":0,"delta":{"type":"text_delta","text":","}}

event: content_block_delta
data: {"type":"content_block_delta","index":0,"delta":{"type":"text_delta","text":" let"}}

event: content_block_delta
data: {"type":"content_block_delta","index":0,"delta":{"type":"text_delta","text":"'s"}}

event: content_block_delta
data: {"type":"content_block_delta","index":0,"delta":{"type":"text_delta","text":" check"}}

event: content_block_delta
data: {"type":"content_block_delta","index":0,"delta":{"type":"text_delta","text":" the"}}

event: content_block_delta
data: {"type":"content_block_delta","index":0,"delta":{"type":"text_delta","text":" weather"}}

event: content_block_delta
data: {"type":"content_block_delta","index":0,"delta":{"type":"text_delta","text":" for"}}

event: content_block_delta
data: {"type":"content_block_delta","index":0,"delta":{"type":"text_delta","text":" San"}}

event: content_block_delta
data: {"type":"content_block_delta","index":0,"delta":{"type":"text_delta","text":" Francisco"}}

event: content_block_delta
data: {"type":"content_block_delta","index":0,"delta":{"type":"text_delta","text":","}}

event: content_block_delta
data: {"type":"content_block_delta","index":0,"delta":{"type":"text_delta","text":" CA"}}

event: content_block_delta
data: {"type":"content_block_delta","index":0,"delta":{"type":"text_delta","text":":"}}

event: content_block_stop
data: {"type":"content_block_stop","index":0}

event: content_block_start
data: {"type":"content_block_start","index":1,"content_block":{"type":"tool_use","id":"toolu_01T1x1fJ34qAmk2tNTrN7Up6","name":"get_weather","input":{}}}

event: content_block_delta
data: {"type":"content_block_delta","index":1,"delta":{"type":"input_json_delta","partial_json":""}}

event: content_block_delta
data: {"type":"content_block_delta","index":1,"delta":{"type":"input_json_delta","partial_json":"{\"location\":"}}

event: content_block_delta
data: {"type":"content_block_delta","index":1,"delta":{"type":"input_json_delta","partial_json":" \"San"}}

event: content_block_delta
data: {"type":"content_block_delta","index":1,"delta":{"type":"input_json_delta","partial_json":" Francisc"}}

event: content_block_delta
data: {"type":"content_block_delta","index":1,"delta":{"type":"input_json_delta","partial_json":"o,"}}

event: content_block_delta
data: {"type":"content_block_delta","index":1,"delta":{"type":"input_json_delta","partial_json":" CA\""}}

event: content_block_delta
data: {"type":"content_block_delta","index":1,"delta":{"type":"input_json_delta","partial_json":", "}}

event: content_block_delta
data: {"type":"content_block_delta","index":1,"delta":{"type":"input_json_delta","partial_json":"\"unit\": \"fah"}}

event: content_block_delta
data: {"type":"content_block_delta","index":1,"delta":{"type":"input_json_delta","partial_json":"renheit\"}"}}

event: content_block_stop
data: {"type":"content_block_stop","index":1}

event: message_delta
data: {"type":"message_delta","delta":{"stop_reason":"tool_use","stop_sequence":null},"usage":{"output_tokens":89}}

event: message_stop
```

----------------------------------------

TITLE: cURL Request to List Anthropic Models
DESCRIPTION: Example cURL command to retrieve a list of available models from the Anthropic API. It includes necessary headers for authentication using an API key and specifying the API version.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list

LANGUAGE: cURL
CODE:
```
curl https://api.anthropic.com/v1/models \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01"
```

----------------------------------------

TITLE: SessionStart Hook Input for Claude Code
DESCRIPTION: Example JSON input for the `SessionStart` hook, specifying the `source` of the session initiation (e.g., 'startup').

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "session_id": "abc123",
  "transcript_path": "~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl",
  "hook_event_name": "SessionStart",
  "source": "startup"
}
```

----------------------------------------

TITLE: Stream Text Output from Claude Code SDK
DESCRIPTION: This snippet shows how to retrieve and stream text output from the Claude Code SDK. It demonstrates querying the client and iterating through messages to print text content as it arrives, providing real-time feedback.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-python

LANGUAGE: python
CODE:
```
# Default text output with streaming
async with ClaudeSDKClient() as client:
    await client.query("Explain file src/components/Header.tsx")

    # Stream text as it arrives
    async for message in client.receive_response():
        if hasattr(message, 'content'):
            for block in message.content:
                if hasattr(block, 'text'):
                    print(block.text, end='', flush=True)
                    # Output streams in real-time: This is a React component showing...
```

----------------------------------------

TITLE: Claude Multi-Tool Chaining Dialogue Example
DESCRIPTION: Illustrates a multi-turn conversation where Claude chains `get_location` and `get_weather` tool calls to answer a user's query, demonstrating the flow of information and tool result integration into a natural language response.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: Dialogue
CODE:
```
| --- | --- |
| User | What’s the weather like where I am? |
| Assistant | <thinking>To answer this, I first need to determine the user’s location using the get_location tool. Then I can pass that location to the get_weather tool to find the current weather there.</thinking>[Tool use for get_location] |
| User | [Tool result for get_location with matching id and result of San Francisco, CA] |
| Assistant | [Tool use for get_weather with the following input]{ “location”: “San Francisco, CA”, “unit”: “fahrenheit” } |
| User | [Tool result for get_weather with matching id and result of “59°F (15°C), mostly cloudy”] |
| Assistant | Based on your current location in San Francisco, CA, the weather right now is 59°F (15°C) and mostly cloudy. It’s a fairly cool and overcast day in the city. You may want to bring a light jacket if you’re heading outside. |
```

----------------------------------------

TITLE: Install Claude Code SDK (Python)
DESCRIPTION: Installs the Claude Code SDK for Python using pip. It also installs the required NPM dependency and optionally IPython for interactive development.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: Bash
CODE:
```
pip install claude-code-sdk
npm install -g @anthropic-ai/claude-code  # Required dependency
pip install ipython # Optional
```

----------------------------------------

TITLE: Send a Basic Message Request to Anthropic Claude (Python)
DESCRIPTION: Demonstrates how to make a fundamental API call to the Anthropic Messages API using Python. It initializes the client with an API key from environment variables and sends a simple 'Hello, Claude' message to a specified model, then prints the full response object.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: python
CODE:
```
import anthropic
import os

message = anthropic.Anthropic(api_key=os.environ.get("ANTHROPIC_API_KEY")).messages.create(
    model="claude-opus-4-20250514",
    max_tokens=1024,
    messages=[
        {"role": "user", "content": "Hello, Claude"}
    ]
)
print(message)
```

----------------------------------------

TITLE: Get Bug Fix Recommendations
DESCRIPTION: Ask Claude Code for suggestions on how to fix specific issues, such as resolving `@ts-ignore` comments in a file. Claude Code can provide actionable recommendations to address code problems.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/common-workflows

LANGUAGE: CLI
CODE:
```
> suggest a few ways to fix the @ts-ignore in user.ts
```

----------------------------------------

TITLE: Enable Extended Thinking in Claude API
DESCRIPTION: This Python snippet demonstrates how to enable Claude's extended thinking feature by setting the `thinking` parameter to `{"type": "enabled", "budget_tokens": 10000}` in the `messages.create` call. It shows how to iterate through the response content to identify and print both `thinking` and `text` blocks, allowing developers to access Claude's internal reasoning.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: python
CODE:
```
import anthropic

client = anthropic.Anthropic()

response = client.messages.create(
    model="claude-sonnet-4-20250514",
    max_tokens=16000,
    thinking={
        "type": "enabled",
        "budget_tokens": 10000
    },
    messages=[{
        "role": "user",
        "content": "Are there an infinite number of prime numbers such that n mod 4 == 3?"
    }]
)

# The response will contain summarized thinking blocks and text blocks
for block in response.content:
    if block.type == "thinking":
        print(f"\nThinking summary: {block.thinking}")
    elif block.type == "text":
        print(f"\nResponse: {block.text}")
```

----------------------------------------

TITLE: API Content Type for JSON Requests and Responses
DESCRIPTION: The Anthropic API exclusively accepts and returns JSON in request and response bodies. The 'content-type: application/json' header is required for requests, which is automatically managed by Client SDKs.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/overview

LANGUAGE: APIDOC
CODE:
```
Request Header:
  content-type: application/json (Required)
    Description: Specifies the request body format as JSON.
```

----------------------------------------

TITLE: Default Text Output with Streaming (Python)
DESCRIPTION: This Python snippet demonstrates how to stream text output from the Claude SDK. It uses an asynchronous client to query and then iterates through received messages, printing the text content as it's received.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: python
CODE:
```
async with ClaudeSDKClient() as client:
    await client.query("Explain file src/components/Header.tsx")

    # Stream text as it arrives
    async for message in client.receive_response():
        if hasattr(message, 'content'):
            for block in message.content:
                if hasattr(block, 'text'):
                    print(block.text, end='', flush=True)
                    # Output streams in real-time: This is a React component showing...
```

----------------------------------------

TITLE: Example Claude Code settings.json configuration
DESCRIPTION: This example `settings.json` file demonstrates how to configure permissions for shell commands and file access, and set environment variables for Claude Code. It illustrates how to allow specific Bash commands and file reads, while denying others, and how to enable telemetry and configure OTLP metrics.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/settings

LANGUAGE: json
CODE:
```
{
  "permissions": {
    "allow": [
      "Bash(npm run lint)",
      "Bash(npm run test:*)",
      "Read(~/.zshrc)"
    ],
    "deny": [
      "Bash(curl:*)",
      "Read(./.env)",
      "Read(./.env.*)",
      "Read(./secrets/**)"
    ]
  },
  "env": {
    "CLAUDE_CODE_ENABLE_TELEMETRY": "1",
    "OTEL_METRICS_EXPORTER": "otlp"
  }
}
```

----------------------------------------

TITLE: Python SDK One-Shot Query
DESCRIPTION: Shows a simple, one-shot query using the `query` function from the Python SDK. This is suitable for straightforward requests where streaming is not required.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: Python
CODE:
```
from claude_code_sdk import query, ClaudeCodeOptions

async for message in query(
    prompt="Analyze system performance",
    options=ClaudeCodeOptions(system_prompt="You are a performance engineer")
):
    if type(message).__name__ == "ResultMessage":
        print(message.result)
```

----------------------------------------

TITLE: Anthropic Messages API Request Body Parameters
DESCRIPTION: Defines the structure and requirements for the request body of the Anthropic Messages API, detailing each field, its type, and constraints.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
Body (application/json):
  model: string (required)
    Description: The model that will complete your prompt.
    Constraints: Required string length: 1 - 256
    Examples: "claude-3-7-sonnet-20250219"
  messages: object[] (required)
    Description: Input messages. Our models are trained to operate on alternating 'user' and 'assistant' conversational turns. When creating a new 'Message', you specify the prior conversational turns with the 'messages' parameter, and the model then generates the next 'Message' in the conversation. Consecutive 'user' or 'assistant' turns in your request will be combined into a single turn. Each input message must be an object with a 'role' and 'content'. You can specify a single 'user'-role message, or you can include multiple 'user' and 'assistant' messages. If the final message uses the 'assistant' role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.
    Constraints: There is a limit of 100,000 messages in a single request.
    messages.content: string | object[] (required)
      Description: Each input message 'content' may be either a single 'string' or an array of content blocks, where each block has a specific 'type'. Using a 'string' for 'content' is shorthand for an array of one content block of type "text". Starting with Claude 3 models, you can also send image content blocks.
      Content Blocks:
        type: "text" (string)
          text: string
        type: "image" (object)
          source: object
            type: "base64" (string)
            media_type: "image/jpeg", "image/png", "image/gif", "image/webp" (string)
            data: string (base64 encoded image data)
    messages.role: enum<string> (required)
      Available options: "user", "assistant"
  max_tokens: integer (required)
    Description: The maximum number of tokens to generate before stopping. Note that our models may stop *before* reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate. Different models have different maximum values for this parameter.
    Constraints: Required range: x >= 1
    Examples: 1024
  container: string | null
    Description: Container identifier for reuse across requests.
  mcp_servers: object[]
    Description: MCP servers to be utilized in this request.
    mcp_servers.name: string (required)
    mcp_servers.type: enum<string> (required)
      Available options: "url"
    mcp_servers.url: string (required)
    mcp_servers.authorization_token: string | null
    mcp_servers.tool_configuration: object | null
      mcp_servers.tool_configuration.allowed_tools: string[] | null
      mcp_servers.tool_configuration.enabled: boolean | null
  metadata: object
    Description: An object describing metadata about the request.
    metadata.user_id: string | null
      Description: An external identifier for the user who is associated with the request. This should be a uuid, hash value, or other opaque identifier. Anthropic may use this id to help detect abuse. Do not include any identifying information such as name, email address, or phone number.
      Constraints: Maximum length: 256
      Examples: "13803d75-b4b5-4c3e-b2a2-6f21399b021b"
  service_tier: (no details provided)
```

----------------------------------------

TITLE: Quick Start Example: Using OpenAI SDK with Anthropic API
DESCRIPTION: This example demonstrates how to configure the OpenAI SDK to interact with the Anthropic API. It shows how to set the base URL, use an Anthropic API key, and specify a Claude model for chat completions.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk

LANGUAGE: Python
CODE:
```
from openai import OpenAI

client = OpenAI(
    api_key="ANTHROPIC_API_KEY",  # Your Anthropic API key
    base_url="https://api.anthropic.com/v1/"  # Anthropic's API endpoint
)

response = client.chat.completions.create(
    model="claude-opus-4-20250514", # Anthropic model name
    messages=[
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": "Who are you?"}
    ],
)

print(response.choices[0].message.content)
```

----------------------------------------

TITLE: API Parameter: System Prompt
DESCRIPTION: Provides context and instructions to Claude, such as specifying a goal or role. This parameter accepts a string or an array of objects.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
system

stringobject[]

System prompt.

A system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).
```

LANGUAGE: JSON
CODE:
```
[
  {
    "text": "Today's date is 2024-06-01.",
    "type": "text"
  }
]
```

LANGUAGE: JSON
CODE:
```
"Today's date is 2023-01-01."
```

----------------------------------------

TITLE: Stream and Print Response
DESCRIPTION: This Python function streams the response from the Claude client and prints the text content block by block, ensuring that output is displayed as it arrives.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: python
CODE:
```
async def stream_print(client, prompt):
    await client.query(prompt)
    async for msg in client.receive_response():
        if hasattr(msg, 'content'):
            for block in msg.content:
                if hasattr(block, 'text'):
                    print(block.text, end='', flush=True)
```

----------------------------------------

TITLE: Claude's Final JSON Response After Tool Result
DESCRIPTION: Displays the final JSON response from Claude after it has processed the tool_result, incorporating the information into a natural language answer for the user.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: JSON
CODE:
```
{
  "id": "msg_01Aq9w938a90dw8q",
  "model": "claude-opus-4-20250514",
  "stop_reason": "stop_sequence",
  "role": "assistant",
  "content": [
    {
      "type": "text",
      "text": "The current weather in San Francisco is 15 degrees Celsius (59 degrees Fahrenheit). It's a cool day in the city by the bay!"
    }
  ]
}
```

----------------------------------------

TITLE: Claude Tool Use API Request with Image and Schema
DESCRIPTION: Example JSON payload for making an API request to Claude that includes tool definitions, a tool choice, and a user message with an embedded image. It defines a 'record_summary' tool with a schema for extracting key colors, a general description, and an estimated year from an image.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: JSON
CODE:
```
{
    "tools": [{
        "name": "record_summary",
        "description": "Record a summary of an image.",
        "input_schema": {
            "type": "object",
            "properties": {
                "key_colors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "r": { "type": "number", "description": "red value [0.0, 1.0]" },
                            "g": { "type": "number", "description": "green value [0.0, 1.0]" },
                            "b": { "type": "number", "description": "blue value [0.0, 1.0]" },
                            "name": { "type": "string", "description": "Human-readable color name in snake_case, e.g. \"olive_green\" or \"turquoise\"" }
                        },
                        "required": [ "r", "g", "b", "name" ]
                    },
                    "description": "Key colors in the image. Limit to less than four."
                },
                "description": {
                    "type": "string",
                    "description": "Image description. One to two sentences max."
                },
                "estimated_year": {
                    "type": "integer",
                    "description": "Estimated year that the image was taken, if it is a photo. Only set this if the image appears to be non-fictional. Rough estimates are okay!"
                }
            },
            "required": [ "key_colors", "description" ]
        }
    }],
    "tool_choice": {"type": "tool", "name": "record_summary"},
    "messages": [
        {"role": "user", "content": [
            {"type": "image", "source": {
                "type": "base64",
                "media_type": "'$IMAGE_MEDIA_TYPE'",
                "data": "'$IMAGE_BASE64'"
            }},
            {"type": "text", "text": "Describe this image."}
        ]}
    ]
}
```

----------------------------------------

TITLE: OpenAI Compatible API Request Fields Support
DESCRIPTION: Details the support status for various request fields when using the OpenAI compatible API with Anthropic's models. It specifies which fields are fully supported, ignored, or have specific constraints, including simple fields and those related to tools/functions.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk

LANGUAGE: APIDOC
CODE:
```
Request Fields:
  Simple Fields:
    - Field: model
      Support Status: Use Claude model names
    - Field: max_tokens
      Support Status: Fully supported
    - Field: max_completion_tokens
      Support Status: Fully supported
    - Field: stream
      Support Status: Fully supported
    - Field: stream_options
      Support Status: Fully supported
    - Field: top_p
      Support Status: Fully supported
    - Field: parallel_tool_calls
      Support Status: Fully supported
    - Field: stop
      Support Status: All non-whitespace stop sequences work
    - Field: temperature
      Support Status: Between 0 and 1 (inclusive). Values greater than 1 are capped at 1.
    - Field: n
      Support Status: Must be exactly 1
    - Field: logprobs
      Support Status: Ignored
    - Field: metadata
      Support Status: Ignored
    - Field: response_format
      Support Status: Ignored
    - Field: prediction
      Support Status: Ignored
    - Field: presence_penalty
      Support Status: Ignored
    - Field: frequency_penalty
      Support Status: Ignored
    - Field: seed
      Support Status: Ignored
    - Field: service_tier
      Support Status: Ignored
    - Field: audio
      Support Status: Ignored
    - Field: logit_bias
      Support Status: Ignored
    - Field: store
      Support Status: Ignored
    - Field: user
      Support Status: Ignored
    - Field: modalities
      Support Status: Ignored
    - Field: top_logprobs
      Support Status: Ignored
    - Field: Reasoning_effort
      Support Status: Ignored
  Tools / Functions Fields:
    - tools[n].function fields:
      - Field: name
        Support Status: Fully supported
      - Field: description
        Support Status: Fully supported
      - Field: parameters
        Support Status: Fully supported
      - Field: strict
        Support Status: Ignored
    - functions[n] fields: (OpenAI has deprecated the `functions` field and suggests using `tools` instead.)
      - Field: name
        Support Status: Fully supported
      - Field: description
        Support Status: Fully supported
      - Field: parameters
        Support Status: Fully supported
      - Field: strict
        Support Status: Ignored
```

----------------------------------------

TITLE: Shell Examples for Claude Code OpenTelemetry Configuration
DESCRIPTION: These shell script examples illustrate various ways to configure OpenTelemetry for Claude Code using environment variables. Scenarios include enabling console debugging with short intervals, setting up OTLP/gRPC export, configuring Prometheus export, using multiple exporters, and defining distinct endpoints for metrics and logs.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage

LANGUAGE: shell
CODE:
```
# Console debugging (1-second intervals)
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=console
export OTEL_METRIC_EXPORT_INTERVAL=1000

# OTLP/gRPC
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=otlp
export OTEL_EXPORTER_OTLP_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

# Prometheus
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=prometheus

# Multiple exporters
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=console,otlp
export OTEL_EXPORTER_OTLP_PROTOCOL=http/json

# Different endpoints/backends for metrics and logs
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=otlp
export OTEL_LOGS_EXPORTER=otlp
export OTEL_EXPORTER_OTLP_METRICS_PROTOCOL=http/protobuf
export OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://metrics.company.com:4318
export OTEL_EXPORTER_OTLP_LOGS_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://logs.company.com:4317
```

----------------------------------------

TITLE: Constructing the Claude API tool use system prompt template
DESCRIPTION: This template illustrates how Anthropic constructs the system prompt when the `tools` parameter is used in an API request. It combines formatting instructions, JSON Schema tool definitions, any user-specified system prompt, and tool configuration to provide the necessary context for the model to operate properly.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: APIDOC
CODE:
```
In this environment you have access to a set of tools you can use to answer the user's question.
{{ FORMATTING INSTRUCTIONS }}
String and scalar parameters should be specified as is, while lists and objects should use JSON format. Note that spaces for string values are not stripped. The output is not expected to be valid XML and is parsed with regular expressions.
Here are the functions available in JSONSchema format:
{{ TOOL DEFINITIONS IN JSON SCHEMA }}
{{ USER SYSTEM PROMPT }}
{{ TOOL CONFIGURATION }}
```

----------------------------------------

TITLE: Send Message to Anthropic Claude API with Python SDK
DESCRIPTION: This example shows how to use the Anthropic Python SDK to send a message to the Claude API. It covers client initialization with an API key and creating a message with a specified model and user content, then printing the response.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/overview

LANGUAGE: Python
CODE:
```
import anthropic

client = anthropic.Anthropic(
    # defaults to os.environ.get("ANTHROPIC_API_KEY")
    api_key="my_api_key",
)
message = client.messages.create(
    model="claude-opus-4-20250514",
    max_tokens=1024,
    messages=[
        {"role": "user", "content": "Hello, Claude"}
    ]
)
print(message.content)
```

----------------------------------------

TITLE: Claude Code Event Analysis for Tool Usage and Performance
DESCRIPTION: Provides insights into Claude Code interactions through event data. Focuses on analyzing tool usage patterns, including frequently used tools, success rates, execution times, and error patterns. Also covers performance monitoring by tracking API request durations and tool execution times.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/monitoring-usage

LANGUAGE: APIDOC
CODE:
```
Event Analysis:

Tool Usage Patterns:
  - Most frequently used tools
  - Tool success rates
  - Average tool execution times
  - Error patterns by tool type

Performance Monitoring:
  - API request durations
  - Tool execution times
```

----------------------------------------

TITLE: Example of Chunking Behavior With Fine-grained Streaming
DESCRIPTION: Illustrates the improved, more complete chunking behavior and reduced delay (3s) when fine-grained streaming is enabled, showing larger, more coherent JSON chunks.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/fine-grained-tool-streaming

LANGUAGE: JSON
CODE:
```
Chunk 1: '{"query": "TypeScript 5.0 5.1 5.2 5.3'
Chunk 2: ' new features comparison'
```

----------------------------------------

TITLE: Claude Code CLI Basic Usage
DESCRIPTION: Demonstrates the basic command-line usage of the Claude Code SDK, utilizing the `--print` flag for non-interactive mode and specifying system prompts, allowed tools, and permission modes.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: bash
CODE:
```
claude -p "Analyze system performance" \
  --append-system-prompt "You are a performance engineer" \
  --allowedTools "Bash,Read,WebSearch" \
  --permission-mode acceptEdits \
  --cwd /path/to/project
```

----------------------------------------

TITLE: API Authentication with x-api-key Header
DESCRIPTION: All requests to the Anthropic API must include an 'x-api-key' header for authentication. Client SDKs handle this automatically, but direct integrations require manual inclusion of this header.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/overview

LANGUAGE: APIDOC
CODE:
```
Request Header:
  x-api-key: string (Required)
    Description: Your Anthropic API key.
    Usage: Set when constructing a client in SDKs or manually in direct integrations.
```

----------------------------------------

TITLE: Multiturn Conversation Example with Image Input
DESCRIPTION: This table illustrates a two-turn conversation flow with Claude, demonstrating how to ask initial questions about images and then follow up with new images and comparative questions. It highlights the interactive nature of multimodal conversations.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision

LANGUAGE: APIDOC
CODE:
```
| Role | Content |
| --- | --- |
| User | Image 1: [Image 1] Image 2: [Image 2] How are these images different? |
| Assistant | [Claude’s response] |
| User | Image 1: [Image 3] Image 2: [Image 4] Are these images similar to the first two? |
| Assistant | [Claude’s response] |
```

----------------------------------------

TITLE: Define Environment Variables for Claude Code Sessions
DESCRIPTION: Specifies environment variables that will be applied to every Claude Code session. This allows for consistent environment setup across different interactions. The value should be a JSON object where keys are variable names and values are their corresponding strings.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/settings

LANGUAGE: JSON
CODE:
```
{
  "FOO": "bar"
}
```

----------------------------------------

TITLE: Handle Multiple Matches for Text Replacement in Claude Tool Result
DESCRIPTION: If Claude's `str_replace` command finds multiple occurrences of the target text, return this JSON structure. The error message guides Claude to provide more context for a unique match.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: JSON
CODE:
```
{
  "role": "user",
  "content": [
    {
      "type": "tool_result",
      "tool_use_id": "toolu_01A09q90qw90lq917835lq9",
      "content": "Error: Found 3 matches for replacement text. Please provide more context to make a unique match.",
      "is_error": true
    }
  ]
}
```

----------------------------------------

TITLE: Install Claude Code CLI with npm
DESCRIPTION: Installs the Claude Code command-line interface globally using npm. This requires Node.js 18+ to be pre-installed. Avoid using `sudo` to prevent permission issues.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup

LANGUAGE: shell
CODE:
```
npm install -g @anthropic-ai/claude-code
```

----------------------------------------

TITLE: Report Tool Execution Error in Anthropic API
DESCRIPTION: Demonstrates how to report an error that occurs during tool execution by setting `"is_error": true` within the `tool_result` content block. This informs Claude that the tool call failed.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: json
CODE:
```
{
  "role": "user",
  "content": [
    {
      "type": "tool_result",
      "tool_use_id": "toolu_01A09q90qw90lq917835lq9",
      "content": "ConnectionError: the weather service API is not available (HTTP 500)",
      "is_error": true
    }
  ]
}
```

----------------------------------------

TITLE: Configure MCP Server with Environment Variable Expansion in JSON
DESCRIPTION: Demonstrates how to define MCP server configurations in `.mcp.json` files using environment variable expansion. It supports `${VAR}` for direct expansion and `${VAR:-default}` for fallback values, applicable to fields like `command`, `args`, `env`, `url`, and `headers`.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "api-server": {
      "type": "sse",
      "url": "${API_BASE_URL:-https://api.example.com}/mcp",
      "headers": {
        "Authorization": "Bearer ${API_KEY}"
      }
    }
  }
}
```

----------------------------------------

TITLE: Anthropic Claude API Response with Tool Use Block
DESCRIPTION: This JSON example illustrates an API response from Claude where the `stop_reason` is `tool_use`. It includes a `tool_use` content block detailing the tool's `id`, `name`, and `input` parameters, indicating that Claude intends to use a client-side tool.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: JSON
CODE:
```
{
  "id": "msg_01Aq9w938a90dw8q",
  "model": "claude-opus-4-20250514",
  "stop_reason": "tool_use",
  "role": "assistant",
  "content": [
    {
      "type": "text",
      "text": "<thinking>I need to use the get_weather, and the user wants SF, which is likely San Francisco, CA.</thinking>"
    },
    {
      "type": "tool_use",
      "id": "toolu_01A09q90qw90lq917835lq9",
      "name": "get_weather",
      "input": {"location": "San Francisco, CA", "unit": "celsius"}
    }
  ]
}
```

----------------------------------------

TITLE: Plan Mode in Python
DESCRIPTION: Shows how to implement Plan Mode using the Claude Code SDK in Python. This involves initializing the `ClaudeSDKClient` with specific options to enable the plan mode for code analysis.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: python
CODE:
```
from claude_code_sdk import ClaudeSDKClient, ClaudeCodeOptions

async with ClaudeSDKClient(
    options=ClaudeCodeOptions(permission_mode='plan')
) as client:
    await client.query("Your prompt here")
```

----------------------------------------

TITLE: Anthropic Text Editor Tool API Reference
DESCRIPTION: Details the Anthropic Text Editor Tool, including its purpose, compatible Claude models, specific tool versions, and key functionalities. It highlights version differences, such as the availability of the "undo_edit" command.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: APIDOC
CODE:
```
Text Editor Tool:
  Description: An Anthropic-defined tool for viewing and modifying text files, assisting with debugging, fixing, and improving code or other text documents.
  Compatible Models:
    Claude 4 Opus & Sonnet:
      Tool Version: text_editor_20250429
      Notes: Does not include undo_edit command.
    Claude Sonnet 3.7:
      Tool Version: text_editor_20250124
      Notes: Includes undo_edit command.
    Claude Sonnet 3.5:
      Tool Version: text_editor_20241022
      Required Header: computer-use-2024-10-22 (beta)
      Notes: Includes undo_edit command.
  General Availability: Claude 4 and Sonnet 3.7.
  Use Cases:
    - Code debugging: Identify and fix bugs.
    - Code refactoring: Improve structure, readability, performance.
    - Documentation generation: Add docstrings, comments, READMEs.
    - Test creation: Create unit tests.
```

----------------------------------------

TITLE: Claude Code Terminal Setup for Line Breaks
DESCRIPTION: Instructions for configuring line break behavior in Claude Code, specifically mentioning the Shift+Enter binding for iTerm2 and VS Code terminals via the `/terminal-setup` command.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/interactive-mode

LANGUAGE: APIDOC
CODE:
```
Configure your preferred line break behavior in terminal settings. Run `/terminal-setup` to install Shift+Enter binding for iTerm2 and VS Code terminals.
```

----------------------------------------

TITLE: Integrate Airtable with Claude Code
DESCRIPTION: Read and write records, and manage bases and tables in Airtable by adding its MCP server. This integration requires setting the `AIRTABLE_API_KEY` as an environment variable.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: Shell
CODE:
```
claude mcp add airtable --env AIRTABLE_API_KEY=YOUR_KEY -- npx -y airtable-mcp-server
```

----------------------------------------

TITLE: Describe Single Image with Claude using Python (URL)
DESCRIPTION: Shows how to send a single image to Claude for description using the Anthropic Python SDK by providing a publicly accessible URL to the image. This method avoids embedding raw image data and is useful for images already hosted online. It uses the claude-sonnet-4-20250514 model.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision

LANGUAGE: python
CODE:
```
message = client.messages.create(
    model="claude-sonnet-4-20250514",
    max_tokens=1024,
    messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "image",
                    "source": {
                        "type": "url",
                        "url": "https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg"
                    }
                },
                {
                    "type": "text",
                    "text": "Describe this image."
                }
            ]
        }
    ]
)
```

----------------------------------------

TITLE: Configure Claude Code Telemetry and Reporting Behaviors
DESCRIPTION: Details the default behaviors of Statsig (metrics), Sentry (errors), and Anthropic API (/bug reports) across different API providers (Anthropic, Vertex, Bedrock) and how to modify them using environment variables. It also includes a global opt-out variable.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/data-usage

LANGUAGE: APIDOC
CODE:
```
API Provider Configuration:
  Anthropic API:
    Statsig (Metrics):
      Default: On
      Disable: DISABLE_TELEMETRY=1
    Sentry (Errors):
      Default: On
      Disable: DISABLE_ERROR_REPORTING=1
    Anthropic API (/bug reports):
      Default: On
      Disable: DISABLE_BUG_COMMAND=1
  Vertex API:
    Statsig (Metrics):
      Default: Off
      Enable: CLAUDE_CODE_USE_VERTEX=1
    Sentry (Errors):
      Default: Off
      Enable: CLAUDE_CODE_USE_VERTEX=1
    Anthropic API (/bug reports):
      Default: Off
      Enable: CLAUDE_CODE_USE_VERTEX=1
  Bedrock API:
    Statsig (Metrics):
      Default: Off
      Enable: CLAUDE_CODE_USE_BEDROCK=1
    Sentry (Errors):
      Default: Off
      Enable: CLAUDE_CODE_USE_BEDROCK=1
    Anthropic API (/bug reports):
      Default: Off
      Enable: CLAUDE_CODE_USE_BEDROCK=1
Global Opt-out:
  CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC: Disables all non-essential traffic (error reporting, telemetry, bug reporting) when using Bedrock or Vertex.
```

----------------------------------------

TITLE: Multi-turn Conversations in Python
DESCRIPTION: Provides Python examples for managing multi-turn conversations with the Claude Code SDK. It demonstrates using `ClaudeSDKClient` for persistent sessions and the `query` function with session management options.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: python
CODE:
```
import asyncio
from claude_code_sdk import ClaudeSDKClient, ClaudeCodeOptions, query

# Method 1: Using ClaudeSDKClient for persistent conversations
async def multi_turn_conversation():
    async with ClaudeSDKClient() as client:
        # First query
        await client.query("Let's refactor the payment module")
        async for msg in client.receive_response():
            # Process first response
            pass

        # Continue in same session
        await client.query("Now add comprehensive error handling")
        async for msg in client.receive_response():
            # Process continuation
            pass

        # The conversation context is maintained throughout

# Method 2: Using query function with session management
async def resume_session():
    # Continue most recent conversation
    async for message in query(
        prompt="Now refactor this for better performance",
        options=ClaudeCodeOptions(continue_conversation=True)
    ):
        if type(message).__name__ == "ResultMessage":
            print(message.result)

    # Resume specific session
    async for message in query(
        prompt="Update the tests",
        options=ClaudeCodeOptions(
            resume="550e8400-e29b-41d4-a716-446655440000",
            max_turns=3
        )
    ):
        if type(message).__name__ == "ResultMessage":
            print(message.result)

# Run the examples
asyncio.run(multi_turn_conversation())
asyncio.run(resume_session())
```

----------------------------------------

TITLE: Basic Streaming Request to Anthropic API with cURL
DESCRIPTION: Demonstrates how to initiate a streaming conversation with the Anthropic Claude API using a cURL command, setting necessary headers and request body parameters like model, messages, max tokens, and enabling streaming.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --data \
'{
  "model": "claude-opus-4-20250514",
  "messages": [{"role": "user", "content": "Hello"}],
  "max_tokens": 256,
  "stream": true
}'
```

----------------------------------------

TITLE: Handle No Matches for Text Replacement in Claude Tool Result
DESCRIPTION: If Claude's `str_replace` command fails to find any match for the specified text, return this JSON structure. The error message prompts Claude to re-check the text.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: JSON
CODE:
```
{
  "role": "user",
  "content": [
    {
      "type": "tool_result",
      "tool_use_id": "toolu_01A09q90qw90lq917835lq9",
      "content": "Error: No match found for replacement. Please check your text and try again.",
      "is_error": true
    }
  ]
}
```

----------------------------------------

TITLE: Streamed Input JSON Delta for Tool Use
DESCRIPTION: Illustrates a `content_block_delta` event containing a `partial_json` string for `tool_use` input, which can be accumulated to form the complete tool input object.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming

LANGUAGE: HTTP Stream Event
CODE:
```
event: content_block_delta
data: {"type": "content_block_delta","index": 1,"delta": {"type": "input_json_delta","partial_json": "{\"location\": \"San Fra"}}}
```

----------------------------------------

TITLE: Claude Code OpenTelemetry Events Reference
DESCRIPTION: This section outlines the various events exported by Claude Code as OpenTelemetry logs. Each event includes its name, description, and specific attributes, providing detailed insights into user interactions, tool executions, and API requests/errors.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage

LANGUAGE: APIDOC
CODE:
```
Events:
  claude_code.user_prompt:
    Description: Logged when a user submits a prompt
    Attributes:
      event.name: "user_prompt"
      event.timestamp: ISO 8601 timestamp
      prompt_length: Length of the prompt
      prompt: Prompt content (redacted by default, enable with OTEL_LOG_USER_PROMPTS=1)
  claude_code.tool_result:
    Description: Logged when a tool completes execution
    Attributes:
      event.name: "tool_result"
      event.timestamp: ISO 8601 timestamp
      name: Name of the tool
      success: "true" or "false"
      duration_ms: Execution time in milliseconds
      error: Error message (if failed)
  claude_code.api_request:
    Description: Logged for each API request to Claude
    Attributes:
      event.name: "api_request"
      event.timestamp: ISO 8601 timestamp
      model: Model used (e.g., “claude-3-5-sonnet-20241022”)
      cost_usd: Estimated cost in USD
      duration_ms: Request duration in milliseconds
      input_tokens: Number of input tokens
      output_tokens: Number of output tokens
      cache_read_tokens: Number of tokens read from cache
      cache_creation_tokens: Number of tokens used for cache creation
  claude_code.api_error:
    Description: Logged when an API request to Claude fails
    Attributes:
      event.name: "api_error"
      event.timestamp: ISO 8601 timestamp
      model: Model used (e.g., “claude-3-5-sonnet-20241022”)
      error: Error message
      status_code: HTTP status code (if applicable)
      duration_ms: Request duration in milliseconds
      attempt: Attempt number (for retried requests)
```

----------------------------------------

TITLE: JSON Output with Metadata (Command Line)
DESCRIPTION: This example shows how to request JSON output from the Claude CLI, including metadata. The `--output-format json` flag is used to specify the desired output format.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: bash
CODE:
```
claude -p "How does the data layer work?" --output-format json
```

----------------------------------------

TITLE: Claude Code SDK Python Best Practices
DESCRIPTION: Provides essential Python best practices for the Claude Code SDK, covering context manager usage for client lifecycle, running multiple agents concurrently, implementing robust error handling with specific exceptions, and collecting full responses including metadata like cost.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: python
CODE:
```
import asyncio
from claude_code_sdk import ClaudeSDKClient, ClaudeCodeOptions

# Always use context managers
async with ClaudeSDKClient() as client:
    await client.query("Analyze this code")
    async for msg in client.receive_response():
        # Process streaming messages
        pass

# Run multiple agents concurrently
async with ClaudeSDKClient() as reviewer, ClaudeSDKClient() as tester:
    await asyncio.gather(
        reviewer.query("Review main.py"),
        tester.query("Write tests for main.py")
    )

# Error handling
from claude_code_sdk import CLINotFoundError, ProcessError

try:
    async with ClaudeSDKClient() as client:
        # Your code here
        pass
except CLINotFoundError:
    print("Install CLI: npm install -g @anthropic-ai/claude-code")
except ProcessError as e:
    print(f"Process error: {e}")

# Collect full response with metadata
async def get_response(client, prompt):
    await client.query(prompt)
    text = []
    async for msg in client.receive_response():
        if hasattr(msg, 'content'):
            for block in msg.content:
                if hasattr(block, 'text'):
                    text.append(block.text)
        if type(msg).__name__ == "ResultMessage":
            return {'text': ''.join(text), 'cost': msg.total_cost_usd}

```

----------------------------------------

TITLE: Claude's JSON Response for Single Tool Use
DESCRIPTION: Illustrates the JSON structure of Claude's response when it decides to invoke a tool, including the tool_use content block with the tool's ID, name, and input parameters.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: JSON
CODE:
```
{
  "id": "msg_01Aq9w938a90dw8q",
  "model": "claude-opus-4-20250514",
  "stop_reason": "tool_use",
  "role": "assistant",
  "content": [
    {
      "type": "text",
      "text": "<thinking>I need to call the get_weather function, and the user wants SF, which is likely San Francisco, CA.</thinking>"
    },
    {
      "type": "tool_use",
      "id": "toolu_01A09q90qw90lq917835lq9",
      "name": "get_weather",
      "input": {"location": "San Francisco, CA", "unit": "celsius"}
    }
  ]
}
```

----------------------------------------

TITLE: Sending Images to Claude for Analysis (Vision API)
DESCRIPTION: This example demonstrates how to send images to Claude using the Messages API for visual analysis. It supports both `base64`-encoded images and `url`-referenced images, with supported media types including `image/jpeg`, `image/png`, `image/gif`, and `image/webp`. The request includes a text prompt alongside the image.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages-examples

LANGUAGE: Shell
CODE:
```
#!/bin/sh

# Option 1: Base64-encoded image
IMAGE_URL="https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg"
IMAGE_MEDIA_TYPE="image/jpeg"
IMAGE_BASE64=$(curl "$IMAGE_URL" | base64)

curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --data \
'{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "messages": [
        {"role": "user", "content": [
            {"type": "image", "source": {
                "type": "base64",
                "media_type": "'$IMAGE_MEDIA_TYPE'",
                "data": "'$IMAGE_BASE64'"
            }},
            {"type": "text", "text": "What is in the above image?"}
        ]}
    ]
}'

# Option 2: URL-referenced image
curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --data \
'{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "messages": [
        {"role": "user", "content": [
            {"type": "image", "source": {
                "type": "url",
                "url": "https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg"
            }},
            {"type": "text", "text": "What is in the above image?"}
        ]}
    ]
}'
```

LANGUAGE: JSON
CODE:
```
{
  "id": "msg_01EcyWo6m4hyW8KHs2y2pei5",
  "type": "message",
  "role": "assistant",
  "content": [
    {
      "type": "text",
      "text": "This image shows an ant, specifically a close-up view of an ant. The ant is shown in detail, with its distinct head, antennae, and legs clearly visible. The image is focused on capturing the intricate details and features of the ant, likely taken with a macro lens to get an extreme close-up perspective."
    }
  ],
  "model": "claude-opus-4-20250514",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "usage": {
    "input_tokens": 1551,
    "output_tokens": 71
  }
}
```

----------------------------------------

TITLE: Anthropic API Supported Headers
DESCRIPTION: A comprehensive list of HTTP headers recognized and supported by the Anthropic API, detailing their purpose and compatibility status for direct use, especially when the OpenAI SDK does not manage them automatically.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk

LANGUAGE: APIDOC
CODE:
```
Supported Headers:
- x-ratelimit-limit-requests: Fully supported
- x-ratelimit-limit-tokens: Fully supported
- x-ratelimit-remaining-requests: Fully supported
- x-ratelimit-remaining-tokens: Fully supported
- x-ratelimit-reset-requests: Fully supported
- x-ratelimit-reset-tokens: Fully supported
- retry-after: Fully supported
- request-id: Fully supported
- openai-version: Always 2020-10-01
- authorization: Fully supported
- openai-processing-ms: Always empty
```

----------------------------------------

TITLE: Get structured JSON output from Claude Code
DESCRIPTION: Shows how to request structured data in JSON format, including metadata, from Claude Code using the `--output-format json` flag for programmatic parsing.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-headless

LANGUAGE: Bash
CODE:
```
claude -p "How does the data layer work?" --output-format json
```

----------------------------------------

TITLE: Accepted Claude model strings for Anthropic Python SDK
DESCRIPTION: Lists the valid string identifiers for various Claude models supported by the Anthropic API, including Claude 4, Claude 3.7, Claude 3.5, and Claude 3 series, along with their respective aliases.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/client-sdks

LANGUAGE: Python
CODE:
```
# Claude 4 Models
"claude-opus-4-20250514"
"claude-opus-4-0"  # alias
"claude-sonnet-4-20250514"
"claude-sonnet-4-0"  # alias

# Claude 3.7 Models
"claude-3-7-sonnet-20250219"
"claude-3-7-sonnet-latest"  # alias

# Claude 3.5 Models
"claude-3-5-haiku-20241022"
"claude-3-5-haiku-latest"  # alias
"claude-3-5-sonnet-20241022"
"claude-3-5-sonnet-latest"  # alias
"claude-3-5-sonnet-20240620"  # previous version

# Claude 3 Models
"claude-3-opus-20240229"
"claude-3-opus-latest"  # alias
"claude-3-sonnet-20240229"
"claude-3-haiku-20240307"
```

----------------------------------------

TITLE: Define Allowed Permission Rules for Tool Use
DESCRIPTION: Specifies an array of permission rules that explicitly allow certain tool uses within Claude Code. This grants Claude permission to execute specific commands or access resources without further confirmation.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/settings

LANGUAGE: JSON
CODE:
```
[
  "Bash(git diff:*)"
]
```

----------------------------------------

TITLE: Debug Output Example
DESCRIPTION: Demonstrates the debug output when using the `claude --debug` command to observe hook execution details. It shows the sequence of events from hook matching to command execution and completion.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: bash
CODE:
```
[DEBUG] Executing hooks for PostToolUse:Write
[DEBUG] Getting matching hook commands for PostToolUse with query: Write
[DEBUG] Found 1 hook matchers in settings
[DEBUG] Matched 1 hooks for query "Write"
[DEBUG] Found 1 hook commands to execute
[DEBUG] Executing hook command: <Your command> with timeout 60000ms
[DEBUG] Hook command completed with status 0: <Your stdout>

```

----------------------------------------

TITLE: Accepted Claude Model Strings in Ruby
DESCRIPTION: This snippet lists the accepted string values for specifying Claude models within the Anthropic Ruby SDK. It categorizes models by their series (Claude 4, 3.7, 3.5, 3) and includes specific versions and 'alias' strings.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/client-sdks

LANGUAGE: Ruby
CODE:
```
# Claude 4 Models
:"claude-opus-4-20250514"
:"claude-opus-4-0"  # alias
:"claude-sonnet-4-20250514"
:"claude-sonnet-4-0"  # alias

# Claude 3.7 Models
:"claude-3-7-sonnet-20250219"
:"claude-3-7-sonnet-latest"  # alias

# Claude 3.5 Models
:"claude-3-5-haiku-20241022"
:"claude-3-5-haiku-latest"  # alias
:"claude-3-5-sonnet-20241022"
:"claude-3-5-sonnet-latest"  # alias
:"claude-3-5-sonnet-20240620"  # previous version

# Claude 3 Models
:"claude-3-opus-20240229"
:"claude-3-opus-latest"  # alias
:"claude-3-sonnet-20240229"
:"claude-3-haiku-20240307"
```

----------------------------------------

TITLE: Python: Specialized Agents with Streaming and Custom Prompts
DESCRIPTION: Demonstrates creating specialized AI agents in Python using the `claude_code_sdk`. This includes an SRE agent with streaming responses and a development agent for code refactoring with custom system prompts.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: python
CODE:
```
import asyncio
from claude_code_sdk import ClaudeSDKClient, ClaudeCodeOptions

async def specialized_agents():
    # SRE incident response agent with streaming
    async with ClaudeSDKClient(
        options=ClaudeCodeOptions(
            system_prompt="You are an SRE expert. Diagnose issues systematically and provide actionable solutions.",
            max_turns=3
        )
    ) as sre_agent:
        await sre_agent.query("API is down, investigate")

        # Stream the diagnostic process
        async for message in sre_agent.receive_response():
            if hasattr(message, 'content'):
                for block in message.content:
                    if hasattr(block, 'text'):
                        print(block.text, end='', flush=True)

    # Legal review agent with custom prompt
    async with ClaudeSDKClient(
        options=ClaudeCodeOptions(
            append_system_prompt="Always include comprehensive error handling and unit tests.",
            max_turns=2
        )
    ) as dev_agent:
        await dev_agent.query("Refactor this function")

        # Collect full response
        full_response = []
        async for message in dev_agent.receive_response():
            if type(message).__name__ == "ResultMessage":
                print(message.result)

asyncio.run(specialized_agents())
```

----------------------------------------

TITLE: Anthropic API Message Response Example (JSON)
DESCRIPTION: A sample JSON response object from the Anthropic V1 Messages API, illustrating a successful message exchange with content, ID, model, role, stop reason, and usage details.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: json
CODE:
```
{
  "content": [
    {
      "text": "Hi! My name is Claude.",
      "type": "text"
    }
  ],
  "id": "msg_013Zva2CMHLNnXjNJJKqJ2EF",
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "input_tokens": 2095,
    "output_tokens": 503
  }
}
```

----------------------------------------

TITLE: Sending Successful Client Tool Result to Claude
DESCRIPTION: This JSON example demonstrates how to send a successful `tool_result` message back to Claude after a client-side tool has been executed. It includes the `tool_use_id` to link to the original request and the tool's output as a simple string `content`.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: JSON
CODE:
```
{
  "role": "user",
  "content": [
    {
      "type": "tool_result",
      "tool_use_id": "toolu_01A09q90qw90lq917835lq9",
      "content": "15 degrees"
    }
  ]
}
```

----------------------------------------

TITLE: PostToolUse Hook Event JSON for Feedback to Claude
DESCRIPTION: This JSON structure enables `PostToolUse` hooks to provide feedback to Claude after a tool has executed. It can `block` further processing with a `reason` or add `additionalContext` for Claude's consideration.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "decision": "block" | undefined,
  "reason": "Explanation for decision",
  "hookSpecificOutput": {
    "hookEventName": "PostToolUse",
    "additionalContext": "Additional information for Claude"
  }
}
```

----------------------------------------

TITLE: Advanced Claude Code SDK Client Configuration Example
DESCRIPTION: This example illustrates an advanced asynchronous usage of the `ClaudeSDKClient` with custom `ClaudeCodeOptions`. It demonstrates setting a custom working directory, adding additional context directories, configuring model and thinking parameters, fine-tuning tool permissions, and passing custom settings and CLI arguments for a more tailored interaction with the Claude Code SDK.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-python

LANGUAGE: Python
CODE:
```
import asyncio
from claude_code_sdk import ClaudeSDKClient, ClaudeCodeOptions

async def advanced_agent():
    """Example showcasing advanced configuration options"""

    async with ClaudeSDKClient(
        options=ClaudeCodeOptions(
            # Custom working directory and additional context
            cwd="/project/root",
            add_dirs=["/shared/libs", "/common/utils"],

            # Model and thinking configuration
            model="claude-3-5-sonnet-20241022",
            max_thinking_tokens=12000,

            # Advanced tool control
            allowed_tools=["Read", "Write", "Bash", "Grep"],
            disallowed_tools=["WebSearch", "Bash(rm*)"],

            # Custom settings and CLI args
            settings='{"editor": "vim", "theme": "dark"}',
            extra_args={
                "--verbose": None,
                "--timeout": "300"
            }
        )
    ) as client:
        await client.query("Analyze the codebase structure")

        async for message in client.receive_response():
            if hasattr(message, 'content'):
                for block in message.content:
                    if hasattr(block, 'text'):
                        print(block.text, end='', flush=True)

asyncio.run(advanced_agent())
```

----------------------------------------

TITLE: Anthropic API Response Headers
DESCRIPTION: Lists standard headers included in every Anthropic API response, providing unique request identifiers and organization IDs.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/getting-started

LANGUAGE: APIDOC
CODE:
```
Response Headers:
  request-id:
    Type: string
    Description: A globally unique identifier for the request.
  anthropic-organization-id:
    Type: string
    Description: The organization ID associated with the API key used in the request.
```

----------------------------------------

TITLE: Send Single PDF Request to Anthropic Messages API
DESCRIPTION: Demonstrates how to send a single message request to the Anthropic API using `curl`, referencing a JSON file for the payload. This method is suitable for individual interactions with the Claude model.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/pdf-support

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "content-type: application/json" \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -d @request.json
```

----------------------------------------

TITLE: Claude Code NPM Package
DESCRIPTION: Claude Code is distributed via the NPM package manager. This snippet shows the command to install the package.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/data-usage

LANGUAGE: bash
CODE:
```
npm install @anthropic-ai/claude-code
```

----------------------------------------

TITLE: Debugging Claude Code
DESCRIPTION: Tips for debugging Claude Code deployments, including using the `/status` command for observability and setting the `ANTHROPIC_LOG` environment variable for detailed logging.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/third-party-integrations

LANGUAGE: bash
CODE:
```
# Use the claude /status slash command for observability
claude /status

# Set environment variable to log requests in debug mode
export ANTHROPIC_LOG=debug
```

----------------------------------------

TITLE: Code Refactoring Agent with System Prompt
DESCRIPTION: Illustrates how to configure an agent for code refactoring, emphasizing comprehensive error handling and unit tests in its system prompt. This example uses the command-line interface.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: bash
CODE:
```
claude -p "Refactor this function" \
  --append-system-prompt "Always include comprehensive error handling and unit tests."
```

----------------------------------------

TITLE: Send Message to Anthropic API with cURL
DESCRIPTION: Example cURL command to send a 'Hello, world' message to the Anthropic V1 Messages API, including necessary headers for authentication and content type.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: curl
CODE:
```
curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --data \
'{
    "model": "claude-3-7-sonnet-20250219",
    "max_tokens": 1024,
    "messages": [
        {"role": "user", "content": "Hello, world"}
    ]
}'
```

----------------------------------------

TITLE: Integrate Square APIs with Claude Code
DESCRIPTION: Use a Claude Code agent to build on Square APIs, covering payments, inventory, orders, and more, by adding its MCP server via SSE transport.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: Shell
CODE:
```
claude mcp add --transport sse square https://mcp.squareup.com/sse
```

----------------------------------------

TITLE: Call Anthropic Claude API (Python)
DESCRIPTION: Demonstrates how to make a basic API call to the Anthropic Claude messages endpoint using the Python SDK. It includes model selection, setting temperature, a system prompt, and a user message.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/get-started

LANGUAGE: Python
CODE:
```
import anthropic

client = anthropic.Anthropic()

message = client.messages.create(
    model="claude-opus-4-20250514",
    max_tokens=1000,
    temperature=1,
    system="You are a world-class poet. Respond only with short poems.",
    messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Why is the ocean salty?"
                }
            ]
        }
    ]
)
print(message.content)
```

----------------------------------------

TITLE: Migrating Claude Code GitHub Action from Beta to v1.0
DESCRIPTION: This snippet illustrates the key changes in input parameters when migrating from the beta version of the Claude Code GitHub Action to the stable v1.0 release. It highlights how old parameters like 'mode' and 'direct_prompt' are replaced or consolidated into new 'prompt' and 'claude_args' configurations.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/github-actions

LANGUAGE: YAML
CODE:
```
- uses: anthropics/claude-code-action@beta
  with:
    mode: "tag"
    direct_prompt: "Review this PR for security issues"
    anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
    custom_instructions: "Follow our coding standards"
    max_turns: "10"
    model: "claude-3-5-sonnet-20241022"
```

LANGUAGE: YAML
CODE:
```
- uses: anthropics/claude-code-action@v1
  with:
    prompt: "Review this PR for security issues"
    anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
    claude_args: |
      --system-prompt "Follow our coding standards"
      --max-turns 10
      --model claude-4-0-sonnet-20250805
```

----------------------------------------

TITLE: Accessing Claude Code Analytics
DESCRIPTION: Instructions on how to access the Claude Code analytics dashboard. This involves navigating to a specific URL within the Anthropic Console.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/analytics

LANGUAGE: APIDOC
CODE:
```
Access Analytics:
  Navigate to: https://console.anthropic.com/claude_code

Required Roles:
  - Primary Owner
  - Owner
  - Billing
  - Admin
  - Developer

Note: Users with 'User', 'Claude Code User', or 'Membership Admin' roles cannot access analytics.
```

----------------------------------------

TITLE: Configure Claude Code Hooks for Events Without Matchers
DESCRIPTION: This example demonstrates how to configure Claude Code hooks for specific events that do not utilize tool matchers, such as 'UserPromptSubmit'. For these events, the 'matcher' field is omitted, and the 'hooks' array directly contains the command configurations. This allows for actions to be triggered based on general system events rather than specific tool usage.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "hooks": {
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "/path/to/prompt-validator.py"
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Parse JSON Response with jq
DESCRIPTION: This example demonstrates how to use the `jq` command-line tool to parse a JSON response from the Claude CLI, extracting specific fields like the result and cost.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: bash
CODE:
```
# Parse JSON response with jq
result=$(claude -p "Generate code" --output-format json)
code=$(echo "$result" | jq -r '.result')
cost=$(echo "$result" | jq -r '.cost_usd')
```

----------------------------------------

TITLE: Install and Initialize Claude Code CLI
DESCRIPTION: This shell script demonstrates the quick setup for Claude Code. It includes commands to globally install the `@anthropic-ai/claude-code` package via npm, change into a project directory, and launch the `claude` command-line interface. Users will be prompted to log in upon their first use.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/index

LANGUAGE: Shell
CODE:
```
# Install Claude Code
npm install -g @anthropic-ai/claude-code

# Navigate to your project
cd your-awesome-project

# Start coding with Claude
claude
# You'll be prompted to log in on first use
```

----------------------------------------

TITLE: Claude Code API Reference
DESCRIPTION: This section provides API documentation for interacting with Claude Code, including details on models, providers, and common parameters.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/legal-and-compliance

LANGUAGE: APIDOC
CODE:
```
OpenAIModel:
  __init__(model_name: str, provider: str = 'openai')
    model_name: The name of the OpenAI model to use.
    provider: The provider to use (defaults to 'openai').

AnthropicModel:
  __init__(model_name: str, provider: str = 'anthropic')
    model_name: The name of the Anthropic model to use.
    provider: The provider to use (defaults to 'anthropic').

ClaudeCode:
  __init__(model: Union[OpenAIModel, AnthropicModel])
    model: An instance of OpenAIModel or AnthropicModel.

  generate_code(prompt: str, max_tokens: int = 1024, temperature: float = 0.7) -> str
    Generates code based on the provided prompt.
    prompt: The input prompt for code generation.
    max_tokens: The maximum number of tokens to generate.
    temperature: Controls the randomness of the output.
    Returns: The generated code as a string.

  debug_code(code: str, error_message: str) -> str
    Debugs the provided code given an error message.
    code: The code to debug.
    error_message: The error message associated with the code.
    Returns: The debugged code as a string.

  refactor_code(code: str, refactoring_instructions: str) -> str
    Refactors the provided code based on instructions.
    code: The code to refactor.
    refactoring_instructions: Instructions for refactoring.
    Returns: The refactored code as a string.
```

----------------------------------------

TITLE: Claude Model Tool Use Request Example
DESCRIPTION: Demonstrates the JSON structure of a `tool_use` content block generated by the Claude model when it decides to use a tool, including the tool's ID, name, and input parameters.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: json
CODE:
```
[
  {
    "type": "tool_use",
    "id": "toolu_01D7FLrfh4GYq7yT1ULFeyMV",
    "name": "get_stock_price",
    "input": { "ticker": "^GSPC" }
  }
]
```

----------------------------------------

TITLE: Pipe Data into Claude CLI for Processing
DESCRIPTION: Demonstrates how to pipe content from a file into the `claude` command-line interface (CLI) tool and direct its output to another file. This enables integrating Claude into existing shell scripts for various tasks, such as concisely explaining build errors.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/common-workflows

LANGUAGE: Shell
CODE:
```
cat build-error.txt | claude -p 'concisely explain the root cause of this build error' > output.txt
```

----------------------------------------

TITLE: Approve Pre-Tool Use Actions with Python Hook
DESCRIPTION: This Python script illustrates a `PreToolUse` hook that can automatically approve certain tool calls. It loads tool information from stdin and, as an example, auto-approves 'Read' operations for common documentation file types (.md, .mdx, .txt, .json). For approved cases, it prints a JSON output indicating approval and suppresses output in transcript mode.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: python
CODE:
```
#!/usr/bin/env python3
import json
import sys

# Load input from stdin
try:
    input_data = json.load(sys.stdin)
except json.JSONDecodeError as e:
    print(f"Error: Invalid JSON input: {e}", file=sys.stderr)
    sys.exit(1)

tool_name = input_data.get("tool_name", "")
tool_input = input_data.get("tool_input", {})

# Example: Auto-approve file reads for documentation files
if tool_name == "Read":
    file_path = tool_input.get("file_path", "")
    if file_path.endswith((".md", ".mdx", ".txt", ".json")):
        # Use JSON output to auto-approve the tool call
        output = {
            "decision": "approve",
            "reason": "Documentation file auto-approved",
            "suppressOutput": True  # Don't show in transcript mode
        }
        print(json.dumps(output))
        sys.exit(0)

# For other cases, let the normal permission flow proceed
sys.exit(0)
```

----------------------------------------

TITLE: Configure Data Scientist Subagent for SQL and BigQuery Analysis
DESCRIPTION: This configuration defines a 'data-scientist' subagent specialized in SQL and BigQuery operations. It outlines its purpose, the tools it uses (Bash, Read, Write), and its operational principles, including writing efficient SQL queries, using BigQuery command-line tools, and presenting data-driven findings.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sub-agents

LANGUAGE: YAML
CODE:
```
---
name: data-scientist
description: Data analysis expert for SQL queries, BigQuery operations, and data insights. Use proactively for data analysis tasks and queries.
tools: Bash, Read, Write
---
```

----------------------------------------

TITLE: Preserve Thinking Blocks in Multi-Turn Tool Use with Claude API
DESCRIPTION: This example illustrates how to maintain conversational context when using extended thinking with tools over multiple turns. It shows how to extract `thinking` and `tool_use` blocks from an initial Claude response and then re-include them in the `messages` array of a subsequent API call, ensuring Claude retains its internal reasoning and tool interaction history.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: python
CODE:
```
# First request - Claude responds with thinking and tool request
response = client.messages.create(
    model="claude-sonnet-4-20250514",
    max_tokens=16000,
    thinking={
        "type": "enabled",
        "budget_tokens": 10000
    },
    tools=[weather_tool],
    messages=[
        {"role": "user", "content": "What's the weather in Paris?"}
    ]
)

# Extract thinking block and tool use block
thinking_block = next((block for block in response.content
                      if block.type == 'thinking'), None)
tool_use_block = next((block for block in response.content
                      if block.type == 'tool_use'), None)

# Second request - Include thinking block and tool result
continuation = client.messages.create(
    model="claude-sonnet-4-20250514",
    max_tokens=16000,
    thinking={
        "type": "enabled",
        "budget_tokens": 10000
    },
    tools=[weather_tool],
    messages=[
        {"role": "user", "content": "What's the weather in Paris?"},
        # Notice that the thinking_block is passed in as well as the tool_use_block
        {"role": "assistant", "content": [thinking_block, tool_use_block]},
        {"role": "user", "content": [{
            "type": "tool_result",
            "tool_use_id": tool_use_block.id,
            "content": f"Current temperature: {weather_data['temperature']}°F"
        }]}
    ]
)
```

----------------------------------------

TITLE: Python Function for Safe Text Replacement with Single Match Enforcement
DESCRIPTION: This Python function performs text replacement in a file only if there is exactly one match for the old text. It returns an error message if no matches are found or if multiple matches exist, promoting precise and controlled modifications.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: Python
CODE:
```
def safe_replace(file_path, old_text, new_text):
    """Replace text only if there's exactly one match."""
    with open(file_path, 'r') as f:
        content = f.read()

    count = content.count(old_text)
    if count == 0:
        return "Error: No match found"
    elif count > 1:
        return f"Error: Found {count} matches"
    else:
        new_content = content.replace(old_text, new_text)
        with open(file_path, 'w') as f:
            f.write(new_content)
        return "Successfully replaced text"
```

----------------------------------------

TITLE: Open Claude Code Subagents Interface
DESCRIPTION: Run this command in Claude Code to open the interactive interface for managing and creating subagents.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sub-agents

LANGUAGE: Shell
CODE:
```
/agents
```

----------------------------------------

TITLE: Common JSON Fields for Claude Hook Event Output
DESCRIPTION: This JSON structure defines common optional fields applicable to all Claude hook types. It allows controlling whether Claude continues processing after the hook (`continue`), providing a `stopReason` if processing is halted, suppressing `stdout` from the transcript (`suppressOutput`), and displaying an optional `systemMessage` to the user.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "continue": true, // Whether Claude should continue after hook execution (default: true)
  "stopReason": "string", // Message shown when continue is false

  "suppressOutput": true, // Hide stdout from transcript mode (default: false)
  "systemMessage": "string" // Optional warning message shown to the user
}
```

----------------------------------------

TITLE: Anthropic List Models API Request Headers
DESCRIPTION: Details the required and optional HTTP headers for the Anthropic List Models API, including `anthropic-version`, `x-api-key` for authentication, and `anthropic-beta` for beta features.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/models-list

LANGUAGE: APIDOC
CODE:
```
anthropic-version: string (required)
  The version of the Anthropic API you want to use.
  Read more about versioning and our version history here.
x-api-key: string (required)
  Your unique API key for authentication.
  This key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the Console. Each key is scoped to a Workspace.
anthropic-beta: string[] (Optional)
  Optional header to specify the beta version(s) you want to use.
  To use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.
```

----------------------------------------

TITLE: Create Claude Message with Ruby SDK
DESCRIPTION: This Ruby code snippet demonstrates how to initialize the Anthropic client and send a message to the Claude API. It sets up a new client with an API key, then creates a message with a specified model, max tokens, and user content, printing the response.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/client-sdks

LANGUAGE: Ruby
CODE:
```
require "bundler/setup"
require "anthropic"

anthropic = Anthropic::Client.new(
  api_key: "my_api_key" # defaults to ENV["ANTHROPIC_API_KEY"]
)

message =
  anthropic.messages.create(
    max_tokens: 1024,
    messages: [{
      role: "user",
      content: "Hello, Claude"
    }],
    model: "claude-sonnet-4-20250514"
  )

puts(message.content)
```

----------------------------------------

TITLE: Example .mcp.json Configuration for Project-Scoped Servers
DESCRIPTION: This JSON snippet illustrates the standardized structure of the '.mcp.json' file, which stores configurations for project-scoped MCP servers. It defines server properties like the command to execute, arguments, and environment variables, and is typically checked into version control.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/mcp

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "shared-server": {
      "command": "/path/to/server",
      "args": [],
      "env": {}
    }
  }
}
```

----------------------------------------

TITLE: Install and Initialize Claude Code CLI
DESCRIPTION: This shell script demonstrates the quick setup for Claude Code. It includes commands to globally install the `@anthropic-ai/claude-code` package via npm, change into a project directory, and launch the `claude` command-line interface. Users will be prompted to log in upon their first use.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/overview

LANGUAGE: Shell
CODE:
```
# Install Claude Code
npm install -g @anthropic-ai/claude-code

# Navigate to your project
cd your-awesome-project

# Start coding with Claude
claude
# You'll be prompted to log in on first use
```

----------------------------------------

TITLE: Add Arguments to Custom Claude Slash Commands
DESCRIPTION: Illustrates how to make custom slash commands more flexible by incorporating the `$ARGUMENTS` placeholder within the command's prompt template. This allows users to pass additional input directly to the command, which is then substituted into the prompt before sending it to Claude.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/common-workflows

LANGUAGE: Shell
CODE:
```
echo 'Find and fix issue #$ARGUMENTS. Follow these steps: 1.\nUnderstand the issue described in the ticket 2. Locate the relevant code in\nour codebase 3. Implement a solution that addresses the root cause 4. Add\nappropriate tests 5. Prepare a concise PR description' >\n.claude/commands/fix-issue.md
```

LANGUAGE: Shell
CODE:
```
> /fix-issue 123
```

----------------------------------------

TITLE: Anthropic Claude API Response Usage Object (JSON)
DESCRIPTION: Illustrates the structure of the `usage` object within an Anthropic Claude API response. This object provides details on token consumption (input, output, cache) and explicitly indicates the `service_tier` that was assigned to the request.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/service-tiers

LANGUAGE: JSON
CODE:
```
{
  "usage": {
    "input_tokens": 410,
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "output_tokens": 585,
    "service_tier": "priority"
  }
}
```

----------------------------------------

TITLE: API Parameter: Stream Response
DESCRIPTION: Controls whether to incrementally stream the response using server-sent events. Refer to streaming documentation for details.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
stream

boolean

Whether to incrementally stream the response using server-sent events.

See [streaming](https://docs.anthropic.com/en/api/messages-streaming) for details.
```

----------------------------------------

TITLE: Send Message to Anthropic Claude API using cURL
DESCRIPTION: This snippet demonstrates how to make a direct HTTP POST request to the Anthropic Messages API using cURL. It includes essential headers for authentication and content type, along with a JSON payload specifying the Claude model, maximum tokens, and the user's message.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/overview

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --data \
'{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "messages": [
        {"role": "user", "content": "Hello, world"}
    ]
}'
```

----------------------------------------

TITLE: Claude Chain of Thought Prompt for Tool Use
DESCRIPTION: A recommended prompt for Claude Sonnet and Haiku models to encourage pre-tool call analysis, ensuring tools are used appropriately and preventing calls with missing required parameters. It guides the model to think within `<thinking>` tags before making a tool call.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: Text
CODE:
```
Answer the user's request using relevant tools (if they are available). Before calling a tool, do some analysis within <thinking></thinking> tags. First, think about which of the provided tools is the relevant tool to answer the user's request. Second, go through each of the required parameters of the relevant tool and determine if the user has directly provided or given enough information to infer a value. When deciding if the parameter can be inferred, carefully consider all the context to see if it supports a specific value. If all of the required parameters are present or can be reasonably inferred, close the thinking tag and proceed with the tool call. BUT, if one of the values for a required parameter is missing, DO NOT invoke the function (not even with fillers for the missing params) and instead, ask the user to provide the missing parameters. DO NOT ask for more information on optional parameters if it is not provided.
```

----------------------------------------

TITLE: Anthropic Streaming: Full Server-Sent Event Flow Example
DESCRIPTION: Provides a comprehensive example of the server-sent event (SSE) flow for streaming messages from the Anthropic API. It includes `message_start`, `content_block_start`, `content_block_delta`, `content_block_stop`, `message_delta`, and `message_stop` events, demonstrating the complete lifecycle of a streaming response.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: json
CODE:
```
event: message_start
data: {"type": "message_start", "message": {"id": "msg_1nZdL29xx5MUA1yADyHTEsnR8uuvGzszyY", "type": "message", "role": "assistant", "content": [], "model": "claude-opus-4-20250514", "stop_reason": null, "stop_sequence": null, "usage": {"input_tokens": 25, "output_tokens": 1}}}

event: content_block_start
data: {"type": "content_block_start", "index": 0, "content_block": {"type": "text", "text": ""}}

event: content_block_delta
data: {"type": "content_block_delta", "index": 0, "delta": {"type": "text_delta", "text": "Hello"}}

event: content_block_delta
data: {"type": "content_block_delta", "index": 0, "delta": {"type": "text_delta", "text": "!"}}

event: content_block_stop
data: {"type": "content_block_stop", "index": 0}

event: message_delta
data: {"type": "message_delta", "delta": {"stop_reason": "end_turn", "stop_sequence":null}, "usage": {"output_tokens": 15}}

event: message_stop
data: {"type": "message_stop"}
```

----------------------------------------

TITLE: Install Anthropic Vertex AI Client SDK
DESCRIPTION: Provides the command to install the Python client SDK for interacting with Anthropic models on Google Cloud's Vertex AI platform, including the `google-cloud-aiplatform` and `anthropic[vertex]` packages.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/claude-on-vertex-ai

LANGUAGE: Python
CODE:
```
pip install -U google-cloud-aiplatform "anthropic[vertex]"
```

----------------------------------------

TITLE: Claude Code Permission System Overview
DESCRIPTION: Explains Claude Code's tiered permission system designed to balance functionality and safety. It categorizes tool types, provides examples, and specifies when approval is required and the behavior for 'Yes, don’t ask again' actions.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/iam

LANGUAGE: APIDOC
CODE:
```
Claude Code Permission System:

Tiered system balancing power and safety.

| Tool Type          | Example              | Approval Required | 'Yes, don’t ask again' Behavior |
|--------------------|----------------------|-------------------|--------------------------------|
| Read-only          | File reads, LS, Grep | No                | N/A                            |
| Bash Commands      | Shell execution      | Yes               | Permanently per project dir/cmd |
| File Modification  | Edit/write files     | Yes               | Until session end              |
```

----------------------------------------

TITLE: SessionStart Hook Event JSON for Loading Context
DESCRIPTION: This JSON structure allows `SessionStart` hooks to load additional context at the beginning of a session. The `additionalContext` string is concatenated from multiple hooks if present.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: JSON
CODE:
```
{
  "hookSpecificOutput": {
    "hookEventName": "SessionStart",
    "additionalContext": "My additional context here"
  }
}
```

----------------------------------------

TITLE: Changing Claude Code Output Style
DESCRIPTION: Demonstrates how to change the output style in Claude Code using slash commands. This can be done interactively via a menu or directly by specifying the style name.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/output-styles

LANGUAGE: bash
CODE:
```
run /output-style
run /output-style [style]
```

----------------------------------------

TITLE: Custom Permission Prompt Tool Definition (JSON)
DESCRIPTION: Defines the expected JSON payload structure for a custom permission prompt tool. The tool must return a JSON object indicating whether a tool call is allowed ('allow') or denied ('deny'), optionally with updated input or a denial message.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: json
CODE:
```
// tool call is allowed
{
  "behavior": "allow",
  "updatedInput": {...} // updated input, or just return back the original input
}

// tool call is denied
{
  "behavior": "deny",
  "message": "..." // human-readable string explaining why the permission was denied
}
```

----------------------------------------

TITLE: Anthropic API Direct Secrets
DESCRIPTION: Secrets required for direct authentication with the Anthropic API. Includes the API key for accessing Anthropic services.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/github-actions

LANGUAGE: APIDOC
CODE:
```
Secrets for Anthropic API (Direct):

1. ANTHROPIC_API_KEY: Your Anthropic API key obtained from console.anthropic.com.
2. APP_ID: Your GitHub App's ID (if using your own GitHub App).
3. APP_PRIVATE_KEY: The content of your GitHub App's private key file (.pem).
```

----------------------------------------

TITLE: Integrate Multiple Tools with Claude API for Advanced Automation
DESCRIPTION: This example illustrates how to combine the `computer_use` tool with other specialized tools like `text_editor`, `bash`, and a custom `get_weather` API within a single Claude API request. It showcases how to define various tool types, their names, and their input schemas, enabling Claude to perform complex, multi-tool operations such as executing system commands, editing files, or interacting with custom services. The `thinking` parameter is also included to provide insight into Claude's reasoning during tool execution.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "content-type: application/json" \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -H "anthropic-beta: computer-use-2025-01-24" \
  -d '{
    "model": "claude-opus-4-20250514",
    "max_tokens": 2000,
    "tools": [
      {
        "type": "computer_20250124",
        "name": "computer",
        "display_width_px": 1024,
        "display_height_px": 768,
        "display_number": 1
      },
      {
        "type": "text_editor_20250124",
        "name": "str_replace_editor"
      },
      {
        "type": "bash_20250124",
        "name": "bash"
      },
      {
        "name": "get_weather",
        "description": "Get the current weather in a given location",
        "input_schema": {
          "type": "object",
          "properties": {
            "location": {
              "type": "string",
              "description": "The city and state, e.g. San Francisco, CA"
            },
            "unit": {
              "type": "string",
              "enum": ["celsius", "fahrenheit"],
              "description": "The unit of temperature, either 'celsius' or 'fahrenheit'"
            }
          },
          "required": ["location"]
        }
      }
    ],
    "messages": [
      {
        "role": "user",
        "content": "Find flights from San Francisco to a place with warmer weather."
      }
    ],
    "thinking": {
      "type": "enabled",
      "budget_tokens": 1024
    }
  }'
```

----------------------------------------

TITLE: Anthropic Claude API: Overview of Message Array Roles
DESCRIPTION: This section lists the different roles supported within the `messages` array for the Anthropic Claude API, providing a high-level overview of the conversation participants.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk

LANGUAGE: APIDOC
CODE:
```
Roles:
- Developer role
- System role
- User role
- Assistant role
- Tool role
- Function role
```

----------------------------------------

TITLE: Understand Claude's tool_choice parameter options
DESCRIPTION: This API documentation outlines the various options available for Claude's `tool_choice` parameter, which controls how Claude decides to use provided tools. Each option dictates a different behavior, from automatic selection to mandatory tool use or complete prevention of tool calls.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: APIDOC
CODE:
```
tool_choice parameter options:
  - auto: Allows Claude to decide whether to call any provided tools or not. (Default when tools are provided)
  - any: Tells Claude that it must use one of the provided tools, but doesn’t force a particular tool.
  - tool: Forces Claude to always use a particular tool.
  - none: Prevents Claude from using any tools. (Default when no tools are provided)
```

----------------------------------------

TITLE: Claude Code Action Parameters
DESCRIPTION: Defines the key parameters supported by the Claude Code Action for configuring prompts, API keys, and conversation settings. Specifies which parameters are required and their purpose.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/github-actions

LANGUAGE: APIDOC
CODE:
```
Claude Code Action Parameters:

- `prompt`: The prompt to send to Claude. Required.
- `prompt_file`: Path to file containing prompt. Required.
- `anthropic_api_key`: Anthropic API key. Required for direct Anthropic API, not for Bedrock/Vertex.
- `max_turns`: Maximum conversation turns. Optional.
- `timeout_minutes`: Execution timeout. Optional.
```

----------------------------------------

TITLE: JSON Output with Metadata (Python)
DESCRIPTION: This Python example shows how to collect all messages, including metadata, from a Claude SDK query. It asynchronously iterates through received messages, stores them, and then captures the result data containing the response, cost, and duration.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: python
CODE:
```
# Collect all messages with metadata
async with ClaudeSDKClient() as client:
    await client.query("How does the data layer work?")

    messages = []
    result_data = None

    async for message in client.receive_messages():
        messages.append(message)

        # Capture result message with metadata
        if type(message).__name__ == "ResultMessage":
            result_data = {
                "result": message.result,
                "cost": message.total_cost_usd,
                "duration": message.duration_ms,
                "num_turns": message.num_turns,
                "session_id": message.session_id
            }
            break

    print(result_data)
```

----------------------------------------

TITLE: Integrate Stripe for Payments with Claude Code
DESCRIPTION: Enable payment processing, subscription management, and financial transactions through Stripe by adding its MCP server via HTTP transport.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: Shell
CODE:
```
claude mcp add --transport http stripe https://mcp.stripe.com
```

----------------------------------------

TITLE: Declare Anthropic Java SDK Dependency
DESCRIPTION: Adds the Anthropic Java SDK as a dependency in your Java project. Examples for Gradle and Maven are provided.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/get-started

LANGUAGE: Gradle
CODE:
```
implementation("com.anthropic:anthropic-java:1.0.0")
```

LANGUAGE: Maven
CODE:
```
<dependency>
  <groupId>com.anthropic</groupId>
  <artifactId>anthropic-java</artifactId>
  <version>1.0.0</version>
</dependency>
```

----------------------------------------

TITLE: Alternative Integration Methods for Claude Code
DESCRIPTION: Outlines alternative methods for integrating Claude Code beyond the recommended `/install-github-app` command. This includes setting up a Custom GitHub App, using Manual GitHub Actions, and configuring MCP.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/github-actions

LANGUAGE: Markdown
CODE:
```
Alternative Integration Methods:

*   **Custom GitHub App**: Create your own GitHub App with required permissions (contents, issues, pull requests) and use the `actions/create-github-app-token` action to generate tokens in your workflows.
*   **Manual GitHub Actions**: Direct workflow configuration for maximum flexibility.
*   **MCP Configuration**: Dynamic loading of Model Context Protocol servers.
```

----------------------------------------

TITLE: Python Function to Backup File Before Editing
DESCRIPTION: This Python function creates a backup copy of a specified file. It ensures that the original file content is preserved before any modifications are made, enhancing data safety.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: Python
CODE:
```
def backup_file(file_path):
    """Create a backup of a file before editing."""
    backup_path = f"{file_path}.backup"
    if os.path.exists(file_path):
        with open(file_path, 'r') as src, open(backup_path, 'w') as dst:
            dst.write(src.read())
```

----------------------------------------

TITLE: MCP Server Configuration for Custom Tools
DESCRIPTION: Shows a JSON configuration for the Model Context Protocol (MCP) servers, enabling agents to integrate with external tools like Slack, Jira, and databases by specifying commands, arguments, and environment variables.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "slack": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-slack"],
      "env": {"SLACK_TOKEN": "your-slack-token"}
    },
    "jira": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-jira"],
      "env": {"JIRA_TOKEN": "your-jira-token"}
    },
    "database": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-postgres"],
      "env": {"DB_CONNECTION_STRING": "your-db-url"}
    }
  }
}
```

----------------------------------------

TITLE: Perform One-Shot Queries with Claude Code Python SDK's `query` Function
DESCRIPTION: This example shows how to use the simpler `query` function for single, non-streaming interactions. It demonstrates sending a prompt with a system prompt option and processing the `ResultMessage` to extract the AI's response.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-python

LANGUAGE: Python
CODE:
```
from claude_code_sdk import query, ClaudeCodeOptions

async for message in query(
    prompt="Analyze system performance",
    options=ClaudeCodeOptions(system_prompt="You are a performance engineer")
):
    if type(message).__name__ == "ResultMessage":
        print(message.result)
```

----------------------------------------

TITLE: API Parameter: Capacity Control
DESCRIPTION: Determines whether to use priority capacity (if available) or standard capacity for the request. Options include `auto` and `standard_only`.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
enum<string>

Determines whether to use priority capacity (if available) or standard capacity for this request.

Anthropic offers different levels of service for your API requests. See [service-tiers](https://docs.anthropic.com/en/api/service-tiers) for details.

Available options:

`auto`,

`standard_only`
```

----------------------------------------

TITLE: Anthropic API Version History and Behavioral Changes
DESCRIPTION: Provides a chronological overview of changes and new features introduced in different Anthropic API versions. It highlights updates to streaming event formats and removal of deprecated response values, recommending the use of the latest API version.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/versioning

LANGUAGE: APIDOC
CODE:
```
2023-06-01:
  - New format for streaming server-sent events (SSE):
    - Completions are incremental. For example, " Hello", " my", " name", " is", " Claude." instead of " Hello", " Hello my", " Hello my name", " Hello my name is", " Hello my name is Claude.".
    - All events are named events, rather than data-only events.
    - Removed unnecessary data: [DONE] event.
  - Removed legacy exception and truncated values in responses.
2023-01-01:
  - Initial release.
```

----------------------------------------

TITLE: Integrate Claude as a Unix-Style Utility for Code Verification
DESCRIPTION: This section demonstrates how to integrate Claude Code into your development workflow as a linter or code reviewer, specifically by adding it to your `package.json` scripts. This allows for automated code verification within your build process or CI/CD pipeline.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/common-workflows

LANGUAGE: JSON
CODE:
```
// package.json
{
    ...
    "scripts": {
        ...
        "lint:claude": "claude -p 'you are a linter. please look at the changes vs. main and report any issues related to typos. report the filename and line number on one line, and a description of the issue on the second line. do not return any other text.'"
    }
}
```

----------------------------------------

TITLE: Describe Multiple Images with Claude using Python (Base64)
DESCRIPTION: Demonstrates how to send multiple images to Claude for comparative analysis or description using the Anthropic Python SDK. Each image is encoded in base64, and the prompt includes text to distinguish between images. This example uses the claude-sonnet-4-20250514 model for multi-image input.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision

LANGUAGE: python
CODE:
```
message = client.messages.create(
    model="claude-sonnet-4-20250514",
    max_tokens=1024,
    messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Image 1:"
                },
                {
                    "type": "image",
                    "source": {
                        "type": "base64",
                        "media_type": image1_media_type,
                        "data": image1_data,
                    }
                },
                {
                    "type": "text",
                    "text": "Image 2:"
                },
                {
                    "type": "image",
                    "source": {
                        "type": "base64",
                        "media_type": image2_media_type,
                        "data": image2_data,
                    }
                },
                {
                    "type": "text",
                    "text": "How are these images different?"
                }
            ]
        }
    ]
)
```

----------------------------------------

TITLE: Integrate Vercel with Claude Code
DESCRIPTION: Access Vercel's official MCP server to search documentation, manage projects and deployments, and analyze deployment logs, by adding its MCP server via HTTP transport.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: Shell
CODE:
```
claude mcp add --transport http vercel https://mcp.vercel.com/
```

----------------------------------------

TITLE: Claude Code SDK - Agent Integration Examples
DESCRIPTION: Showcases examples of integrating the Claude Code SDK for agent-based applications. This includes specific use cases like an SRE incident response bot, automated security review, and a multi-turn legal assistant.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: APIDOC
CODE:
```
Agent Integration Examples:
  - SRE Incident Response Bot: Automates responses to system incidents.
  - Automated Security Review: Assists in reviewing code for security vulnerabilities.
  - Multi-turn Legal Assistant: Facilitates complex legal queries through extended conversations.
```

----------------------------------------

TITLE: Claude Code OpenTelemetry Environment Variable Reference
DESCRIPTION: This section details the environment variables available for configuring OpenTelemetry within Claude Code. It covers common settings for telemetry collection, exporter types, OTLP protocols and endpoints, export intervals, and specific variables for controlling metrics cardinality to optimize performance and storage.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage

LANGUAGE: APIDOC
CODE:
```
Common Configuration Variables:
`CLAUDE_CODE_ENABLE_TELEMETRY`: Enables telemetry collection (required). Example Values: `1`
`OTEL_METRICS_EXPORTER`: Metrics exporter type(s) (comma-separated). Example Values: `console`, `otlp`, `prometheus`
`OTEL_LOGS_EXPORTER`: Logs/events exporter type(s) (comma-separated). Example Values: `console`, `otlp`
`OTEL_EXPORTER_OTLP_PROTOCOL`: Protocol for OTLP exporter (all signals). Example Values: `grpc`, `http/json`, `http/protobuf`
`OTEL_EXPORTER_OTLP_ENDPOINT`: OTLP collector endpoint (all signals). Example Values: `http://localhost:4317`
`OTEL_EXPORTER_OTLP_METRICS_PROTOCOL`: Protocol for metrics (overrides general). Example Values: `grpc`, `http/json`, `http/protobuf`
`OTEL_EXPORTER_OTLP_METRICS_ENDPOINT`: OTLP metrics endpoint (overrides general). Example Values: `http://localhost:4318/v1/metrics`
`OTEL_EXPORTER_OTLP_LOGS_PROTOCOL`: Protocol for logs (overrides general). Example Values: `grpc`, `http/json`, `http/protobuf`
`OTEL_EXPORTER_OTLP_LOGS_ENDPOINT`: OTLP logs endpoint (overrides general). Example Values: `http://localhost:4318/v1/logs`
`OTEL_EXPORTER_OTLP_HEADERS`: Authentication headers for OTLP. Example Values: `Authorization=Bearer token`
`OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY`: Client key for mTLS authentication. Example Values: Path to client key file
`OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE`: Client certificate for mTLS authentication. Example Values: Path to client cert file
`OTEL_METRIC_EXPORT_INTERVAL`: Export interval in milliseconds (default: 60000). Example Values: `5000`, `60000`
`OTEL_LOGS_EXPORT_INTERVAL`: Logs export interval in milliseconds (default: 5000). Example Values: `1000`, `10000`
`OTEL_LOG_USER_PROMPTS`: Enable logging of user prompt content (default: disabled). Example Values: `1` to enable

Metrics Cardinality Control:
`OTEL_METRICS_INCLUDE_SESSION_ID`: Include session.id attribute in metrics. Default Value: `true`. Example to Disable: `false`
`OTEL_METRICS_INCLUDE_VERSION`: Include app.version attribute in metrics. Default Value: `false`. Example to Disable: `true`
`OTEL_METRICS_INCLUDE_ACCOUNT_UUID`: Include user.account_uuid attribute in metrics. Default Value: `true`. Example to Disable: `false`
```

----------------------------------------

TITLE: Vim Mode Keybindings
DESCRIPTION: Claude Code supports a subset of Vim keybindings for efficient editing. These can be enabled via the '/vim' command or through '/config'. The supported bindings cover mode switching, navigation, and editing operations.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/terminal-config

LANGUAGE: APIDOC
CODE:
```
Vim Mode Support:
  Mode Switching:
    - NORMAL: Esc
    - INSERT: i, I, a, A, o, O
  Navigation:
    - h, j, k, l
    - w, e, b
    - 0, $, ^
    - gg, G
  Editing:
    - x (delete character)
    - dw, de, db, dd, D (delete word/line)
    - cw, ce, cb, cc, C (change word/line)
    - . (repeat last change)
```

----------------------------------------

TITLE: Install Anthropic Python SDK
DESCRIPTION: This command shows how to install the official Anthropic Python client library. It uses 'pip', the Python package installer, to fetch and install the 'anthropic' package from PyPI. This is the first step to using the SDK in a Python project.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/getting-started

LANGUAGE: Python
CODE:
```
pip install anthropic
```

----------------------------------------

TITLE: Claude API Web Search Response Structure
DESCRIPTION: Example JSON structure of a Claude API response that includes web search actions, results, and citations. It demonstrates the flow from Claude's decision to search, the query used, search results, and the final response with inline citations.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool

LANGUAGE: json
CODE:
```
{
  "role": "assistant",
  "content": [
    // 1. Claude's decision to search
    {
      "type": "text",
      "text": "I'll search for when Claude Shannon was born."
    },
    // 2. The search query used
    {
      "type": "server_tool_use",
      "id": "srvtoolu_01WYG3ziw53XMcoyKL4XcZmE",
      "name": "web_search",
      "input": {
        "query": "claude shannon birth date"
      }
    },
    // 3. Search results
    {
      "type": "web_search_tool_result",
      "tool_use_id": "srvtoolu_01WYG3ziw53XMcoyKL4XcZmE",
      "content": [
        {
          "type": "web_search_result",
          "url": "https://en.wikipedia.org/wiki/Claude_Shannon",
          "title": "Claude Shannon - Wikipedia",
          "encrypted_content": "EqgfCioIARgBIiQ3YTAwMjY1Mi1mZjM5LTQ1NGUtODgxNC1kNjNjNTk1ZWI3Y...",
          "page_age": "April 30, 2025"
        }
      ]
    },
    {
      "text": "Based on the search results, ",
      "type": "text"
    },
    // 4. Claude's response with citations
    {
      "text": "Claude Shannon was born on April 30, 1916, in Petoskey, Michigan",
      "type": "text",
      "citations": [
        {
          "type": "web_search_result_location",
          "url": "https://en.wikipedia.org/wiki/Claude_Shannon",
          "title": "Claude Shannon - Wikipedia",
          "encrypted_index": "Eo8BCioIAhgBIiQyYjQ0OWJmZi1lNm..",
          "cited_text": "Claude Elwood Shannon (April 30, 1916 – February 24, 2001) was an American mathematician, electrical engineer, computer scientist, cryptographer and i..."
        }
      ]
    }
  ],
  "id": "msg_a930390d3a",
  "usage": {
    "input_tokens": 6039,
    "output_tokens": 931,
    "server_tool_use": {
      "web_search_requests": 1
    }
  },
  "stop_reason": "end_turn"
}
```

----------------------------------------

TITLE: Configure Dynamic OpenTelemetry Headers in Claude Settings (JSON)
DESCRIPTION: This configuration snippet for `.claude/settings.json` specifies the path to a script that generates dynamic OpenTelemetry headers. This allows for flexible authentication mechanisms where headers might need to be generated at startup.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/monitoring-usage

LANGUAGE: JSON
CODE:
```
{
  "otelHeadersHelper": "/bin/generate_opentelemetry_headers.sh"
}
```

----------------------------------------

TITLE: Managing Multiple Conversational Turns with Anthropic Messages API
DESCRIPTION: Illustrates how to maintain conversational history with the stateless Anthropic Messages API by sending the full exchange in each request. This allows for building multi-turn dialogues, including the use of synthetic assistant messages.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages-examples

LANGUAGE: Shell
CODE:
```
#!/bin/sh
curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --data \
'{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "messages": [
        {"role": "user", "content": "Hello, Claude"},
        {"role": "assistant", "content": "Hello!"},
        {"role": "user", "content": "Can you describe LLMs to me?"}

    ]
}'
```

LANGUAGE: JSON
CODE:
```
{
    "id": "msg_018gCsTGsXkYJVqYPxTgDHBU",
    "type": "message",
    "role": "assistant",
    "content": [
        {
            "type": "text",
            "text": "Sure, I'd be happy to provide..."
        }
    ],
    "stop_reason": "end_turn",
    "stop_sequence": null,
    "usage": {
      "input_tokens": 30,
      "output_tokens": 309
    }
}
```

----------------------------------------

TITLE: Enable Extended Thinking with OpenAI SDK for Claude
DESCRIPTION: Demonstrates how to enable extended thinking capabilities for Claude models when using the OpenAI SDK. This improves Claude's reasoning for complex tasks, but the detailed thought process is not returned via the SDK. For full features, including access to Claude’s step-by-step reasoning output, use the native Anthropic API.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk

LANGUAGE: Python
CODE:
```
response = client.chat.completions.create(
    model="claude-opus-4-20250514",
    messages=...,
    extra_body={
        "thinking": { "type": "enabled", "budget_tokens": 2000 }
    }
)
```

----------------------------------------

TITLE: Send Multiple Images to Claude API with System Prompt (Base64)
DESCRIPTION: This Python snippet illustrates how to send multiple Base64-encoded images to the Claude API while also providing a system prompt. The system prompt allows developers to set a specific behavior or instruction for the model, such as requiring responses in a particular language, before processing the user's image-based query.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision

LANGUAGE: Python
CODE:
```
message = client.messages.create(
    model="claude-sonnet-4-20250514",
    max_tokens=1024,
    system="Respond only in Spanish.",
    messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Image 1:"
                },
                {
                    "type": "image",
                    "source": {
                        "type": "base64",
                        "media_type": image1_media_type,
                        "data": image1_data
                    }
                },
                {
                    "type": "text",
                    "text": "Image 2:"
                },
                {
                    "type": "image",
                    "source": {
                        "type": "base64",
                        "media_type": image2_media_type,
                        "data": image2_data
                    }
                },
                {
                    "type": "text",
                    "text": "How are these images different?"
                }
            ]
        }
    ]
)
```

----------------------------------------

TITLE: Add Project-Scoped Claude Code MCP Server
DESCRIPTION: Shows how to add an MCP server with project scope, storing its configuration in a `.mcp.json` file for team collaboration via version control.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: shell
CODE:
```
# Add a project-scoped server
claude mcp add shared-server --scope project /path/to/server
```

----------------------------------------

TITLE: Start Claude Code as an MCP Server
DESCRIPTION: Demonstrates how to start the Claude Code application as a Multi-Client Protocol (MCP) server using a command-line interface. It also provides the JSON configuration snippet required to integrate this local MCP server with Claude Desktop, allowing Claude Desktop to access Claude Code's tools and functionalities.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: shell
CODE:
```
claude mcp serve
```

LANGUAGE: json
CODE:
```
{
  "mcpServers": {
    "claude-code": {
      "command": "claude",
      "args": ["mcp", "serve"],
      "env": {}
    }
  }
}
```

----------------------------------------

TITLE: Send Message to Anthropic Claude API with cURL
DESCRIPTION: This cURL command demonstrates how to make a direct HTTP POST request to the Anthropic messages API. It includes setting required headers like 'x-api-key' and 'anthropic-version', and providing a JSON payload with the model name, max tokens, and user message. This is useful for direct API interaction without an SDK.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/getting-started

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --data \
'{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "messages": [
        {"role": "user", "content": "Hello, world"}
    ]
}'
```

----------------------------------------

TITLE: Get Refactoring Recommendations
DESCRIPTION: Ask Claude Code for suggestions on how to refactor specific files or modules to use modern programming language features. This helps in adopting best practices and improving code quality.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/common-workflows

LANGUAGE: CLI
CODE:
```
> suggest how to refactor utils.js to use modern JavaScript features
```

----------------------------------------

TITLE: Stream JSON Input to Claude CLI
DESCRIPTION: Demonstrates how to provide a stream of JSON messages to the `claude` binary via `stdin` for multi-turn conversations. Each message is a JSON 'User message' object, formatted using the jsonl format where each line is a complete JSON object. This method requires the `-p` and `--output-format stream-json` flags.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-headless

LANGUAGE: bash
CODE:
```
echo '{"type":"user","message":{"role":"user","content":[{"type":"text","text":"Explain this code"}]}}' | claude -p --output-format=stream-json --input-format=stream-json --verbose
```

----------------------------------------

TITLE: Claude Code SDK Authentication Methods
DESCRIPTION: Details the authentication methods for the Claude Code SDK. It covers using an Anthropic API key via the `ANTHROPIC_API_KEY` environment variable and authenticating with third-party providers like Amazon Bedrock and Google Vertex AI.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: APIDOC
CODE:
```
Authentication
Anthropic API key
For basic authentication, retrieve an Anthropic API key from the [Anthropic Console](https://console.anthropic.com/) and set the `ANTHROPIC_API_KEY` environment variable, as demonstrated in the [Quick start](https://docs.anthropic.com/en/docs/claude-code/sdk#quick-start).
Third-party API credentials
The SDK also supports authentication via third-party API providers:
  * **Amazon Bedrock** : Set `CLAUDE_CODE_USE_BEDROCK=1` environment variable and configure AWS credentials
  * **Google Vertex AI** : Set `CLAUDE_CODE_USE_VERTEX=1` environment variable and configure Google Cloud credentials

For detailed configuration instructions for third-party providers, see the [Amazon Bedrock](https://docs.anthropic.com/en/docs/claude-code/amazon-bedrock) and [Google Vertex AI](https://docs.anthropic.com/en/docs/claude-code/google-vertex-ai) documentation.
```

----------------------------------------

TITLE: Run Claude Code Interactive Session
DESCRIPTION: This command launches the interactive Claude Code REPL (Read-Eval-Print Loop) session in your terminal. Once running, you can directly prompt Claude with natural language commands to perform coding tasks.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/overview

LANGUAGE: bash
CODE:
```
claude
```

----------------------------------------

TITLE: Log Claude Tool Actions in Python
DESCRIPTION: Python function demonstrating how to log details of executed actions, including type, parameters, and results, for debugging and monitoring purposes.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool

LANGUAGE: Python
CODE:
```
import logging

def log_action(action_type, params, result):
    logging.info(f"Action: {action_type}, Params: {params}, Result: {result}")
```

----------------------------------------

TITLE: Claude Code Interactive Mode: General Controls
DESCRIPTION: Provides a reference for general keyboard shortcuts used in Claude Code sessions for controlling input and session state. These shortcuts are standard across most terminals.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/interactive-mode

LANGUAGE: APIDOC
CODE:
```
General Controls:
  Shortcut | Description | Context
  ---|---|---
  `Ctrl+C` | Cancel current input or generation | Standard interrupt
  `Ctrl+D` | Exit Claude Code session | EOF signal
  `Ctrl+L` | Clear terminal screen | Keeps conversation history
  `Up/Down arrows` | Navigate command history | Recall previous inputs
  `Esc` + `Esc` | Edit previous message | Double-escape to modify
```

----------------------------------------

TITLE: Describe Single Image with Claude using Python (Base64)
DESCRIPTION: Illustrates how to send a single image to Claude for description using the Anthropic Python SDK. The image data is encoded in base64 and directly embedded in the message content. This example uses the claude-sonnet-4-20250514 model and is suitable for direct image data inclusion.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision

LANGUAGE: python
CODE:
```
message = client.messages.create(
    model="claude-sonnet-4-20250514",
    max_tokens=1024,
    messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "image",
                    "source": {
                        "type": "base64",
                        "media_type": image1_media_type,
                        "data": image1_data,
                    }
                },
                {
                    "type": "text",
                    "text": "Describe this image."
                }
            ]
        }
    ]
)
```

----------------------------------------

TITLE: Provide Tool Result to Claude (Single Tool)
DESCRIPTION: After executing the tool identified by Claude, send a follow-up message back to Claude containing the tool_result. This allows Claude to continue the conversation with the tool's output.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/overview

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --data \
'{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "tools": [
        {
            "name": "get_weather",
            "description": "Get the current weather in a given location",
            "input_schema": {
                "type": "object",
                "properties": {
                    "location": {
                        "type": "string",
                        "description": "The city and state, e.g. San Francisco, CA"
                    },
                    "unit": {
                        "type": "string",
                        "enum": ["celsius", "fahrenheit"],
                        "description": "The unit of temperature, either \"celsius\" or \"fahrenheit\""
                    }
                },
                "required": ["location"]
            }
        }
    ],
    "messages": [
        {
            "role": "user",
            "content": "What is the weather like in San Francisco?"
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "<thinking>I need to use get_weather, and the user wants SF, which is likely San Francisco, CA.</thinking>"
                },
                {
                    "type": "tool_use",
                    "id": "toolu_01A09q90qw90lq917835lq9",
                    "name": "get_weather",
                    "input": {
                        "location": "San Francisco, CA",
                        "unit": "celsius"
                    }
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "tool_result",
                    "tool_use_id": "toolu_01A09q90qw90lq917835lq9",
                    "content": "15 degrees"
                }
            ]
        }
    ]
}'
```

LANGUAGE: Python
CODE:
```

```

LANGUAGE: Java
CODE:
```

```

----------------------------------------

TITLE: Anthropic Message Response Fields Documentation
DESCRIPTION: Defines the structure and properties of various fields within the Anthropic API response, including usage statistics for tokens, server tool interactions, and container details.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
usage.output_tokens:
  type: integer
  required: true
  description: The number of output tokens which were used.
  range: x >= 0
  examples: 503

usage.server_tool_use:
  type: object | null
  required: true
  description: The number of server tool requests.

usage.server_tool_use.web_search_requests:
  type: integer
  default: 0
  required: true
  description: The number of web search tool requests.
  range: x >= 0
  examples: 0

usage.service_tier:
  type: enum<string> | null
  required: true
  description: If the request used the priority, standard, or batch tier.
  options: standard, priority, batch

container:
  type: object | null
  required: true
  description: Information about the container used in this request. This will be non-null if a container tool (e.g. code execution) was used.

container.expires_at:
  type: string
  required: true
  description: The time at which the container will expire.

container.id:
  type: string
  required: true
  description: Identifier for the container used in this request
```

----------------------------------------

TITLE: Claude Code Navigation (NORMAL Mode)
DESCRIPTION: Keybindings for navigating text within Claude Code's NORMAL mode, similar to Vim's navigation commands.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/interactive-mode

LANGUAGE: APIDOC
CODE:
```
Command | Action
---|---
`h`/`j`/`k`/`l` | Move left/down/up/right
`w` | Next word
`e` | End of word
`b` | Previous word
`0` | Beginning of line
`$` | End of line
`^` | First non-blank character
`gg` | Beginning of input
`G` | End of input
```

----------------------------------------

TITLE: Configure Post-Tool-Use Hook for Markdown Formatting
DESCRIPTION: This `PostToolUse` hook configuration is designed to automatically fix formatting issues in Markdown files. It triggers an external Python script (`markdown_formatter.py`) whenever a Markdown file is edited, multi-edited, or written by Claude.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks-guide

LANGUAGE: json
CODE:
```
{
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/hooks/markdown_formatter.py"
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Create Workspace with cURL
DESCRIPTION: Creates a new workspace within an organization. A name for the new workspace must be provided in the request body, along with an admin API key for authentication.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/administration-api

LANGUAGE: Shell
CODE:
```
curl --request POST "https://api.anthropic.com/v1/organizations/workspaces" \
  --header "anthropic-version: 2023-06-01" \
  --header "x-api-key: $ANTHROPIC_ADMIN_KEY" \
  --data '{"name": "Production"}'
```

----------------------------------------

TITLE: Send Message with Multiple Cache Breakpoints and Tools (cURL)
DESCRIPTION: This example illustrates how to combine prompt caching with tool definitions and system messages in a single API call. It shows how to define multiple tools with their input schemas and how to apply `cache_control` to both tools and system messages, enabling more granular control over caching behavior for complex interactions.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/prompt-caching

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
     --header "x-api-key: $ANTHROPIC_API_KEY" \
     --header "anthropic-version: 2023-06-01" \
     --header "content-type: application/json" \
     --data \
'{
    "model": "claude-opus-4-20250514",
    "max_tokens": 1024,
    "tools": [
        {
            "name": "search_documents",
            "description": "Search through the knowledge base",
            "input_schema": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query"
                    }
                },
                "required": ["query"]
            }
        },
        {
            "name": "get_document",
            "description": "Retrieve a specific document by ID",
            "input_schema": {
                "type": "object",
                "properties": {
                    "doc_id": {
                        "type": "string",
                        "description": "Document ID"
                    }
                },
                "required": ["doc_id"]
            },
            "cache_control": {"type": "ephemeral"}
        }
    ],
    "system": [
        {
            "type": "text",
            "text": "You are a helpful research assistant with access to a document knowledge base.\n\n# Instructions\n- Always search for relevant documents before answering\n- Provide citations for your sources\n- Be objective and accurate in your responses\n- If multiple documents contain relevant information, synthesize them\n- Acknowledge when information is not available in the knowledge base",
            "cache_control": {"type": "ephemeral"}
        },
        {
            "type": "text",
```

----------------------------------------

TITLE: Generate CLAUDE.md Project Guide
DESCRIPTION: Initializes and generates a `CLAUDE.md` project guide file in your repository. This file provides an overview and context for your project, which can then be committed.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/setup

LANGUAGE: shell
CODE:
```
/init
```

----------------------------------------

TITLE: Automated Security Review for Pull Requests (Bash)
DESCRIPTION: A bash script that leverages the Claude CLI to perform automated security reviews on pull requests. It diffs the PR and pipes the output to Claude with a system prompt for security analysis, outputting the results in JSON format.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: Bash
CODE:
```
# Security audit agent for pull requests
audit_pr() {
    local pr_number="$1"

    gh pr diff "$pr_number" | claude -p \
      --append-system-prompt "You are a security engineer. Review this PR for vulnerabilities, insecure patterns, and compliance issues."
      --output-format json \
      --allowedTools "Read,Grep,WebSearch"
}

# Usage and save to file
audit_pr 123 > security-report.json


```

LANGUAGE: Bash
CODE:
```
# Security audit agent for pull requests
audit_pr() {
    local pr_number="$1"

    gh pr diff "$pr_number" | claude -p \
      --append-system-prompt "You are a security engineer. Review this PR for vulnerabilities, insecure patterns, and compliance issues."
      --output-format json \
      --allowedTools "Read,Grep,WebSearch"
}


```

----------------------------------------

TITLE: Send Image and Text Prompts to Claude Vision API (Python)
DESCRIPTION: Illustrates how to send both image and text content within a single prompt to Claude's vision capabilities. This example provides two methods for image input: base64 encoding and direct URL referencing, supporting common image media types.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: python
CODE:
```
import anthropic
import base64
import httpx

# Option 1: Base64-encoded image
image_url = "https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg"
image_media_type = "image/jpeg"
image_data = base64.standard_b64encode(httpx.get(image_url).content).decode("utf-8")

message = anthropic.Anthropic().messages.create(
    model="claude-opus-4-20250514",
    max_tokens=1024,
    messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "image",
                    "source": {
                        "type": "base64",
                        "media_type": image_media_type,
                        "data": image_data,
                    },
                },
                {
                    "type": "text",
                    "text": "What is in the above image?"
                }
            ],
        }
    ],
)

# Option 2: URL-referenced image
message_from_url = anthropic.Anthropic().messages.create(
    model="claude-opus-4-20250514",
    max_tokens=1024,
    messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "image",
                    "source": {
                        "type": "url",
                        "url": "https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg",
                    },
                },
                {
                    "type": "text",
                    "text": "What is in the above image?"
                }
            ],
        }
    ],
)
```

----------------------------------------

TITLE: Verify Claude Code Hook Configuration
DESCRIPTION: This configuration snippet shows how to define a `PreToolUse` hook in `~/.claude/settings.json`. This specific hook uses `jq` to extract the command and its description from the tool input and appends it to a log file, allowing users to verify their hook setup.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks-guide

LANGUAGE: json
CODE:
```
{
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "jq -r '\"\\(.tool_input.command) - \\(.tool_input.description // \"No description\")\"' >> ~/.claude/bash-command-log.txt"
          }
        ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Debugging Claude Code
DESCRIPTION: Tips for debugging Claude Code deployments, including using the `/status` command for observability and setting the `ANTHROPIC_LOG` environment variable for detailed logging.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/bedrock-vertex-proxies

LANGUAGE: bash
CODE:
```
# Use the claude /status slash command for observability
claude /status

# Set environment variable to log requests in debug mode
export ANTHROPIC_LOG=debug
```

----------------------------------------

TITLE: Apply Timeout to Long-Running Operations
DESCRIPTION: This example uses the `timeout` command to limit the execution time of a `claude` command, printing a message if the operation exceeds the specified duration.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: bash
CODE:
```
timeout 300 claude -p "$complex_prompt" || echo "Timed out after 5 minutes"
```

----------------------------------------

TITLE: Multi-step Legal Review with Persistent Session (Python)
DESCRIPTION: Illustrates a multi-step legal document review process in Python using the Claude SDK. It emphasizes the use of context managers for client initialization, persistent sessions across multiple queries, and detailed handling of streaming responses and cost calculation.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: python
CODE:
```
import asyncio
from claude_code_sdk import ClaudeSDKClient, ClaudeCodeOptions

async def legal_review():
    """Legal document review with persistent session and streaming"""

    async with ClaudeSDKClient(
        options=ClaudeCodeOptions(
            system_prompt="You are a corporate lawyer. Provide detailed legal analysis.",
            max_turns=2
        )
    ) as client:
        # Multi-step review in same session
        steps = [
            "Review contract.pdf for liability clauses",
            "Check compliance with GDPR requirements",
            "Generate executive summary of risks"
        ]

        review_results = []

        for step in steps:
            print(f"\n📋 {step}\n")
            await client.query(step)

            step_result = []
            async for message in client.receive_response():
                if hasattr(message, 'content'):
                    for block in message.content:
                        if hasattr(block, 'text'):
                            text = block.text
                            print(text, end='', flush=True)
                            step_result.append(text)

                if type(message).__name__ == "ResultMessage":
                    review_results.append({
                        'step': step,
                        'analysis': ''.join(step_result),
                        'cost': message.total_cost_usd
                    })

        # Summary
        total_cost = sum(r['cost'] for r in review_results)
        print(f"\n\n✅ Legal review complete. Total cost: ${total_cost:.4f}")
        return review_results

# Usage
results = await legal_review()

```

----------------------------------------

TITLE: Send Single Image to Claude via cURL with File ID
DESCRIPTION: Demonstrates how to send a single image to the Anthropic Claude Messages API using a cURL command. This method requires the image to be pre-uploaded using the Files API, and its file_id is then referenced in the message content. It uses the claude-sonnet-4-20250514 model.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision

LANGUAGE: shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -H "anthropic-beta: files-api-2025-04-14" \
  -H "content-type: application/json" \
  -d '{
    "model": "claude-sonnet-4-20250514",
    "max_tokens": 1024,
    "messages": [
      {
        "role": "user",
        "content": [
          {
            "type": "image",
            "source": {
              "type": "file",
              "file_id": "file_abc123"
            }
          },
          {
            "type": "text",
            "text": "Describe this image."
          }
        ]
      }
    ]
  }'
```

----------------------------------------

TITLE: Handle Claude Computer Actions with Python
DESCRIPTION: Defines a Python function to dispatch various computer actions requested by Claude, such as screenshot capture, mouse clicks, and text typing, based on the action type and provided parameters.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/computer-use-tool

LANGUAGE: Python
CODE:
```
def handle_computer_action(action_type, params):
    if action_type == "screenshot":
        return capture_screenshot()
    elif action_type == "left_click":
        x, y = params["coordinate"]
        return click_at(x, y)
    elif action_type == "type":
        return type_text(params["text"])
    # ... handle other actions
```

----------------------------------------

TITLE: Claude Code Editor: Replace String in File
DESCRIPTION: The `str_replace` command enables Claude to replace a specific string within a file with a new string, facilitating precise edits. It requires the `command` (must be 'str_replace'), `path` to the file, `old_str` for the text to be replaced (exact match required), and `new_str` for the replacement text.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: APIDOC
CODE:
```
str_replace command:
  command: Must be "str_replace"
  path: The path to the file to modify
  old_str: The text to replace (must match exactly, including whitespace and indentation)
  new_str: The new text to insert in place of the old text
```

LANGUAGE: JSON
CODE:
```
{
  "type": "tool_use",
  "id": "toolu_01A09q90qw90lq917835lq9",
  "name": "str_replace_editor",
  "input": {
    "command": "str_replace",
    "path": "primes.py",
    "old_str": "for num in range(2, limit + 1)",
    "new_str": "for num in range(2, limit + 1):"
  }
}
```

----------------------------------------

TITLE: Anthropic Claude API: Tool Role Message Fields
DESCRIPTION: Details the fields available for messages with the 'tool' role in the Anthropic Claude API. This includes content variations (string, array with text type), tool_call_id, tool_choice, and name fields.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/openai-sdk

LANGUAGE: APIDOC
CODE:
```
| Field         | Variant                  | Support status |
| ------------- | ------------------------ | -------------- |
| `content`     | `string`                 | Fully supported|
| `content`     | `array`, `type == "text"` | Fully supported|
| `tool_call_id`| N/A                      | Fully supported|
| `tool_choice` | N/A                      | Fully supported|
| `name`        | N/A                      | Ignored        |
```

----------------------------------------

TITLE: Python Script for Bash Command Validation Exit Code Example
DESCRIPTION: This Python script serves as an example for handling exit codes, specifically for bash command validation. It imports necessary modules like `json`, `re`, and `sys`, indicating it's designed for script execution and potentially interacting with system processes or output.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks

LANGUAGE: Python
CODE:
```
#!/usr/bin/env python3
import json
import re
import sys
```

----------------------------------------

TITLE: Configure Custom Hooks for Tool Execution
DESCRIPTION: Allows configuration of custom commands to run before or after tool executions within Claude Code. This provides flexibility for integrating custom logic or external scripts into the workflow. The example shows a `PreToolUse` hook executing a Bash command.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/settings

LANGUAGE: JSON
CODE:
```
{
  "PreToolUse": {
    "Bash": "echo 'Running command...'"
  }
}
```

----------------------------------------

TITLE: Configure Claude Code Telemetry for Console Debugging in Shell
DESCRIPTION: Sets up Claude Code telemetry to export metrics to the console for debugging purposes. It enables telemetry by setting `CLAUDE_CODE_ENABLE_TELEMETRY` to 1, specifies the console exporter, and sets the metric export interval to 1 second.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/monitoring-usage

LANGUAGE: Shell
CODE:
```
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=console
export OTEL_METRIC_EXPORT_INTERVAL=1000
```

----------------------------------------

TITLE: Send Message to Anthropic Claude API with Python SDK
DESCRIPTION: This Python code snippet demonstrates how to send a message to the Anthropic Claude API using the official Python SDK. It initializes the client with an API key and then calls the 'messages.create' method, specifying the model, max tokens, and message content. The response content is then printed.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/getting-started

LANGUAGE: Python
CODE:
```
import anthropic

client = anthropic.Anthropic(
    # defaults to os.environ.get("ANTHROPIC_API_KEY")
    api_key="my_api_key",
)
message = client.messages.create(
    model="claude-opus-4-20250514",
    max_tokens=1024,
    messages=[
        {"role": "user", "content": "Hello, Claude"}
    ]
)
print(message.content)
```

----------------------------------------

TITLE: Install Anthropic Python SDK via pip
DESCRIPTION: This snippet provides the command to install the official Anthropic Python SDK using pip. Installing the SDK is the first step to programmatically interact with the Anthropic API in Python applications.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/overview

LANGUAGE: Python
CODE:
```
pip install anthropic
```

----------------------------------------

TITLE: Stream JSON output from Claude Code
DESCRIPTION: Demonstrates how to receive streaming JSON output, where each message (init, user, assistant, result) is emitted as a separate JSON object, useful for building applications that process responses incrementally.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-headless

LANGUAGE: Bash
CODE:
```
claude -p "Build an application" --output-format stream-json
```

----------------------------------------

TITLE: Query Claude Code about project context
DESCRIPTION: Demonstrates how to ask Claude Code to analyze and summarize various aspects of the current project. This includes understanding its purpose, technologies used, main entry point, or folder structure.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/quickstart

LANGUAGE: Shell
CODE:
```
> what does this project do?
```

LANGUAGE: Shell
CODE:
```
> what technologies does this project use?
```

LANGUAGE: Shell
CODE:
```
> where is the main entry point?
```

LANGUAGE: Shell
CODE:
```
> explain the folder structure
```

----------------------------------------

TITLE: Integrate Canva with Claude Code
DESCRIPTION: Browse, summarize, autofill, and generate new Canva designs directly from Claude by adding its MCP server via HTTP transport.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/mcp

LANGUAGE: Shell
CODE:
```
claude mcp add --transport http canva https://mcp.canva.com/mcp
```

----------------------------------------

TITLE: API Reference: tools.cache_control
DESCRIPTION: Allows creation of a cache control breakpoint for a content block, including its type and time-to-live.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
tools.cache_control:
  Type: object | null
  Description: Create a cache control breakpoint at this content block.
  Child Attributes:
    type:
      Type: enum<string>
      Required: true
      Available options: ephemeral
    ttl:
      Type: enum<string>
      Description: The time-to-live for the cache control breakpoint. Defaults to '5m'.
      Available options: 5m, 1h
```

----------------------------------------

TITLE: List Workspaces with cURL
DESCRIPTION: Retrieves a paginated list of workspaces associated with the organization. Options are available to limit the number of results and include archived workspaces. An admin API key is required.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/administration-api

LANGUAGE: Shell
CODE:
```
curl "https://api.anthropic.com/v1/organizations/workspaces?limit=10&include_archived=false" \
  --header "anthropic-version: 2023-06-01" \
  --header "x-api-key: $ANTHROPIC_ADMIN_KEY"
```

----------------------------------------

TITLE: Archive Workspace with cURL
DESCRIPTION: Archives an existing workspace, making it inactive and preventing further use. The specific workspace ID must be provided in the URL path, along with an admin API key.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/administration-api

LANGUAGE: Shell
CODE:
```
curl --request POST "https://api.anthropic.com/v1/organizations/workspaces/{workspace_id}/archive" \
  --header "anthropic-version: 2023-06-01" \
  --header "x-api-key: $ANTHROPIC_ADMIN_KEY"
```

----------------------------------------

TITLE: Force Claude to use a specific tool with tool_choice
DESCRIPTION: This snippet shows how to explicitly instruct Claude to use a particular tool by setting the `tool_choice` parameter. This is useful when you want to ensure a specific tool is invoked regardless of Claude's internal reasoning.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/implement-tool-use

LANGUAGE: Python
CODE:
```
tool_choice = {"type": "tool", "name": "get_weather"}
```

----------------------------------------

TITLE: Get text output from Claude Code
DESCRIPTION: Illustrates how to get a plain text explanation from Claude Code using the default output format when running in non-interactive mode.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-headless

LANGUAGE: Bash
CODE:
```
claude -p "Explain file src/components/Header.tsx"
# Output: This is a React component showing...
```

----------------------------------------

TITLE: Using Analytics Effectively - Monitor Adoption
DESCRIPTION: Guidance on using analytics to monitor the adoption of Claude Code within a team. This includes tracking team member status to identify active users who can share best practices and understanding overall adoption trends across the organization.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/analytics

LANGUAGE: APIDOC
CODE:
```
Analytics Usage: Monitor Adoption
Track team member status to identify:
- Active users for best practice sharing.
- Overall adoption trends across the organization.
```

----------------------------------------

TITLE: Python Status Line Example
DESCRIPTION: A Python script that parses JSON input from stdin to display the model name, current directory, and Git branch.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/statusline

LANGUAGE: python
CODE:
```
#!/usr/bin/env python3
import json
import sys
import os

# Read JSON from stdin
data = json.load(sys.stdin)

# Extract values
model = data['model']['display_name']
current_dir = os.path.basename(data['workspace']['current_dir'])

# Check for git branch
git_branch = ""
if os.path.exists('.git'):
    try:
        with open('.git/HEAD', 'r') as f:
            ref = f.read().strip()
            if ref.startswith('ref: refs/heads/'):
                git_branch = f" | 🌿 {ref.replace('ref: refs/heads/', '')}"
    except:
        pass

print(f"[{model}] 📁 {current_dir}{git_branch}")
```

----------------------------------------

TITLE: Manually Update Claude Code
DESCRIPTION: Provides the command to manually update Claude Code to the latest version.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/setup

LANGUAGE: bash
CODE:
```
claude update
```

----------------------------------------

TITLE: Streaming JSON Output (Command Line)
DESCRIPTION: This command-line example shows how to stream JSON output from the Claude CLI. The `--output-format stream-json` flag is used to receive each message as a separate JSON object.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

LANGUAGE: bash
CODE:
```
$ claude -p "Build an application" --output-format stream-json
```

----------------------------------------

TITLE: Claude Code Tool-Specific Permission Rules
DESCRIPTION: Defines fine-grained permission controls for various tools used by Claude Code. Rules specify patterns for commands, file operations, and network requests, with specific syntax for each tool type.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/iam

LANGUAGE: APIDOC
CODE:
```
Bash Permissions:
  Bash(npm run build) - Matches exact command.
  Bash(npm run test:*) - Matches commands starting with 'npm run test'.
  Note: Shell operators like '&&' are recognized; prefix matches do not grant permission for chained commands.

Read & Edit Permissions:
  Applies to file editing and reading tools. Follows gitignore specification.
  Patterns are resolved relative to the .claude/settings.json directory.
  Absolute paths use '//'. Paths relative to home directory use '~/'
  Examples:
    Edit(docs/**)
    Read(~/.zshrc)
    Edit(//tmp/scratch.txt)

WebFetch Permissions:
  WebFetch(domain:example.com) - Matches fetch requests to example.com.

MCP Permissions:
  Used for tools provided by MCP servers.
  MCP permissions do NOT support wildcards.
  Examples:
    mcp__puppeteer - Approves all tools from the 'puppeteer' server.
    mcp__puppeteer__puppeteer_navigate - Approves the 'puppeteer_navigate' tool.
    mcp__github - Approves ALL GitHub tools.
    mcp__github__get_issue - Approves the 'get_issue' tool.
```

----------------------------------------

TITLE: API Reference: top_p
DESCRIPTION: Implements nucleus sampling, where the cumulative distribution is cut off once it reaches a specified probability `top_p`. Recommended for advanced use cases, used as an alternative to `temperature`.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/messages

LANGUAGE: APIDOC
CODE:
```
top_p:
  Type: number
  Description: Use nucleus sampling. In nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by `top_p`. You should either alter `temperature` or `top_p`, but not both. Recommended for advanced use cases only. You usually only need to use `temperature`.
  Required range: 0 <= x <= 1
  Examples: 0.7
```

----------------------------------------

TITLE: Devcontainer Configuration Files
DESCRIPTION: The devcontainer setup is comprised of three main configuration files: devcontainer.json for container settings and extensions, Dockerfile for the image definition and tools, and init-firewall.sh for network security rules.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/devcontainer

LANGUAGE: json
CODE:
```
devcontainer.json:
  Controls container settings, extensions, and volume mounts
```

LANGUAGE: dockerfile
CODE:
```
Dockerfile:
  Defines the container image and installed tools
```

LANGUAGE: bash
CODE:
```
init-firewall.sh:
  Establishes network security rules
```

----------------------------------------

TITLE: Configure Claude Code Telemetry for Prometheus Export in Shell
DESCRIPTION: Enables Claude Code telemetry and configures it to export metrics in a format compatible with Prometheus. This allows a Prometheus server to scrape metrics directly from Claude Code for monitoring and analysis.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/monitoring-usage

LANGUAGE: Shell
CODE:
```
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_METRICS_EXPORTER=prometheus
```

----------------------------------------

TITLE: Example JSON Response for Anthropic Claude Message
DESCRIPTION: Illustrates the typical structure of a JSON response received from the Anthropic Messages API after a successful message creation. It includes metadata like ID, type, role, content, the model used, stop reason, and token usage details.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: json
CODE:
```
{
  "id": "msg_01XFDUDYJgAACzvnptvVoYEL",
  "type": "message",
  "role": "assistant",
  "content": [
    {
      "type": "text",
      "text": "Hello!"
    }
  ],
  "model": "claude-opus-4-20250514",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "usage": {
    "input_tokens": 12,
    "output_tokens": 6
  }
}
```

----------------------------------------

TITLE: Send URL-based PDF to Claude Messages API
DESCRIPTION: Demonstrates how to send a PDF document to Claude's Messages API by referencing its URL. This method is the simplest way to provide online-hosted PDFs for analysis, allowing Claude to extract information and answer questions based on the document's content.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/pdf-support

LANGUAGE: Shell
CODE:
```
 curl https://api.anthropic.com/v1/messages \
   -H "content-type: application/json" \
   -H "x-api-key: $ANTHROPIC_API_KEY" \
   -H "anthropic-version: 2023-06-01" \
   -d '{
     "model": "claude-opus-4-20250514",
     "max_tokens": 1024,
     "messages": [{
         "role": "user",
         "content": [{
             "type": "document",
             "source": {
                 "type": "url",
                 "url": "https://assets.anthropic.com/m/1cd9d098ac3e6467/original/Claude-3-Model-Card-October-Addendum.pdf"
             }
         },
         {
             "type": "text",
             "text": "What are the key findings in this document?"
         }]
     }]
 }'
```

----------------------------------------

TITLE: Process Tool Use Requests from Claude
DESCRIPTION: This example demonstrates how to handle the `tool_use` stop reason, which indicates that Claude is requesting the execution of a defined tool. The application should parse the tool details, execute the specified tool, and then return the result to Claude for continued response generation.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/api/handling-stop-reasons

LANGUAGE: Python
CODE:
```
response = client.messages.create(
    model="claude-sonnet-4-20250514",
    max_tokens=1024,
    tools=[weather_tool],
    messages=[{"role": "user", "content": "What's the weather?"}]
)

if response.stop_reason == "tool_use":
    # Extract and execute the tool
    for content in response.content:
        if content.type == "tool_use":
            result = execute_tool(content.name, content.input)
            # Return result to Claude for final response

```

----------------------------------------

TITLE: Chaining Sub-agents Example
DESCRIPTION: Demonstrates how to chain sub-agents for complex workflows, such as using a code-analyzer followed by an optimizer.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/sub-agents

LANGUAGE: text
CODE:
```
> First use the code-analyzer subagent to find performance issues, then use the optimizer subagent to fix them
```

----------------------------------------

TITLE: Initialize Anthropic Client
DESCRIPTION: This Python code snippet demonstrates the initial setup for interacting with the Anthropic API. It imports the necessary libraries and initializes the Anthropic client, which is a prerequisite for making API calls to Claude models.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/about-claude/use-case-guides/content-moderation

LANGUAGE: python
CODE:
```
import anthropic
import json

# Initialize the Anthropic client
client = anthropic.Anthropic()
```

----------------------------------------

TITLE: Anthropic Messages API Text Content Block Delta Example
DESCRIPTION: Illustrates the structure of a `content_block_delta` event with a `text_delta` type, showing how incremental text is delivered.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/streaming

LANGUAGE: APIDOC
CODE:
```
event: content_block_delta
data: {"type": "content_block_delta","index": 0,"delta": {"type": "text_delta", "text": "ello frien"}}
```

----------------------------------------

TITLE: Send Base64 Encoded Image to Claude Messages API
DESCRIPTION: This example demonstrates how to include a base64-encoded image in a Claude Messages API request. The image data is embedded directly within the `content` array of the user message, alongside a text prompt.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -H "content-type: application/json" \
  -d '{
    "model": "claude-sonnet-4-20250514",
    "max_tokens": 1024,
    "messages": [
      {
        "role": "user",
        "content": [
          {
            "type": "image",
            "source": {
              "type": "base64",
              "media_type": "image/jpeg",
              "data": "'"$BASE64_IMAGE_DATA"'"
            }
          },
          {
            "type": "text",
            "text": "Describe this image."
          }
        ]
      }
    ]
  }'
```

----------------------------------------

TITLE: Configure Claude Code Telemetry for Events/Logs Only Export in Shell
DESCRIPTION: Enables Claude Code telemetry and configures it to export only events/logs via OTLP using gRPC to a specified endpoint. This setup is beneficial when your primary focus is on collecting detailed event data and application logs, rather than metrics.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/monitoring-usage

LANGUAGE: Shell
CODE:
```
export CLAUDE_CODE_ENABLE_TELEMETRY=1
export OTEL_LOGS_EXPORTER=otlp
export OTEL_EXPORTER_OTLP_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
```

----------------------------------------

TITLE: Claude API Web Search Result Fields
DESCRIPTION: Describes the fields included in the `web_search_result` object within a Claude API response, detailing the URL, title, page age, and encrypted content.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/web-search-tool

LANGUAGE: APIDOC
CODE:
```
Search results include:
url: The URL of the source page
title: The title of the source page
page_age: When the site was last updated
encrypted_content: Encrypted content that must be passed back in multi-turn conversations for citations
```

----------------------------------------

TITLE: Example of Chunking Behavior Without Fine-grained Streaming
DESCRIPTION: Illustrates the fragmented chunking behavior and significant delay (15s) when fine-grained streaming is not used, showing partial JSON output across multiple small chunks.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/fine-grained-tool-streaming

LANGUAGE: JSON
CODE:
```
Chunk 1: '{"'
Chunk 2: 'query": "Ty'
Chunk 3: 'peScri'
Chunk 4: 'pt 5.0 5.1 '
Chunk 5: '5.2 5'
Chunk 6: '.3'
Chunk 8: ' new f'
Chunk 9: 'eatur'
...
```

----------------------------------------

TITLE: Test Claude Code Hook Logging
DESCRIPTION: This command demonstrates how to test the `PreToolUse` hook configured for logging bash commands. By executing `cat` on the specified log file, users can verify that commands run by Claude are being correctly recorded.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/hooks-guide

LANGUAGE: bash
CODE:
```
cat ~/.claude/bash-command-log.txt
```

----------------------------------------

TITLE: Send URL-Based Image to Claude Messages API
DESCRIPTION: This example shows how to include an image in a Claude Messages API request by providing a direct URL. The image URL is specified within the `source` object of an `image` content block, alongside a text prompt.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/build-with-claude/vision

LANGUAGE: Shell
CODE:
```
curl https://api.anthropic.com/v1/messages \
  -H "x-api-key: $ANTHROPIC_API_KEY" \
  -H "anthropic-version: 2023-06-01" \
  -H "content-type: application/json" \
  -d '{
    "model": "claude-sonnet-4-20250514",
    "max_tokens": 1024,
    "messages": [
      {
        "role": "user",
        "content": [
          {
            "type": "image",
            "source": {
              "type": "url",
              "url": "https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg"
            }
          },
          {
            "type": "text",
            "text": "Describe this image."
          }
        ]
      }
    ]
  }'
```

----------------------------------------

TITLE: Start Claude Code Interactive Session
DESCRIPTION: Initiate the Claude Code interactive session by running the `claude` command in your terminal. This command launches the tool, allowing you to begin interacting with your codebase.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/common-workflows

LANGUAGE: Shell
CODE:
```
claude
```

----------------------------------------

TITLE: Anthropic Claude Model IDs and Descriptions
DESCRIPTION: This section lists the available Anthropic Claude models, providing their specific IDs and a brief description of their capabilities, from the smartest for complex tasks to those suitable for simpler operations.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude_api_primer

LANGUAGE: APIDOC
CODE:
```
Smartest model: Claude Opus 4: claude-opus-4-20250514
Almost as smart as Opus 4 at pure coding: Claude Sonnet 4: claude-sonnet-4-20250514
For super-easy tasks: Claude Haiku 3.5: claude-3-5-haiku-20241022
```

----------------------------------------

TITLE: Specify Additional Working Directories for Claude Code
DESCRIPTION: Defines an array of additional directories that Claude Code has access to, beyond its default working directory. This allows Claude to interact with files and projects located elsewhere on the system.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/settings

LANGUAGE: JSON
CODE:
```
[
  "../docs/"
]
```

----------------------------------------

TITLE: Configure OpenTelemetry for Claude Code
DESCRIPTION: This snippet provides a quick start guide to configure OpenTelemetry for Claude Code using environment variables. It covers enabling telemetry, selecting metrics and logs exporters (OTLP, Prometheus, console), setting the OTLP endpoint and protocol, configuring authentication headers, and adjusting export intervals for debugging purposes. It also notes the default export intervals and advises resetting them for production.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/claude-code/monitoring-usage

LANGUAGE: Shell
CODE:
```
# 1. Enable telemetry
export CLAUDE_CODE_ENABLE_TELEMETRY=1

# 2. Choose exporters (both are optional - configure only what you need)
export OTEL_METRICS_EXPORTER=otlp       # Options: otlp, prometheus, console
export OTEL_LOGS_EXPORTER=otlp          # Options: otlp, console

# 3. Configure OTLP endpoint (for OTLP exporter)
export OTEL_EXPORTER_OTLP_PROTOCOL=grpc
export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317

# 4. Set authentication (if required)
export OTEL_EXPORTER_OTLP_HEADERS="Authorization=Bearer your-token"

# 5. For debugging: reduce export intervals
export OTEL_METRIC_EXPORT_INTERVAL=10000  # 10 seconds (default: 60000ms)
export OTEL_LOGS_EXPORT_INTERVAL=5000     # 5 seconds (default: 5000ms)

# 6. Run Claude Code
claude
```

----------------------------------------

TITLE: Python Function to Verify Changes After File Modification
DESCRIPTION: This Python function provides a basic mechanism to verify changes made to a file, specifically checking for syntax errors in Python files. It helps ensure the integrity and functionality of the code after modifications.

SOURCE: https://docs.anthropic.com/en/docs/claude-code/docs/agents-and-tools/tool-use/text-editor-tool

LANGUAGE: Python
CODE:
```
def verify_changes(file_path):
    """Run tests or checks after making changes."""
    try:
        # For Python files, check for syntax errors
        if file_path.endswith('.py'):
            import ast
            with open(file_path, 'r') as f:
                ast.parse(f.read())
            return "Syntax check passed"
    except Exception as e:
        return f"Verification failed: {str(e)}"
```

========================
QUESTIONS AND ANSWERS
========================
TOPIC: Claude Code SDK TypeScript Documentation
Q: What is the primary purpose of the Claude Code TypeScript SDK?
A: The Claude Code TypeScript SDK is designed to enable developers to build custom AI agents using TypeScript.


SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

----------------------------------------

TOPIC: Claude Code SDK TypeScript Documentation
Q: What is the main function used for interaction within the Claude Code TypeScript SDK?
A: The primary interface for interaction within the Claude Code TypeScript SDK is the `query` function, which returns an async iterator that streams messages as they arrive.


SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

----------------------------------------

TOPIC: Claude Code SDK TypeScript Documentation
Q: What are the prerequisites for using the Claude Code TypeScript SDK?
A: To use the Claude Code TypeScript SDK, developers must have Node.js version 18 or higher installed.


SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

----------------------------------------

TOPIC: Claude Code SDK TypeScript Documentation
Q: How can operations be cancelled when using the Claude Code TypeScript SDK?
A: Operations in the Claude Code TypeScript SDK can be cancelled by providing an `AbortController` instance to the `abortController` configuration option.


SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

----------------------------------------

TOPIC: Claude Code SDK TypeScript Documentation
Q: How does the Claude Code TypeScript SDK handle multi-turn conversations?
A: For multi-turn conversations, the Claude Code TypeScript SDK offers two approaches: generating and resuming responses, or using a streaming input mode that accepts an async/generator for messages. The streaming input mode is currently the only way to attach images.


SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

----------------------------------------

TOPIC: Claude Code SDK TypeScript Documentation
Q: What options are available for customizing the system prompt in the Claude Code TypeScript SDK?
A: The system prompt in the Claude Code TypeScript SDK can be customized by either appending text to the default prompt using `appendSystemPrompt` or by completely replacing it with a `customSystemPrompt`.


SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

----------------------------------------

TOPIC: Claude Code SDK TypeScript Documentation
Q: How can developers control which tools Claude is allowed to use with the Claude Code TypeScript SDK?
A: Developers can control tool usage by specifying a list of `allowedTools` to enable specific tools or `disallowedTools` to prevent Claude from using certain ones. By default, all tools are enabled.


SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

----------------------------------------

TOPIC: Claude Code SDK TypeScript Documentation
Q: What is the `permissionMode` option used for in the Claude Code TypeScript SDK?
A: The `permissionMode` option in the Claude Code TypeScript SDK defines the permission mode for the session, with available settings such as "default", "acceptEdits", "bypassPermissions", and "plan".


SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript

----------------------------------------

TOPIC:
Q: What are the different SDK options available for the Claude Code SDK?
A: The Claude Code SDK is available in Headless Mode for CLI scripts and automation, a TypeScript SDK for Node.js and web applications, and a Python SDK for Python applications and data science.


SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk

----------------------------------------

TOPIC: Claude Code SDK TypeScript Documentation
Q: What is the purpose of the `maxTurns` configuration option in the Claude Code TypeScript SDK?
A: The `maxTurns` configuration option in the Claude Code TypeScript SDK specifies the maximum number of conversation turns allowed within a session.


SOURCE: https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-typescript