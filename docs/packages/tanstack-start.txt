========================
CODE SNIPPETS
========================
TITLE: Clone and Run Basic Example (Bash)
DESCRIPTION: This snippet demonstrates how to clone the 'start-basic' example from TanStack Router, install its dependencies, and start the development server using npm.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/quick-start

LANGUAGE: bash
CODE:
```
npx gitpick TanStack/router/tree/main/examples/react/start-basic start-basic
cd start-basic
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
npx gitpick TanStack/router/tree/main/examples/react/start-basic start-basic
cd start-basic
npm install
npm run dev
```

----------------------------------------

TITLE: Clone and Run Basic Example (Bash)
DESCRIPTION: This snippet shows how to clone the 'start-basic' example project from GitHub using degit, install its dependencies with npm, and start the development server.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/quick-start

LANGUAGE: bash
CODE:
```
npx degit https://github.com/tanstack/router/examples/solid/start-basic start-basic
cd start-basic
npm install
npm run dev

```

LANGUAGE: bash
CODE:
```
npx degit https://github.com/tanstack/router/examples/solid/start-basic start-basic
cd start-basic
npm install
npm run dev

```

----------------------------------------

TITLE: Manual Deploy Example (Bash)
DESCRIPTION: This snippet demonstrates how to manually clone any TanStack Start example project using degit, install dependencies, and run the development server, replacing 'EXAMPLE_SLUG' with the desired example's identifier.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/quick-start

LANGUAGE: bash
CODE:
```
npx degit https://github.com/tanstack/router/examples/solid/EXAMPLE_SLUG my-new-project
cd my-new-project
npm install
npm run dev

```

LANGUAGE: bash
CODE:
```
npx degit https://github.com/tanstack/router/examples/solid/EXAMPLE_SLUG my-new-project
cd my-new-project
npm install
npm run dev

```

----------------------------------------

TITLE: Manual Deploy Example (Bash)
DESCRIPTION: This snippet shows the commands to manually clone and deploy any TanStack Start example by replacing 'EXAMPLE_SLUG' with the desired example's identifier.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/quick-start

LANGUAGE: bash
CODE:
```
npx gitpick TanStack/router/tree/main/examples/react/EXAMPLE_SLUG my-new-project
cd my-new-project
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
npx gitpick TanStack/router/tree/main/examples/react/EXAMPLE_SLUG my-new-project
cd my-new-project
npm install
npm run dev
```

----------------------------------------

TITLE: Install Solid.js for Bun Deployment
DESCRIPTION: Ensure Solid.js is installed in your project's package.json for Bun deployment. If not, run 'npm install solid-js'.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/hosting

LANGUAGE: bash
CODE:
```
npm install solid-js
```

LANGUAGE: bash
CODE:
```
npm install solid-js
```

----------------------------------------

TITLE: Install Dependencies and Start Dev Server
DESCRIPTION: Installs project dependencies using pnpm and starts the development server. This command is essential for running and testing the TanStack Start application locally.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: bash
CODE:
```
pnpm i
pnpm dev

```

----------------------------------------

TITLE: Install TanStack Start, Router, and Vite Dependencies
DESCRIPTION: Installs the core TanStack Start, TanStack Router, and Vite packages required for the project. These are essential dependencies for building the application.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/build-from-scratch

LANGUAGE: shell
CODE:
```
npm i @tanstack/solid-start @tanstack/solid-router vite

```

----------------------------------------

TITLE: Start TanStack Start App on Bun
DESCRIPTION: Run your built TanStack Start application on a Bun server using the command 'bun run .output/server/index.mjs'.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/hosting

LANGUAGE: bash
CODE:
```
bun run .output/server/index.mjs
```

LANGUAGE: bash
CODE:
```
bun run .output/server/index.mjs
```

----------------------------------------

TITLE: TanStack Start: Data Flow Example
DESCRIPTION: Illustrates the data flow in a TanStack Start application, from server function calls to client-side component updates. Covers fetching data on page load and handling data mutations.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: JavaScript
CODE:
```
function example() {
  // Server function call to get jokes
  const jokes = await getJokes();

  // Pass data to component via useLoaderData
  const HomePage = ({ data }) => {
    return <JokesList jokes={data} />;
  };

  // Form submission to add a joke
  const handleSubmit = async (event) => {
    event.preventDefault();
    await addJoke(formData);
    router.invalidate(); // Refresh data
  };
}
```

----------------------------------------

TITLE: Create TanStack Start Project with CLI
DESCRIPTION: This command uses npx to create a new TanStack Start project with the latest version. It's the recommended way to quickly set up a new project.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/getting-started

LANGUAGE: bash
CODE:
```
npx create-start-app@latest
```

----------------------------------------

TITLE: Build TanStack Start App for Bun
DESCRIPTION: Build your TanStack Start application for a Bun server using the 'bun run build' command.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/hosting

LANGUAGE: bash
CODE:
```
bun run build
```

LANGUAGE: bash
CODE:
```
bun run build
```

----------------------------------------

TITLE: Solid.js Root Route Setup
DESCRIPTION: Sets up the root route for a TanStackStart Solid.js application. It includes importing necessary components from '@tanstack/solid-router', defining the root route with head and shell components, and rendering navigation links and router devtools.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/examples/start-bare

LANGUAGE: tsx
CODE:
```
/// <reference types="vite/client" />
import { createRootRoute, Link, Outlet } from '@tanstack/solid-router'
import appCss from '~/styles/app.css?url'
import * as Solid from 'solid-js'
import { TanStackRouterDevtools } from '@tanstack/solid-router-devtools'
export const Route = createRootRoute({
  head: () => ({
    links: [{ rel: 'stylesheet', href: appCss }],
  }),
  shellComponent: RootDocument,
})
function RootDocument({ children }: { children: Solid.JSX.Element }) {
  return (
    <>
      <div>
        <Link to="/">Index</Link>
        <Link to="/about">About</Link>
      </div>
      {children}
      <TanStackRouterDevtools position="bottom-right" />
    </>
  )
}
```

----------------------------------------

TITLE: Create TanStack Start Project
DESCRIPTION: Initializes a new TanStack Start project named 'devjokes' and navigates into the project directory. This is the first step in setting up the application.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: bash
CODE:
```
pnpx create-start-app devjokes
cd devjokes

```

----------------------------------------

TITLE: Start TanStack Start App on Node.js
DESCRIPTION: Run your built TanStack Start application on a Node.js server using the command 'node .output/server/index.mjs'.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/hosting

LANGUAGE: bash
CODE:
```
node .output/server/index.mjs
```

LANGUAGE: bash
CODE:
```
node .output/server/index.mjs
```

----------------------------------------

TITLE: Install TanStack Start Core Dependencies
DESCRIPTION: Installs the core TanStack Start package along with its primary dependencies, TanStack Router and Vite. These are essential for building a TanStack Start application.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/build-from-scratch

LANGUAGE: shell
CODE:
```
npm i @tanstack/react-start @tanstack/react-router vite
```

----------------------------------------

TITLE: Define a Simple Server Route (TypeScript)
DESCRIPTION: Demonstrates how to create a basic server route using `createServerFileRoute` in TypeScript. This example shows a GET method that returns a simple 'Hello, World!' response.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts

export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    return new Response('Hello, World!')
  },
})
```

LANGUAGE: typescript
CODE:
```
// routes/hello.ts

export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    return new Response('Hello, World!')
  },
})
```

----------------------------------------

TITLE: Install SolidJS Dependency
DESCRIPTION: Installs SolidJS, the framework powering the frontend for this TanStack Start project. SolidJS is required for rendering the application's UI.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/build-from-scratch

LANGUAGE: shell
CODE:
```
npm i solid-js

```

----------------------------------------

TITLE: Install React Dependencies
DESCRIPTION: Installs React and ReactDOM, which are necessary for building user interfaces with TanStack Start, as it is a React-based framework.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/build-from-scratch

LANGUAGE: shell
CODE:
```
npm i react react-dom
```

----------------------------------------

TITLE: Build TanStack Start App for Node.js
DESCRIPTION: Build your TanStack Start application for a Node.js server using the 'npm run build' command.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/hosting

LANGUAGE: bash
CODE:
```
npm run build
```

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Database Integration with TanStack Start Server Functions
DESCRIPTION: Demonstrates how to connect to a database and perform read/write operations using TanStack Start's `createServerFn`. This example shows abstract functions for getting and creating users, emphasizing the ability to integrate any database client.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/databases

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
const db = createMyDatabaseClient()
export const getUser = createServerFn(async ({ ctx }) => {
  const user = await db.getUser(ctx.userId)
  return user
})
export const createUser = createServerFn(async ({ ctx, input }) => {
  const user = await db.createUser(input)
  return user
})
```

----------------------------------------

TITLE: Database Integration with TanStack Start Server Functions
DESCRIPTION: This example demonstrates how to integrate a database with TanStack Start using server functions. It shows abstract examples of creating functions to retrieve and create user data by interacting with a database client. This approach allows for the use of any database provider.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/databases

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'

const db = createMyDatabaseClient()

export const getUser = createServerFn(async ({ ctx }) => {
  const user = await db.getUser(ctx.userId)
  return user
})

export const createUser = createServerFn(async ({ ctx, input }) => {
  const user = await db.createUser(input)
  return user
})
```

----------------------------------------

TITLE: Install Tailwind CSS v3 (Shell)
DESCRIPTION: Installs Tailwind CSS version 3 along with its peer dependencies (PostCSS and Autoprefixer) using npm. This is the initial step for setting up Tailwind CSS in a project.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/tailwind-integration

LANGUAGE: shell
CODE:
```
npm install -D tailwindcss@3 postcss autoprefixer
```

----------------------------------------

TITLE: Deploy TanStack Start to Netlify
DESCRIPTION: Configure your vite.config.ts file to target Netlify for deployment. This involves importing the tanstackStart plugin and setting the target option to 'netlify'.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/hosting

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/solid-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'netlify' })],
})
```

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/solid-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'netlify' })],
})
```

----------------------------------------

TITLE: Install Tailwind CSS and Vite Plugin (Shell)
DESCRIPTION: Installs Tailwind CSS and its associated Vite plugin using npm. This is the first step for integrating Tailwind CSS v4 into a TanStack Start project.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/tailwind-integration

LANGUAGE: shell
CODE:
```
npm install tailwindcss @tailwindcss/vite
```

----------------------------------------

TITLE: TanStack Start: Stream Data with Raw Response
DESCRIPTION: Illustrates how to implement streaming responses using the 'raw' option in TanStack Start. This example creates a ReadableStream to send data incrementally, suitable for server-sent events or real-time updates.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
export const streamEvents = createServerFn({
  method: 'GET',
  response: 'raw',
}).handler(async ({ signal }) => {
  // Create a ReadableStream to send chunks of data
  const stream = new ReadableStream({
    async start(controller) {
      // Send initial response immediately
      controller.enqueue(new TextEncoder().encode('Connection established\n'))
      let count = 0
      const interval = setInterval(() => {
        // Check if the client disconnected
        if (signal.aborted) {
          clearInterval(interval)
          controller.close()
          return
        }
        // Send a data chunk
        controller.enqueue(
          new TextEncoder().encode(
            `Event ${++count}: ${new Date().toISOString()}\n`,
          ),
        )
        // End after 10 events
        if (count >= 10) {
          clearInterval(interval)
          controller.close()
        }
      }, 1000)
      // Ensure we clean up if the request is aborted
      signal.addEventListener('abort', () => {
        clearInterval(interval)
        controller.close()
      })
    },
  })
  // Return a streaming response
  return new Response(stream, {
    headers: {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      Connection: 'keep-alive',
    },
  })
})
```

----------------------------------------

TITLE: Install TanStack Start and Vite Dependencies
DESCRIPTION: Installs the necessary packages for TanStack Start, including TanStack Router and Vite, to build a new application.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: sh
CODE:
```
npm i @tanstack/react-router @tanstack/react-start vite
```

----------------------------------------

TITLE: TanStack Start: Debugging File I/O
DESCRIPTION: Provides guidance on troubleshooting file reading and writing operations in TanStack Start. Covers checking file paths, permissions, async operations with await, and error handling.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: JavaScript
CODE:
```
// Ensure file paths are correct
// Check file permissions
// Handle async operations properly with await
// Add proper error handling for file operations
```

----------------------------------------

TITLE: Install UUID Package for Unique IDs
DESCRIPTION: Installs the 'uuid' package for generating unique identifiers and its corresponding TypeScript types. This is required for functionalities that need unique IDs, such as creating new joke entries.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: bash
CODE:
```
# Install uuid for generating unique IDs
pnpm add uuid
pnpm add -D @types/uuid

```

----------------------------------------

TITLE: TanStack Start Mutation Example
DESCRIPTION: Demonstrates creating a server function for mutations using POST, Zod for validation, and handling server-side data updates. It also shows how to invalidate router and query data on the client after a successful mutation.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/learn-the-basics

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
import { z } from 'zod'
import { dbUpdateUser } from '...'

const UserSchema = z.object({
  id: z.string(),
  name: z.string(),
})
export type User = z.infer<typeof UserSchema>

export const updateUser = createServerFn({
  method: 'POST'
})
  .validator(UserSchema)
  .handler(({ data }) => dbUpdateUser(data))

// Somewhere else in your application
import { useQueryClient } from '@tanstack/react-query'
import { useRouter } from '@tanstack/react-router'
import { useServerFn } from '@tanstack/react-start'
import { updateUser, type User } from '...'

export function useUpdateUser() {
  const router = useRouter()
  const queryClient = useQueryClient()
  const _updateUser = useServerFn(updateUser)

  return useCallback(
    async (user: User) => {
      const result = await _updateUser({ data: user })

      router.invalidate()
      queryClient.invalidateQueries({
        queryKey: ['users', 'updateUser', user.id],
      })

      return result
    },
    [router, queryClient, _updateUser],
  )
}

// Somewhere else in your application
import { useUpdateUser } from '...'

function MyComponent() {
  const updateUser = useUpdateUser()
  const onClick = useCallback(async () => {
    await updateUser({ id: '1', name: 'John' })
    console.log('Updated user')
  }, [updateUser])

  return <button onClick={onClick}>Click Me</button>
}

```

----------------------------------------

TITLE: TanStack Start Root Component Setup
DESCRIPTION: Sets up the root component for a TanStack Start application, including routing and global document structure. It defines the main layout with navigation and integrates TanStack Router Devtools.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-supabase-basic

LANGUAGE: jsx
CODE:
```
function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}

function RootDocument({ children }: { children: React.ReactNode }) {
  const { user } = Route.useRouteContext()
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="p-2 flex gap-2 text-lg">
          <Link
            to="/"
            activeProps={{
              className: 'font-bold',
            }}
            activeOptions={{ exact: true }}
          >
            Home
          </Link>{' '}
          <Link
            to="/posts"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Posts
          </Link>
          <div className="ml-auto">
            {user ? (
              <>
                <span className="mr-2">{user.email}</span>
                <Link to="/logout">Logout</Link>
              </>
            ) : (
              <Link to="/login">Login</Link>
            )}
          </div>
        </div>
        <hr />
        {children}
        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: TanStack Server Function: Fetch User Data (GET)
DESCRIPTION: Demonstrates creating a server function using `createServerFn` to fetch user data by ID. It includes validation using Zod and a handler for server-side database queries. The example shows how to call this function from the client.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/learn-the-basics

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
import * as fs from 'node:fs'
import { z } from 'zod'

const getUserById = createServerFn({ method: 'GET' })
  // Always validate data sent to the function, here we use Zod
  .validator(z.string())
  // The handler function is where you perform the server-side logic
  .handler(async ({ data }) => {
    return db.query.users.findFirst({ where: eq(users.id, data) })
  })

// Somewhere else in your application
const user = await getUserById({ data: '1' })

```

----------------------------------------

TITLE: Configure Vite for Bun
DESCRIPTION: Set the target in vite.config.ts to 'bun' for deploying your TanStack Start application to a Bun environment.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/hosting

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/solid-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'bun' })],
})
```

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/solid-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'bun' })],
})
```

----------------------------------------

TITLE: Authentication with TanStack Start
DESCRIPTION: TanStack Start provides full-stack APIs to implement authentication. It is designed to work with any authentication provider, but Clerk is highly recommended for a seamless user experience. Examples prefixed with '-auth' are available for starting points.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/authentication

LANGUAGE: javascript
CODE:
```
// Documentation for implementing your own authentication logic with TanStack Start is coming soon!
// In the meantime, you can check out any of the -auth prefixed examples for a starting point.
```

----------------------------------------

TITLE: Build and Run Bun Application
DESCRIPTION: Commands to build and start a TanStack Start application deployed to a Bun server. First, build the application using 'bun run build', then start it with 'bun run .output/server/index.mjs'.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/hosting

LANGUAGE: bash
CODE:
```
bun run build
```

LANGUAGE: bash
CODE:
```
bun run .output/server/index.mjs
```

----------------------------------------

TITLE: TanStack Start: Debugging Server Functions
DESCRIPTION: Provides common debugging steps for server functions in TanStack Start. Includes checks for HTTP methods, file paths, server console errors, and client-only API usage.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: JavaScript
CODE:
```
// Check HTTP method (GET, POST, etc.)
// Verify file paths are correct and accessible
// Check server console for error messages
// Ensure no client-only APIs are used in server functions
```

----------------------------------------

TITLE: Install TypeScript and Vite React Plugin
DESCRIPTION: Installs TypeScript and related development dependencies, including type definitions for React and ReactDOM, Vite's TypeScript path mapping plugin, and the Vite React plugin for JSX support.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/build-from-scratch

LANGUAGE: shell
CODE:
```
npm i -D typescript @types/react @types/react-dom vite-tsconfig-paths @vitejs/plugin-react
```

----------------------------------------

TITLE: TanStack Start Root Document Setup
DESCRIPTION: Configures the main document structure for a TanStack Start application, including meta tags, links, and error/not found components. It also defines the root component and the structure of the root document, handling navigation and user authentication display.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-basic-auth

LANGUAGE: javascript
CODE:
```
import { Scripts, Head, Link, Outlet } from '@tanstack/react-router'
import { TanStackRouterDevtools } from '@tanstack/router-devtools'
import appCss from './app.css'
import { seo } from './seo'

const NotFound = () => <div>Not Found</div>

function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}

function RootDocument({ children }) {
  const { user } = Route.useRouteContext()
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="p-2 flex gap-2 text-lg">
          <Link
            to="/"
            activeProps={{
              className: 'font-bold',
            }}
            activeOptions={{ exact: true }}
          >
            Home
          </Link>{' '}
          <Link
            to="/posts"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Posts
          </Link>
          <div className="ml-auto">
            {user ? (
              <>
                <span className="mr-2">{user.email}</span>
                <Link to="/logout">Logout</Link>
              </>
            ) : (
              <Link to="/login">Login</Link>
            )}
          </div>
        </div>
        <hr />
        {children}
        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}

const HeadContent = () => (
  <>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    {seo({
      title:
        'TanStack Start | Type-Safe, Client-First, Full-Stack React Framework',
      description: `TanStack Start is a type-safe, client-first, full-stack React framework. `,
    })},
    [
      { rel: 'stylesheet', href: appCss },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        href: '/apple-touch-icon.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '32x32',
        href: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '16x16',
        href: '/favicon-16x16.png',
      },
      { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
      { rel: 'icon', href: '/favicon.ico' },
    ]
  )
)

const route = new FileRoute({ getRootLink: () => <RootComponent /> })
  .createRoute({
    errorComponent: (props) => (
      <RootDocument>
        <DefaultCatchBoundary {...props} />
      </RootDocument>
    ),
    notFoundComponent: () => <NotFound />,
    component: RootComponent,
  })

export default route

```

----------------------------------------

TITLE: TanStackStart CLI Setup
DESCRIPTION: This snippet shows how to initialize a new TanStackStart project using the command-line interface (CLI). It utilizes npx to run the create-start-app package, ensuring the latest version is used for project creation.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/getting-started

LANGUAGE: bash
CODE:
```
npx create-start-app@latest
```

----------------------------------------

TITLE: Deploy TanStack Start to Vercel
DESCRIPTION: Configure your vite.config.ts file to target Vercel for deployment. This involves importing the tanstackStart plugin and setting the target option to 'vercel'.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/hosting

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/solid-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'vercel' })],
})
```

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/solid-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'vercel' })],
})
```

----------------------------------------

TITLE: Initialize TanStack Start Project
DESCRIPTION: Commands to create a new project directory, navigate into it, and initialize a new npm project. This is the first step in building a TanStack Start application from scratch.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/build-from-scratch

LANGUAGE: shell
CODE:
```
mkdir myApp
cd myApp
npm init -y
```

----------------------------------------

TITLE: Cloudflare Pages Wrangler Configuration
DESCRIPTION: Create a wrangler.toml file with necessary configurations for deploying to Cloudflare Pages, including build output directory and compatibility flags.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/hosting

LANGUAGE: toml
CODE:
```
# wrangler.toml
name = "your-cloudflare-project-name"
pages_build_output_dir = "./dist"
compatibility_flags = ["nodejs_compat"]
compatibility_date = "2024-11-13"
```

LANGUAGE: toml
CODE:
```
# wrangler.toml
name = "your-cloudflare-project-name"
pages_build_output_dir = "./dist"
compatibility_flags = ["nodejs_compat"]
compatibility_date = "2024-11-13"
```

----------------------------------------

TITLE: Execute Server-Side Logic (TanStack Start)
DESCRIPTION: Illustrates how to define and execute server-side logic using the `.server()` method. This example logs messages before and after executing the next middleware in the chain.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/solid-start'
const loggingMiddleware = createMiddleware({ type: 'function' }).server(
  async ({ next }) => {
    console.log('Request received')
    const result = await next()
    console.log('Response processed')
    return result
  },
)
```

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/solid-start'
const loggingMiddleware = createMiddleware({ type: 'function' }).server(
  async ({ next }) => {
    console.log('Request received')
    const result = await next()
    console.log('Response processed')
    return result
  },
)
```

----------------------------------------

TITLE: Integrate Sentry with TanStack Start
DESCRIPTION: This section discusses the integration of Sentry with TanStack Start for enhanced observability. While specific code examples are not yet available, the documentation indicates that TanStack Start is designed to work with any observability tool, with Sentry being the recommended solution for a comprehensive experience.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/observability

LANGUAGE: javascript
CODE:
```
// Documentation for integrating Sentry with TanStack Start is coming soon!
// TanStack Start is designed to work with any observability tool.
// For the best observability experience, Sentry is highly recommended.
// Example integration will be provided in future updates.
```

----------------------------------------

TITLE: Install Tailwind CSS and Vite Plugin (Shell)
DESCRIPTION: Installs Tailwind CSS and its associated Vite plugin using npm. This is the first step in integrating Tailwind CSS into a TanStack Start project.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/tailwind-integration

LANGUAGE: shell
CODE:
```
npm install tailwindcss @tailwindcss/vite

```

----------------------------------------

TITLE: Initialize Project with npm
DESCRIPTION: Commands to create a new project directory and initialize it with npm. This is the first step in building a TanStack Start project from scratch.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/build-from-scratch

LANGUAGE: shell
CODE:
```
mkdir myApp
cd myApp
npm init -y

```

----------------------------------------

TITLE: Build and Run Node.js Application
DESCRIPTION: Commands to build and start a TanStack Start application deployed to a Node.js server. First, build the application using 'npm run build', then start it with 'node .output/server/index.mjs'.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/hosting

LANGUAGE: bash
CODE:
```
npm run build
```

LANGUAGE: bash
CODE:
```
node .output/server/index.mjs
```

----------------------------------------

TITLE: TanStack Start: Counter App with Server Functions (TSX)
DESCRIPTION: An example of a counter application using TanStack Start server functions, TanStack Router, and file-system operations. It includes functions to get the current count and update it via a POST request, triggering a page reload for data synchronization. This demonstrates handling server-side logic and client-side rendering.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import * as fs from 'fs'
import { createFileRoute } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'
const filePath = 'count.txt'
async function readCount() {
  return parseInt(
    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),
  )
}
const getCount = createServerFn({
  method: 'GET',
}).handler(() => {
  return readCount()
})
const updateCount = createServerFn({ method: 'POST' })
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const addBy = formData.get('addBy')
    if (!addBy) {
      throw new Error('addBy is required')
    }
    return parseInt(addBy.toString())
  })
  .handler(async ({ data: addByAmount }) => {
    const count = await readCount()
    await fs.promises.writeFile(filePath, `${count + addByAmount}`)
    // Reload the page to trigger the loader again
    return new Response('ok', { status: 301, headers: { Location: '/' } })
  })
export const Route = createFileRoute('/')({
  component: Home,
  loader: async () => await getCount(),
})
function Home() {
  const state = Route.useLoaderData()
  return (
    <div>
      <form
        action={updateCount.url}
        method="POST"
        encType="multipart/form-data"
      >
        <input type="number" name="addBy" defaultValue="1" />
        <button type="submit">Add</button>
      </form>
      <pre>{state}</pre>
    </div>
  )
}
```

LANGUAGE: tsx
CODE:
```
import * as fs from 'fs'
import { createFileRoute } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'
const filePath = 'count.txt'
async function readCount() {
  return parseInt(
    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),
  )
}
const getCount = createServerFn({
  method: 'GET',
}).handler(() => {
  return readCount()
})
const updateCount = createServerFn({ method: 'POST' })
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const addBy = formData.get('addBy')
    if (!addBy) {
      throw new Error('addBy is required')
    }
    return parseInt(addBy.toString())
  })
  .handler(async ({ data: addByAmount }) => {
    const count = await readCount()
    await fs.promises.writeFile(filePath, `${count + addByAmount}`)
    // Reload the page to trigger the loader again
    return new Response('ok', { status: 301, headers: { Location: '/' } })
  })
export const Route = createFileRoute('/')({
  component: Home,
  loader: async () => await getCount(),
})
function Home() {
  const state = Route.useLoaderData()
  return (
    <div>
      <form
        action={updateCount.url}
        method="POST"
        encType="multipart/form-data"
      >
        <input type="number" name="addBy" defaultValue="1" />
        <button type="submit">Add</button>
      </form>
      <pre>{state}</pre>
    </div>
  )
}
```

----------------------------------------

TITLE: Navigate to a New Route using Link (TanStack Router)
DESCRIPTION: Demonstrates how to use the Link component from TanStack Router to create navigation links. This example shows a simple link to an 'about' route.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/learn-the-basics

LANGUAGE: tsx
CODE:
```
import { Link } from '@tanstack/solid-router'

function Home() {
  return <Link to="/about">About</Link>
}
```

----------------------------------------

TITLE: TanStack Start: Hydrate Client with SolidJS
DESCRIPTION: This snippet shows how to hydrate the client-side application using SolidJS and TanStack Start. It imports necessary components from 'solid-js/web' and '@tanstack/solid-start', creates a router, and then hydrates the root of the application with the StartClient component.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/learn-the-basics

LANGUAGE: tsx
CODE:
```
// app/client.tsx
import { hydrate } from 'solid-js/web'
import { StartClient } from '@tanstack/solid-start'
import { createRouter } from './router'

const router = createRouter()

hydrate(() => <StartClient router={router} />, document)

```

----------------------------------------

TITLE: Install Fonts with npm (Shell)
DESCRIPTION: Provides the npm command to install font packages from `@fontsource-variable` for use with Tailwind CSS in a TanStack Start project.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: sh
CODE:
```
npm i -D @fontsource-variable/dm-sans @fontsource-variable/jetbrains-mono
```

----------------------------------------

TITLE: Install vite-tsconfig-paths Plugin
DESCRIPTION: Installs the `vite-tsconfig-paths` package as a development dependency to enable path alias support in Vite.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/path-aliases

LANGUAGE: bash
CODE:
```
npm install -D vite-tsconfig-paths
```

----------------------------------------

TITLE: TanStack Start Server Function with Navigation (JS Disabled)
DESCRIPTION: Illustrates how server functions can instruct the browser to navigate or reload with new data when JavaScript is disabled. This example uses TanStack Router loaders to provide a SPA-like experience.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import * as fs from 'fs'
import { createFileRoute } from '@tanstack/solid-router'
import { createServerFn } from '@tanstack/solid-start'
const filePath = 'count.txt'
async function readCount() {
  return parseInt(
    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),
  )
}
const getCount = createServerFn({
  method: 'GET',
}).handler(() => {
  return readCount()
})
const updateCount = createServerFn({ method: 'POST' })
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const addBy = formData.get('addBy')
    if (!addBy) {
      throw new Error('addBy is required')
    }
    return parseInt(addBy.toString())
  })
  .handler(async ({ data: addByAmount }) => {
    const count = await readCount()
    await fs.promises.writeFile(filePath, `${count + addByAmount}`)
    // Reload the page to trigger the loader again
    return new Response('ok', { status: 301, headers: { Location: '/' } })
  })
export const Route = createFileRoute('/')({
  component: Home,
  loader: async () => await getCount(),
})
function Home() {
  const state = Route.useLoaderData()
  return (
    <div>
      <form
        action={updateCount.url}
        method="POST"
        encType="multipart/form-data"
      >
        <input type="number" name="addBy" defaultValue="1" />
        <button type="submit">Add</button>
      </form>
      <pre>{state()}</pre>
    </div>
  )
}
```

LANGUAGE: tsx
CODE:
```
import * as fs from 'fs'
import { createFileRoute } from '@tanstack/solid-router'
import { createServerFn } from '@tanstack/solid-start'
const filePath = 'count.txt'
async function readCount() {
  return parseInt(
    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),
  )
}
const getCount = createServerFn({
  method: 'GET',
}).handler(() => {
  return readCount()
})
const updateCount = createServerFn({ method: 'POST' })
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const addBy = formData.get('addBy')
    if (!addBy) {
      throw new Error('addBy is required')
    }
    return parseInt(addBy.toString())
  })
  .handler(async ({ data: addByAmount }) => {
    const count = await readCount()
    await fs.promises.writeFile(filePath, `${count + addByAmount}`)
    // Reload the page to trigger the loader again
    return new Response('ok', { status: 301, headers: { Location: '/' } })
  })
export const Route = createFileRoute('/')({
  component: Home,
  loader: async () => await getCount(),
})
function Home() {
  const state = Route.useLoaderData()
  return (
    <div>
      <form
        action={updateCount.url}
        method="POST"
        encType="multipart/form-data"
      >
        <input type="number" name="addBy" defaultValue="1" />
        <button type="submit">Add</button>
      </form>
      <pre>{state()}</pre>
    </div>
  )
}
```

----------------------------------------

TITLE: Install vite-tsconfig-paths Plugin
DESCRIPTION: This command installs the 'vite-tsconfig-paths' package as a development dependency. This plugin is essential for enabling the path aliases defined in your tsconfig.json file within your TanStack Start project.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/path-aliases

LANGUAGE: bash
CODE:
```
npm install -D vite-tsconfig-paths
```

----------------------------------------

TITLE: Install TypeScript and Vite TS Paths
DESCRIPTION: Installs TypeScript and vite-tsconfig-paths as development dependencies. These tools are crucial for type checking and path aliasing in the project.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/build-from-scratch

LANGUAGE: shell
CODE:
```
npm i -D typescript vite-tsconfig-paths

```

----------------------------------------

TITLE: TanStack Start: Debugging Form Submissions
DESCRIPTION: Details common problems and solutions for form submissions in TanStack Start applications. Addresses validation errors, event prevention, state updates, and network errors.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: JavaScript
CODE:
```
// Check for validation errors in server function
// Verify event.preventDefault() is working
// Ensure state updates are correct
// Look for network errors in Developer Tools
```

----------------------------------------

TITLE: TanStack Start Basic Auth Setup (TSX)
DESCRIPTION: This TSX code sets up the root route for a TanStack Start application, including server-side authentication logic, meta tags, and basic navigation. It defines how to fetch user data on the server and uses it to conditionally render login/logout links.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-basic-auth

LANGUAGE: tsx
CODE:
```
/// <reference types="vite/client" />
import {
  HeadContent,
  Link,
  Outlet,
  Scripts,
  createRootRoute,
} from '@tanstack/react-router'
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'
import { createServerFn } from '@tanstack/react-start'
import * as React from 'react'
import { DefaultCatchBoundary } from '~/components/DefaultCatchBoundary.js'
import { NotFound } from '~/components/NotFound.js'
import appCss from '~/styles/app.css?url'
import { seo } from '~/utils/seo.js'
import { useAppSession } from '~/utils/session.js'
const fetchUser = createServerFn({ method: 'GET' }).handler(async () => {
  // We need to auth on the server so we have access to secure cookies
  const session = await useAppSession()
  if (!session.data.userEmail) {
    return null
  }
  return {
    email: session.data.userEmail,
  }
})
export const Route = createRootRoute({
  beforeLoad: async () => {
    const user = await fetchUser()
    return {
      user,
    }
  },
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      ...seo({
        title:
          'TanStack Start | Type-Safe, Client-First, Full-Stack React Framework',
        description: `TanStack Start is a type-safe, client-first, full-stack React framework. `,
      }),
    ],
    links: [
      { rel: 'stylesheet', href: appCss },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        href: '/apple-touch-icon.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '32x32',
        href: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '16x16',
        href: '/favicon-16x16.png',
      },
      { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
      { rel: 'icon', href: '/favicon.ico' },
    ],
  }),
  errorComponent: (props) => {
    return (
      <RootDocument>
        <DefaultCatchBoundary {...props} />
      </RootDocument>
    )
  },
  notFoundComponent: () => <NotFound />,
  component: RootComponent,
})
function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}
function RootDocument({ children }: { children: React.ReactNode }) {
  const { user } = Route.useRouteContext()
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="p-2 flex gap-2 text-lg">
          <Link
            to="/"
            activeProps={{
              className: 'font-bold',
            }}
            activeOptions={{ exact: true }}
          >
            Home
          </Link>{' '}
          <Link
            to="/posts"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Posts
          </Link>
          <div className="ml-auto">
            {user ? (
              <>
                <span className="mr-2">{user.email}</span>
                <Link to="/logout">Logout</Link>
              </>
            ) : (
              <Link to="/login">Login</Link>
            )}
          </div>
        </div>
        <hr />
        {children}
        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}

```

----------------------------------------

TITLE: Define and Load Routes with Data Fetching (TanStack Start)
DESCRIPTION: Defines a route using createFileRoute, implementing server-side functions for GET and POST requests to read and update a counter from a file. The loader fetches the initial count, and a button component allows incrementing the counter, triggering a router invalidation.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/learn-the-basics

LANGUAGE: tsx
CODE:
```
import * as fs from 'node:fs'
import { createFileRoute, useRouter } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'

const filePath = 'count.txt'

async function readCount() {
  return parseInt(
    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),
  )
}

const getCount = createServerFn({
  method: 'GET',
}).handler(() => {
  return readCount()
})

const updateCount = createServerFn({ method: 'POST' })
  .validator((d: number) => d)
  .handler(async ({ data }) => {
    const count = await readCount()
    await fs.promises.writeFile(filePath, `${count + data}`)
  })

export const Route = createFileRoute('/')({
  component: Home,
  loader: async () => await getCount(),
})

function Home() {
  const router = useRouter()
  const state = Route.useLoaderData()

  return (
    <button
      type="button"
      onClick={() => {
        updateCount({ data: 1 }).then(() => {
          router.invalidate()
        })
      }}
    >
      Add 1 to {state}?
    </button>
  )
}
```

----------------------------------------

TITLE: TanStack Start Supabase Auth Setup (TSX)
DESCRIPTION: Sets up the root route for a TanStack Start application, integrating Supabase for user authentication. It defines server-side fetching for user data, handles meta tags and links for SEO and styling, and includes components for error and not-found states. The main component renders navigation with login/logout links based on the user's authentication status.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-supabase-basic

LANGUAGE: tsx
CODE:
```
/// <reference types="vite/client" />
import {
  HeadContent,
  Link,
  Outlet,
  Scripts,
  createRootRoute,
} from '@tanstack/react-router'
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'
import { createServerFn } from '@tanstack/react-start'
import * as React from 'react'
import { DefaultCatchBoundary } from '../components/DefaultCatchBoundary'
import { NotFound } from '../components/NotFound'
import appCss from '../styles/app.css?url'
import { seo } from '../utils/seo'
import { getSupabaseServerClient } from '../utils/supabase'
const fetchUser = createServerFn({ method: 'GET' }).handler(async () => {
  const supabase = getSupabaseServerClient()
  const { data, error: _error } = await supabase.auth.getUser()
  if (!data.user?.email) {
    return null
  }
  return {
    email: data.user.email,
  }
})
export const Route = createRootRoute({
  beforeLoad: async () => {
    const user = await fetchUser()
    return {
      user,
    }
  },
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      ...seo({
        title:
          'TanStack Start | Type-Safe, Client-First, Full-Stack React Framework',
        description: `TanStack Start is a type-safe, client-first, full-stack React framework. `,
      }),
    ],
    links: [
      { rel: 'stylesheet', href: appCss },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        href: '/apple-touch-icon.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '32x32',
        href: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '16x16',
        href: '/favicon-16x16.png',
      },
      { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
      { rel: 'icon', href: '/favicon.ico' },
    ],
  }),
  errorComponent: (props) => {
    return (
      <RootDocument>
        <DefaultCatchBoundary {...props} />
      </RootDocument>
    )
  },
  notFoundComponent: () => <NotFound />,
  component: RootComponent,
})
function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}
function RootDocument({ children }: { children: React.ReactNode }) {
  const { user } = Route.useRouteContext()
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="p-2 flex gap-2 text-lg">
          <Link
            to="/"
            activeProps={{
              className: 'font-bold',
            }}
            activeOptions={{ exact: true }}
          >
            Home
          </Link>{' '}
          <Link
            to="/posts"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Posts
          </Link>
          <div className="ml-auto">
            {user ? (
              <>
                <span className="mr-2">{user.email}</span>
                <Link to="/logout">Logout</Link>
              </>
            ) : (
              <Link to="/login">Login</Link>
            )}
          </div>
        </div>
        <hr />
        {children}
        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}

```

----------------------------------------

TITLE: Configure Vite for Node.js Server
DESCRIPTION: Set the target in vite.config.ts to 'node-server' for deploying your TanStack Start application to a Node.js server.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/hosting

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/solid-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'node-server' })],
})
```

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/solid-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'node-server' })],
})
```

----------------------------------------

TITLE: TanStack Start Vite Plugin for Vercel
DESCRIPTION: Configure the TanStack Start Vite plugin to target Vercel by setting the 'target' option to 'vercel' in your vite.config.ts file. This setup is for deploying to Vercel.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/hosting

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/react-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'vercel' })],
})
```

----------------------------------------

TITLE: TanStack Start Configuration
DESCRIPTION: Configuration for TanStack Start, including viewport settings, SEO metadata, and favicon links. This sets up the basic structure and metadata for the web application.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-basic-react-query

LANGUAGE: javascript
CODE:
```
{
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      ...seo({
        title:
          'TanStack Start | Type-Safe, Client-First, Full-Stack React Framework',
        description: `TanStack Start is a type-safe, client-first, full-stack React framework. `,
      }),
    ],
    links: [
      { rel: 'stylesheet', href: appCss },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        href: '/apple-touch-icon.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '32x32',
        href: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '16x16',
        href: '/favicon-16x16.png',
      },
      { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
      { rel: 'icon', href: '/favicon.ico' },
    ],
  })
```

----------------------------------------

TITLE: TanStack Start: Debugging Route Data Loading
DESCRIPTION: Offers solutions for issues with route data not loading in TanStack Start. Covers verifying loader functions, correct usage of useLoaderData, checking browser console errors, and ensuring server functions are operational.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: JavaScript
CODE:
```
// Verify loader function implementation
// Check useLoaderData() usage
// Look for errors in the browser console
// Ensure server function is working correctly
```

----------------------------------------

TITLE: TanStack Start Client Entry Point (tsx)
DESCRIPTION: Sets up the client entry point for TanStack Start applications, responsible for hydrating the client-side JavaScript. It uses StartClient to render the application and hydrate the root, enabling client-side routing after server requests.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/learn-the-basics

LANGUAGE: tsx
CODE:
```
// src/client.tsx
import { StartClient } from '@tanstack/react-start'
import { StrictMode } from 'react'
import { hydrateRoot } from 'react-dom/client'
import { createRouter } from './router'

const router = createRouter()

hydrateRoot(
  document,
  <StrictMode>
    <StartClient router={router} />
  </StrictMode>,
)

```

LANGUAGE: tsx
CODE:
```
// src/client.tsx
import { StartClient } from '@tanstack/react-start'
import { StrictMode } from 'react'
import { hydrateRoot } from 'react-dom/client'
import { createRouter } from './router'

const router = createRouter()

hydrateRoot(
  document,
  <StrictMode>
    <StartClient router={router} />
  </StrictMode>,
)

```

----------------------------------------

TITLE: Define a Server Route with GET Method
DESCRIPTION: This TypeScript code defines a server route named 'hello' using `createServerFileRoute`. It specifically configures a GET method handler that returns a 'Hello, World!' response, including the request URL.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: ts
CODE:
```
// routes/hello.ts
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    return new Response('Hello, World! from ' + request.url)
  },
})
```

LANGUAGE: ts
CODE:
```
// routes/hello.ts
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    return new Response('Hello, World! from ' + request.url)
  },
})
```

----------------------------------------

TITLE: TanStack Start Server Entry Point
DESCRIPTION: This code defines the server entry point for TanStack Start, handling server-side rendering (SSR) and request processing. It uses createStartHandler and defaultStreamHandler from '@tanstack/solid-start/server' to manage the application's server-side logic.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/learn-the-basics

LANGUAGE: tsx
CODE:
```
// src/server.ts
import {
  createStartHandler,
  defaultStreamHandler,
} from '@tanstack/solid-start/server'

import { createRouter } from './router'

export default createStartHandler({
  createRouter,
})(defaultStreamHandler)

```

----------------------------------------

TITLE: Implement Authentication with TanStack Start
DESCRIPTION: TanStack Start provides full-stack APIs to integrate authentication. While it supports any provider, Clerk is recommended for a seamless experience. Custom authentication documentation is planned.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/authentication

LANGUAGE: javascript
CODE:
```
// TanStack Start authentication APIs are available for full-stack integration.
// Example of using a custom authentication provider (details coming soon):
// import { auth } from '@tanstack/start/api';
// auth.init({
//   provider: 'custom',
//   // ... custom provider configuration
// });

// For Clerk integration, refer to Clerk's documentation.
// Example placeholder for Clerk integration:
// import { ClerkProvider } from '@clerk/clerk-react';
//
// function App({ Component, pageProps }) {
//   return (
//     <ClerkProvider publishableKey="YOUR_PUBLISHABLE_KEY">
//       <Component {...pageProps} />
//     </ClerkProvider>
//   );
// }
```

----------------------------------------

TITLE: Configure Static Prerendering with TanStack Start
DESCRIPTION: This code snippet demonstrates how to configure static prerendering for a TanStack Start Solid application by modifying the `vite.config.ts` file. It includes options for enabling prerendering, controlling subfolder indexing, setting concurrency, crawling links, filtering pages, managing retries, and defining success callbacks. It also shows how to configure specific pages for prerendering.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/static-prerendering

LANGUAGE: typescript
CODE:
```
import { tanstackStart } from '@tanstack/solid-start/plugin/vite'

export default defineConfig({
  plugins: [
    tanstackStart({
      prerender: {
        // Enable prerendering
        enabled: true,

        // Enable if you need pages to be at `/page/index.html` instead of `/page.html`
        autoSubfolderIndex: true,

        // How many prerender jobs to run at once
        concurrency: 14,

        // Whether to extract links from the HTML and prerender them also
        crawlLinks: true,

        // Filter function takes the page object and returns whether it should prerender
        filter: ({ path }) => !path.startsWith('/do-not-render-me'),

        // Number of times to retry a failed prerender job
        retryCount: 2,

        // Delay between retries in milliseconds
        retryDelay: 1000,

        // Callback when page is successfully rendered
        onSuccess: ({ page }) => {
          console.log(`Rendered ${page.path}!`)
        },
      },
      // Optional configuration for specific pages (without this it will still automatically
      // prerender all routes)
      pages: [
        {
          path: '/my-page',
          prerender: { enabled: true, outputPath: '/my-page/index.html' },
        },
      ],
    }),
  ],
})
```

----------------------------------------

TITLE: Configure Vite with TanStack Start Plugin (vite.config.ts)
DESCRIPTION: Sets up the Vite configuration file (vite.config.ts) to include the TanStack Start plugin, tsConfigPaths, and the SolidJS Vite plugin. This enables server-side rendering and custom Vite Solid plugin integration.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/build-from-scratch

LANGUAGE: ts
CODE:
```
// vite.config.ts
import { defineConfig } from 'vite'
import tsConfigPaths from 'vite-tsconfig-paths'
import { tanstackStart } from '@tanstack/solid-start/plugin/vite'
import viteSolid from 'vite-plugin-solid'
export default defineConfig({
  server: {
    port: 3000,
  },
  plugins: [
    tsConfigPaths(),
    tanstackStart({ customViteSolidPlugin: true }),
    viteSolid({ ssr: true }),
  ],
})

```

----------------------------------------

TITLE: Install Tailwind CSS v3 (Shell)
DESCRIPTION: Installs Tailwind CSS version 3 along with its peer dependencies (PostCSS and Autoprefixer) using npm. This is the initial step for setting up Tailwind CSS in a project.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/tailwind-integration

LANGUAGE: shell
CODE:
```
npm install -D tailwindcss@3 postcss autoprefixer

```

----------------------------------------

TITLE: Define Server Routes in TanStack Start (TS)
DESCRIPTION: Shows how to define server routes in TanStack Start using `createServerFileRoute` and the `methods` configuration. This allows for handling different HTTP methods like GET, POST, etc., for API endpoints.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: ts
CODE:
```
export const ServerRoute = createServerFileRoute().methods({
  GET: async () => {
    return Response.json("Hello, World!")
  }
})
```

----------------------------------------

TITLE: Custom TanStack Start Handler
DESCRIPTION: This example shows how to define a custom server handler in `server.ts` by creating a `startHandler` within a `defineHandler` function. This allows for custom logic before passing the event to the default stream handler.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: tsx
CODE:
```
import { createStartHandler } from '@tanstack/solid-start/server'

export default defineHandler((event) => {
  const startHandler = createStartHandler({
    createRouter,
  })(defaultStreamHandler)

  return startHandler(event)
})
```

LANGUAGE: tsx
CODE:
```
import { createStartHandler } from '@tanstack/solid-start/server'

export default defineHandler((event) => {
  const startHandler = createStartHandler({
    createRouter,
  })(defaultStreamHandler)

  return startHandler(event)
})
```

----------------------------------------

TITLE: Sample Jokes Data in JSON Format
DESCRIPTION: This JSON structure contains an array of joke objects, each with an 'id', 'question', and 'answer'. This data will be used to populate the application with jokes.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: json
CODE:
```
[
  {
    "id": "1",
    "question": "Why don't keyboards sleep?",
    "answer": "Because they have two shifts"
  },
  {
    "id": "2",
    "question": "Are you a RESTful API?",
    "answer": "Because you GET my attention, PUT some love, POST the cutest smile, and DELETE my bad day"
  },
  {
    "id": "3",
    "question": "I used to know a joke about Java",
    "answer": "But I ran out of memory."
  },
  {
    "id": "4",
    "question": "Why do Front-End Developers eat lunch alone?",
    "answer": "Because, they don't know how to join tables."
  },
  {
    "id": "5",
    "question": "I am declaring a war.",
    "answer": "var war;"
  }
]
```

----------------------------------------

TITLE: Create TanStack Start Handler
DESCRIPTION: This code snippet demonstrates how to create a TanStack Start handler using `createStartHandler` and `defaultStreamHandler` in the `server.ts` entry file. It includes importing necessary functions and configuring the router.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: tsx
CODE:
```
import {
  createStartHandler,
  defaultStreamHandler,
} from '@tanstack/solid-start/server'
import { createRouter } from './router'

export default createStartHandler({
  createRouter,
})(defaultStreamHandler)
```

LANGUAGE: tsx
CODE:
```
import {
  createStartHandler,
  defaultStreamHandler,
} from '@tanstack/solid-start/server'
import { createRouter } from './router'

export default createStartHandler({
  createRouter,
})(defaultStreamHandler)
```

----------------------------------------

TITLE: TypeScript Configuration (tsconfig.json)
DESCRIPTION: Essential TypeScript configuration for a TanStack Start project. It includes settings for JSX, module resolution, and strict null checks, recommended for optimal development.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/build-from-scratch

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "jsx": "preserve",
    "jsxImportSource": "solid-js",
    "moduleResolution": "Bundler",
    "module": "ESNext",
    "target": "ES2022",
    "skipLibCheck": true,
    "strictNullChecks": true
  }
}

```

----------------------------------------

TITLE: Install Tailwind CSS and Vite Path Aliases
DESCRIPTION: Installs development dependencies for Tailwind CSS integration with Vite and for resolving path aliases using tsconfig-paths.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: sh
CODE:
```
npm i -D @tailwindcss/vite tailwindcss vite-tsconfig-paths
```

----------------------------------------

TITLE: Define a Basic Server Route
DESCRIPTION: This snippet demonstrates how to define a simple server route using `createServerFileRoute` and handle a GET request. It returns a 'Hello, World!' response.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: TypeScript
CODE:
```
import { createServerFileRoute } from '@tanstack/start';

export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    return new Response('Hello, World!');
  },
});
```

----------------------------------------

TITLE: Configure Vite for Cloudflare Pages
DESCRIPTION: Update your vite.config.ts file to set the target to 'cloudflare-module' for Cloudflare Pages deployment.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/hosting

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/solid-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'cloudflare-module' })],
})
```

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/solid-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'cloudflare-module' })],
})
```

----------------------------------------

TITLE: Configure TanStack Start SPA Mode
DESCRIPTION: This code snippet demonstrates how to enable Single Page Application (SPA) mode in TanStack Start by configuring the `spa` option within the `TanStackStart` plugin in a `vite.config.ts` file. This setup is crucial for applications that do not require SSR.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/spa-mode

LANGUAGE: tsx
CODE:
```
import { defineConfig } from 'vite'
import TanStackStart from '@tanstack/start'

export default defineConfig({
  plugins: [
    TanStackStart({
      spa: {
        enabled: true,
      },
    }),
  ],
})
```

LANGUAGE: tsx
CODE:
```
import { defineConfig } from 'vite'
import TanStackStart from '@tanstack/start'

export default defineConfig({
  plugins: [
    TanStackStart({
      spa: {
        enabled: true,
      },
    }),
  ],
})
```

----------------------------------------

TITLE: Create Server Function to Read Jokes (TSX)
DESCRIPTION: This server function, created using `createServerFn`, reads joke data from a JSON file. It utilizes Node.js's `fs` module for file operations and is configured for GET requests.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: tsx
CODE:
```
// src/serverActions/jokesActions.ts
import { createServerFn } from '@tanstack/react-start'
import * as fs from 'node:fs'
import type { JokesData } from '../types'
const JOKES_FILE = 'src/data/jokes.json'
export const getJokes = createServerFn({ method: 'GET' }).handler(async () => {
  const jokes = await fs.promises.readFile(JOKES_FILE, 'utf-8')
  return JSON.parse(jokes) as JokesData
})
```

----------------------------------------

TITLE: TanStack Router Root Document Setup
DESCRIPTION: Sets up the root document component for a TanStack Router application. It includes navigation links for Home, Posts, Users, Pathless Layout, Deferred, and a non-existent route, along with TanStack Router Devtools and scripts.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/examples/start-basic

LANGUAGE: jsx
CODE:
```
import { Link } from '@tanstack/react-router';
import { Scripts } from '@remix-run/react';
import { TanStackRouterDevtools } from '@tanstack/router-devtools';
import * as Solid from 'solid-js';

// Assuming these components are defined elsewhere
// import { HeadContent } from './HeadContent';
// import { NotFound } from './NotFound';
// import { DefaultCatchBoundary } from './DefaultCatchBoundary';

// Placeholder for HeadContent, NotFound, and DefaultCatchBoundary
const HeadContent = () => <></>;
const NotFound = () => <div>Not Found</div>;
const DefaultCatchBoundary = () => <div>Error</div>;

// Example Router configuration (simplified)
// const router = createRouter({
//   routeTree: routeTree,
//   defaultNotFoundComponent: NotFound,
//   errorComponent: DefaultCatchBoundary,
//   shellComponent: RootDocument,
// });

function RootDocument({ children }: { children: Solid.JSX.Element }) {
  return (
    <>
      <HeadContent />
      <div class="p-2 flex gap-2 text-lg">
        <Link
          to="/"
          activeProps={{
            class: 'font-bold',
          }}
          activeOptions={{
            exact: true,
          }}
        >
          Home
        </Link>{' '}
        <Link
          to="/posts"
          activeProps={{
            class: 'font-bold',
          }}
        >
          Posts
        </Link>{' '}
        <Link
          to="/users"
          activeProps={{
            class: 'font-bold',
          }}
        >
          Users
        </Link>{' '}
        <Link
          to="/route-a"
          activeProps={{
            class: 'font-bold',
          }}
        >
          Pathless Layout
        </Link>{' '}
        <Link
          to="/deferred"
          activeProps={{
            class: 'font-bold',
          }}
        >
          Deferred
        </Link>{' '}
        <Link
          // @ts-expect-error
          to="/this-route-does-not-exist"
          activeProps={{
            class: 'font-bold',
          }}
        >
          This Route Does Not Exist
        </Link>
      </div>
      <hr />
      {children}
      <TanStackRouterDevtools position="bottom-right" />
      <Scripts />
    </>
  )
}

```

----------------------------------------

TITLE: Define and Load Routes with Data Fetching (TanStack Router)
DESCRIPTION: Defines a route using createFileRoute, sets up server functions for GET and POST requests to read and update a counter from a file, and uses the loader to fetch initial data. The component displays a button to increment the counter and re-invalidate the router.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/learn-the-basics

LANGUAGE: tsx
CODE:
```
import * as fs from 'node:fs'
import { createFileRoute, useRouter } from '@tanstack/solid-router'
import { createServerFn } from '@tanstack/solid-start'

const filePath = 'count.txt'

async function readCount() {
  return parseInt(
    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),
  )
}

const getCount = createServerFn({
  method: 'GET',
}).handler(() => {
  return readCount()
})

const updateCount = createServerFn({ method: 'POST' })
  .validator((d: number) => d)
  .handler(async ({ data }) => {
    const count = await readCount()
    await fs.promises.writeFile(filePath, `${count + data}`)
  })

export const Route = createFileRoute('/')({
  component: Home,
  loader: async () => await getCount(),
})

function Home() {
  const router = useRouter()
  const state = Route.useLoaderData()

  return (
    <button
      type="button"
      onClick={() => {
        updateCount({ data: 1 }).then(() => {
          router.invalidate()
        })
      }}
    >
      Add 1 to {state}?
    </button>
  )
}
```

----------------------------------------

TITLE: Clone Starter Template
DESCRIPTION: Clones a Next.js starter template configured for TanStack Start to begin the migration.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: sh
CODE:
```
npx gitpick nrjdalal/awesome-templates/tree/main/next.js-apps/next.js-start next.js-start-er
```

----------------------------------------

TITLE: TanStackStart v0 - Static Prerendering Guide
DESCRIPTION: Explains static prerendering in TanStackStart v0, a technique to pre-generate HTML files for enhanced performance and compatibility with static hosting. It covers the benefits of serving static content without on-the-fly generation.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/static-prerendering

LANGUAGE: plaintext
CODE:
```
Static prerendering is the process of generating static HTML files for your application. This can be useful for either improving the performance of your application, as it allows you to serve pre-rendered HTML files to users without having to generate them on the fly or for deploying static sites to platforms that do not support server-side rendering.
```

----------------------------------------

TITLE: TanStack Start Server Entry Point (tsx)
DESCRIPTION: Defines the server entry point for TanStack Start applications, handling SSR logic. It uses createStartHandler with a custom router and a default stream handler for rendering. This file is crucial for both static generation and dynamic SSR.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/learn-the-basics

LANGUAGE: tsx
CODE:
```
// src/server.ts
import {
  createStartHandler,
  defaultStreamHandler,
} from '@tanstack/react-start/server'
import { createRouter } from './router'

export default createStartHandler({
  createRouter,
})(defaultStreamHandler)

```

LANGUAGE: tsx
CODE:
```
// src/server.ts
import {
  createStartHandler,
  defaultStreamHandler,
} from '@tanstack/react-start/server'
import { createRouter } from './router'

export default createStartHandler({
  createRouter,
})(defaultStreamHandler)

```

----------------------------------------

TITLE: TanStack Start: Return Raw Response Object
DESCRIPTION: Demonstrates how to return a raw Response object from a TanStack Start server function by setting the 'response' option to 'raw'. This allows for direct control over the HTTP response, including fetching data from external sources.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
export const getServerTime = createServerFn({
  method: 'GET',
  response: 'raw',
}).handler(async () => {
  // Read a file from s3
  return fetch('https://example.com/time.txt')
})
```

----------------------------------------

TITLE: TanStack Start: Define Root Route with Head Content
DESCRIPTION: This snippet demonstrates defining the root route for a TanStack Start application using SolidJS. It sets up the head content, including character set, viewport meta tag, and title. The component renders an Outlet for nested routes and includes the Scripts component for client-side JavaScript.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/learn-the-basics

LANGUAGE: tsx
CODE:
```
// app/routes/__root.tsx
import {
  Outlet,
  createRootRoute,
  HeadContent,
  Scripts,
} from '@tanstack/solid-router'

export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      {
        title: 'TanStack Start Starter',
      },
    ],
  }),
  component: RootComponent,
})

function RootComponent() {
  return <Outlet />
}

```

----------------------------------------

TITLE: TanStack Start Features
DESCRIPTION: TanStack Start extends TanStack Router with full-stack capabilities, including full-document SSR, streaming, server functions (RPCs), bundling, and deployment, all while maintaining full-stack type safety.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/overview

LANGUAGE: JavaScript
CODE:
```
Full-document SSR
Streaming
Server Functions / RPCs
Bundling
Deployment
Full-Stack Type Safety
```

----------------------------------------

TITLE: Use Tailwind CSS in TanStack Router (TSX)
DESCRIPTION: Demonstrates how to use Tailwind CSS classes within a component in a TanStack Router project. This example shows a simple 'Hello World' div with red background and white text, utilizing Tailwind's utility classes.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/tailwind-integration

LANGUAGE: tsx
CODE:
```
// src/routes/index.tsx
import { createFileRoute } from '@tanstack/react-router'
export const Route = createFileRoute('/')({
  component: Home,
})
function Home() {
  return <div className="bg-red-500 text-white p-4">Hello World</div>
}
```

----------------------------------------

TITLE: TanStack Start: Configure SPA Prerendering Options
DESCRIPTION: This Vite configuration example shows how to override the default prerendering options for the SPA shell with TanStack Start, including setting a custom outputPath, enabling link crawling, and increasing the retry count.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/spa-mode

LANGUAGE: tsx
CODE:
```
// vite.config.ts
export default defineConfig({
  plugins: [
    TanStackStart({
      spa: {
        prerender: {
          outputPath: '/custom-shell',
          crawlLinks: true,
          retryCount: 3,
        },
      },
    }),
  ],
})
```

LANGUAGE: tsx
CODE:
```
// vite.config.ts
export default defineConfig({
  plugins: [
    TanStackStart({
      spa: {
        prerender: {
          outputPath: '/custom-shell',
          crawlLinks: true,
          retryCount: 3,
        },
      },
    }),
  ],
})
```

----------------------------------------

TITLE: TanStack Router Configuration (SolidJS)
DESCRIPTION: Configures the TanStack Router for a SolidJS application. This file dictates the router's behavior, including preloading and caching. It imports `createRouter` from '@tanstack/solid-router' and the generated `routeTree`.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/build-from-scratch

LANGUAGE: tsx
CODE:
```
// src/router.tsx
import { createRouter as createTanStackRouter } from '@tanstack/solid-router'
import { routeTree } from './routeTree.gen'
export function createRouter() {
  const router = createTanStackRouter({
    routeTree,
    scrollRestoration: true,
  })
  return router
}
declare module '@tanstack/solid-router' {
  interface Register {
    router: ReturnType<typeof createRouter>
  }
}
```

----------------------------------------

TITLE: TanStack Start TypeScript Configuration
DESCRIPTION: Essential TypeScript configuration for a TanStack Start project. It specifies JSX rendering, module resolution, module format, target ECMAScript version, and enables strict null checks for better type safety.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/build-from-scratch

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "jsx": "react-jsx",
    "moduleResolution": "Bundler",
    "module": "ESNext",
    "target": "ES2022",
    "skipLibCheck": true,
    "strictNullChecks": true
  }
}
```

----------------------------------------

TITLE: Run Development Server
DESCRIPTION: This command initiates the development server for the TanStack Start project, allowing you to preview your application locally.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: sh
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Create Jokes Data Directory and File
DESCRIPTION: This bash command creates a new directory named 'data' inside the 'src' folder and then creates an empty file named 'jokes.json' within that directory. This is the first step in setting up a file-based storage system for jokes.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: bash
CODE:
```
mkdir -p src/data
touch src/data/jokes.json
```

----------------------------------------

TITLE: Upgrade React Packages for Bun Deployment
DESCRIPTION: Upgrade React and ReactDOM packages to version 19.0.0 or higher using npm for compatibility with Bun deployment guidelines. This command ensures the necessary React versions are installed.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/hosting

LANGUAGE: bash
CODE:
```
npm install react@rc react-dom@rc
```

----------------------------------------

TITLE: TanStack Start: Streaming Responses
DESCRIPTION: Illustrates how to implement streaming responses using the 'response: raw' option in TanStack Start. This example shows how to create a ReadableStream to send data incrementally, suitable for Server-Sent Events (SSE) or other streaming scenarios.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
export const streamEvents = createServerFn({
  method: 'GET',
  response: 'raw',
}).handler(async ({ signal }) => {
  // Create a ReadableStream to send chunks of data
  const stream = new ReadableStream({
    async start(controller) {
      // Send initial response immediately
      controller.enqueue(new TextEncoder().encode('Connection established\n'))
      let count = 0
      const interval = setInterval(() => {
        // Check if the client disconnected
        if (signal.aborted) {
          clearInterval(interval)
          controller.close()
          return
        }
        // Send a data chunk
        controller.enqueue(
          new TextEncoder().encode(
            `Event ${++count}: ${new Date().toISOString()}\n`,
          ),
        )
        // End after 10 events
        if (count >= 10) {
          clearInterval(interval)
          controller.close()
        }
      }, 1000)
      // Ensure we clean up if the request is aborted
      signal.addEventListener('abort', () => {
        clearInterval(interval)
        controller.close()
      })
    },
  })
  // Return a streaming response
  return new Response(stream, {
    headers: {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      Connection: 'keep-alive',
    },
  })
})
```

----------------------------------------

TITLE: TanStack Start: Configure SPA Shell Mask Path
DESCRIPTION: This Vite configuration example demonstrates how to set a custom 'maskPath' for the SPA shell using the tanstackStart plugin, changing it from the default '/' to '/app'.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/spa-mode

LANGUAGE: tsx
CODE:
```
// vite.config.ts
export default defineConfig({
  plugins: [
    tanstackStart({
      spa: {
        maskPath: '/app',
      },
    }),
  ],
})
```

LANGUAGE: tsx
CODE:
```
// vite.config.ts
export default defineConfig({
  plugins: [
    tanstackStart({
      spa: {
        maskPath: '/app',
      },
    }),
  ],
})
```

----------------------------------------

TITLE: Configure Server Function with Options
DESCRIPTION: Demonstrates configuring a server function with specific HTTP method ('GET') and response handling mode ('data'). This allows customization of how the server function interacts with HTTP requests and processes responses.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
export const getData = createServerFn({
  method: 'GET', // HTTP method to use
  response: 'data', // Response handling mode
}).handler(async () => {
  // Function implementation
})
```

----------------------------------------

TITLE: TanStack Start Vite Plugin for Bun
DESCRIPTION: Configure the TanStack Start Vite plugin to target Bun by setting the 'target' option to 'bun' in your vite.config.ts file. This configuration is specific to deploying with Bun.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/hosting

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/react-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'bun' })],
})
```

----------------------------------------

TITLE: Render Jokes List Component (TSX)
DESCRIPTION: A React component that takes an array of jokes and renders them. It displays a message if no jokes are found and formats each joke with a question and answer.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: tsx
CODE:
```
// src/components/JokesList.tsx
import { Joke } from '../types'
interface JokesListProps {
  jokes: Joke[]
}
export function JokesList({ jokes }: JokesListProps) {
  if (!jokes || jokes.length === 0) {
    return <p className="text-gray-500 italic">No jokes found. Add some!</p>
  }
  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold">Jokes Collection</h2>
      {jokes.map((joke) => (
        <div
          key={joke.id}
          className="bg-white p-4 rounded-lg shadow-md border border-gray-200"
        >
          <p className="font-bold text-lg mb-2">{joke.question}</p>
          <p className="text-gray-700">{joke.answer}</p>
        </div>
      ))}
    </div>
  )
}
```

----------------------------------------

TITLE: TanStack Start: Basic Server Function Call (TS)
DESCRIPTION: Demonstrates calling a TanStack Start server function. When JavaScript is enabled, the return value is directly accessible via `.then()`. This example shows a simple server function that returns a string.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: typescript
CODE:
```
const yourFn = createServerFn().handler(async () => {
  return 'Hello, world!'
})
// `.then` is not available when JavaScript is disabled
yourFn().then(console.log)
```

LANGUAGE: typescript
CODE:
```
const yourFn = createServerFn().handler(async () => {
  return 'Hello, world!'
})
// `.then` is not available when JavaScript is disabled
yourFn().then(console.log)
```

----------------------------------------

TITLE: TanStack Router Setup with Clerk Auth
DESCRIPTION: Configures the TanStack Router with ClerkProvider for authentication and sets up root components for the application. Includes routing for Home and Posts, and handles user authentication status.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-clerk-basic

LANGUAGE: jsx
CODE:
```
import { Outlet, Link, Scripts, HeadContent } from '@tanstack/react-router'
import { ClerkProvider, SignedIn, SignedOut, SignInButton, UserButton } from '@clerk/clerk-react'
import { TanStackRouterDevtools } from '@tanstack/router-devtools'

// Assume NotFound and DefaultCatchBoundary are defined elsewhere
// import NotFound from './routes/404'
// import DefaultCatchBoundary from './routes/__catchBoundary'

const RootComponent = () => {
  return (
    <ClerkProvider>
      <RootDocument>
        <Outlet />
      </RootDocument>
    </ClerkProvider>
  )
}

function RootDocument({ children }) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="p-2 flex gap-2 text-lg">
          <Link
            to="/"
            activeProps={{
              className: 'font-bold',
            }}
            activeOptions={{
              exact: true,
            }}>
            Home
          </Link>{' '}
          <Link
            to="/posts"
            activeProps={{
              className: 'font-bold',
            }}>
            Posts
          </Link>
          <div className="ml-auto">
            <SignedIn>
              <UserButton />
            </SignedIn>
            <SignedOut>
              <SignInButton mode="modal" />
            </SignedOut>
          </div>
        </div>
        <hr />
        {children}
        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}

// Example of route configuration (not fully provided in the input)
// const routeConfig = createRouter({
//   routeTree: routeTree,
//   // ... other configurations like errorComponent, notFoundComponent
//   component: RootComponent,
// })

// Example of favicon configuration (typically in index.html or similar)
// const faviconConfig = [
//   {
//     rel: 'icon',
//     type: 'image/png',
//     sizes: '32x32',
//     href: '/favicon-32x32.png',
//   },
//   {
//     rel: 'icon',
//     type: 'image/png',
//     sizes: '16x16',
//     href: '/favicon-16x16.png',
//   },
//   { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
//   { rel: 'icon', href: '/favicon.ico' },
// ]

```

----------------------------------------

TITLE: TanStack Router Root Route Setup
DESCRIPTION: Sets up the root route for a TanStack Router application. It configures meta tags, links, error handling, and not found components, and defines the main application component structure.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-trellaux

LANGUAGE: typescript
CODE:
```
/// <reference types="vite/client" />
import { ReactQueryDevtools } from '@tanstack/react-query-devtools/production'
import {
  HeadContent,
  Link,
  Outlet,
  Scripts,
  createRootRouteWithContext,
  useRouterState,
} from '@tanstack/react-router'
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'
import * as React from 'react'
import { Toaster } from 'react-hot-toast'
import type { QueryClient } from '@tanstack/react-query'
import { DefaultCatchBoundary } from '~/components/DefaultCatchBoundary'
import { IconLink } from '~/components/IconLink'
import { NotFound } from '~/components/NotFound'
import appCss from '~/styles/app.css?url'
import { seo } from '~/utils/seo'
import { Loader } from '~/components/Loader'
export const Route = createRootRouteWithContext<{ queryClient: QueryClient }>()({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      ...seo({
        title:
          'TanStack Start | Type-Safe, Client-First, Full-Stack React Framework',
        description: `TanStack Start is a type-safe, client-first, full-stack React framework. `,
      }),
    ],
    links: [
      { rel: 'stylesheet', href: appCss },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        href: '/apple-touch-icon.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '32x32',
        href: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '16x16',
        href: '/favicon-16x16.png',
      },
      { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
      { rel: 'icon', href: '/favicon.ico' },
    ],
  }),
  errorComponent: (props) => {
    return (
      <RootDocument>
        <DefaultCatchBoundary {...props} />
      </RootDocument>
    )
  },
  notFoundComponent: () => <NotFound />,
  component: RootComponent,
})
function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}
function RootDocument({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="h-screen flex flex-col min-h-0">
          <div className="bg-slate-900 border-b border-slate-800 flex items-center justify-between py-4 px-8 box-border">
            <div className="flex items-center gap-4">
              <div>
                <Link to="/" className="block leading-tight">
                  <div className="font-black text-2xl text-white">Trellaux</div>
                  <div className="text-slate-500">a TanStack Demo</div>
                </Link>
              </div>
              <LoadingIndicator />
            </div>
            <div className="flex items-center gap-6">
              <IconLink
                href="https://github.com/TanStack/router/tree/main/examples/react/start-trellaux"
                label="Source"
                icon="/github-mark-white.png"
              />
              <IconLink
                href="https://tanstack.com"
                icon="/tanstack.png"
                label="TanStack"
              />
            </div>
          </div>
          <div className="flex-grow min-h-0 h-full flex flex-col">
            {children}
            <Toaster />
          </div>
        </div>
        <ReactQueryDevtools />
        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: TanStack Start - Vite Integration
DESCRIPTION: TanStack Start utilizes Vite for bundling and deploying applications, enabling features such as a unified API for SSR, streaming, and hydration, extraction of server-only code, and efficient application bundling for any hosting provider.

SOURCE: https://tanstack.com/start/latest/docs

LANGUAGE: JavaScript
CODE:
```
Provide a unified API for SSR, streaming, and hydration
Extract server-only code from your client-side code (e.g. server functions)
Bundle your application for deployment to any hosting provider
```

----------------------------------------

TITLE: Add Middleware to Chain (TanStack Start)
DESCRIPTION: Demonstrates how to add middleware to the execution chain using the `.middleware()` method. This is useful for organizing and executing multiple middleware functions sequentially.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/solid-start'
const loggingMiddleware = createMiddleware({ type: 'function' }).middleware([
  authMiddleware,
  loggingMiddleware,
])
```

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/solid-start'
const loggingMiddleware = createMiddleware({ type: 'function' }).middleware([
  authMiddleware,
  loggingMiddleware,
])
```

----------------------------------------

TITLE: TanStack Root Application Component (SolidJS)
DESCRIPTION: Defines the root component for a TanStack Start application using SolidJS. This component wraps all other routes and sets up essential head content like charset, viewport, and title. It uses `createRootRoute` from '@tanstack/solid-router'.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/build-from-scratch

LANGUAGE: tsx
CODE:
```
// src/routes/__root.tsx
import {
  Outlet,
  createRootRoute,
  HeadContent,
  Scripts,
} from '@tanstack/solid-router'
export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charset: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      {
        title: 'TanStack Start Starter',
      },
    ],
  }),
  component: RootComponent,
})
function RootComponent() {
  return <Outlet />
}
```

----------------------------------------

TITLE: Register Global Middleware in TanStack Start
DESCRIPTION: This code snippet shows how to register global middleware in TanStack Start. It imports the `registerGlobalMiddleware` function and an example `authMiddleware`, then registers the middleware to be applied globally across the application.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
// app/global-middleware.ts
import { registerGlobalMiddleware } from '@tanstack/react-start'
import { authMiddleware } from './middleware'

registerGlobalMiddleware({
  middleware: [authMiddleware],
})
```

----------------------------------------

TITLE: Netlify Basic Redirects for SPA
DESCRIPTION: Configure Netlify's _redirects file to rewrite all 404 requests to the SPA shell, ensuring a seamless single-page application experience.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/spa-mode

LANGUAGE: bash
CODE:
```
# Catch all other 404 requests and rewrite them to the SPA shell
/* /_shell.html 200

```

----------------------------------------

TITLE: Configure Vite for Netlify Deployment
DESCRIPTION: This code snippet shows how to configure the TanStack Start Vite plugin in `vite.config.ts` to target Netlify for deployment. It imports necessary functions and sets the `target` option to 'netlify'.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/hosting

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/react-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'netlify' })],
})
```

----------------------------------------

TITLE: Observability with TanStack Start
DESCRIPTION: TanStack Start integrates seamlessly with observability tools to provide insights into application performance and errors. It is designed to work with any observability tool, but Sentry is highly recommended for the best experience.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/observability

LANGUAGE: javascript
CODE:
```
/*
Observability is a critical aspect of modern web development, enabling you to monitor, trace, and debug your application’s performance and errors. TanStack Start integrates seamlessly with observability tools to provide comprehensive insights into how your application behaves in production, helping you ensure that everything runs smoothly.

TanStack Start is **designed to work with any observability tool** , so you can integrate your preferred solution using the full-stack APIs provided by TanStack Start. Whether you need logging, tracing, or error monitoring, TanStack Start is flexible enough to meet your observability needs.

However, for the best observability experience, we highly recommend using Sentry. Sentry is a powerful, full-featured observability platform that provides real-time insights into your application's performance and error tracking.

Sentry is a leading observability platform that helps developers monitor and fix crashes in real-time. With Sentry, you can track errors, performance issues, and trends across your entire stack, from the frontend to the backend. Sentry integrates seamlessly with TanStack Start, enabling you to identify and resolve issues faster, maintain a high level of performance, and deliver a better experience to your users.

Sentry’s comprehensive dashboards, alerting capabilities, and in-depth error analysis tools make it an invaluable resource for any development team looking to maintain control over their application’s health in production.

To learn more about Sentry, visit the Sentry website
To sign up, visit the Sentry dashboard

Documentation for integrating different observability tools with TanStack Start is coming soon! Stay tuned for more examples and guides on how to use Sentry effectively with your TanStack Start projects.
*/

// Example of how you might integrate Sentry (conceptual, actual implementation may vary)
// import * as Sentry from "@sentry/react";

// Sentry.init({
//   dsn: "YOUR_SENTRY_DSN",
//   integrations: [
//     new Sentry.BrowserTracing({
//       tracePropagationTargets: ["localhost", /.+\.tanstack\.com/],
//     }),
//     new Sentry.Replay(),
//   ],
//   // Performance Monitoring
//   tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
//   // Session Replay
//   replaysSessionSampleRate: 0.1, // This sets the probability of capturing sessions where replay is enabled. Adjust this value to your needs.
//   replaysOnErrorSampleRate: 1.0, // If you wish to attach a replay to every error message, set this to 1.0.
// });

```

----------------------------------------

TITLE: Validate Data with Zod (TanStack Start)
DESCRIPTION: Shows how to integrate Zod for data validation within middleware using the `.validator()` method. This example validates a `workspaceId` and logs it on the server-side.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/solid-start'
import { zodValidator } from '@tanstack/zod-adapter'
import { z } from 'zod'
const mySchema = z.object({
  workspaceId: z.string(),
})
const workspaceMiddleware = createMiddleware({ type: 'function' })
  .validator(zodValidator(mySchema))
  .server(({ next, data }) => {
    console.log('Workspace ID:', data.workspaceId)
    return next()
  })
```

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/solid-start'
import { zodValidator } from '@tanstack/zod-adapter'
import { z } from 'zod'
const mySchema = z.object({
  workspaceId: z.string(),
})
const workspaceMiddleware = createMiddleware({ type: 'function' })
  .validator(zodValidator(mySchema))
  .server(({ next, data }) => {
    console.log('Workspace ID:', data.workspaceId)
    return next()
  })
```

----------------------------------------

TITLE: Update package.json for TanStack Start
DESCRIPTION: This JSON snippet shows the necessary scripts in package.json for running TanStack Start projects, including development, build, and start commands using Vite.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: json
CODE:
```
{
  "type": "module",
  "scripts": {
    "dev": "vite dev",
    "build": "vite build",
    "start": "node .output/server/index.mjs"
  }
}
```

----------------------------------------

TITLE: Define Server Route Handler with Middleware
DESCRIPTION: Illustrates defining a server route handler using the method builder object, which allows for adding middleware. This example shows how to apply a `loggerMiddleware` before executing the GET request handler.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: tsx
CODE:
```
// routes/hello.ts
export const ServerRoute = createServerFileRoute().methods((api) => ({
  GET: api.middleware([loggerMiddleware]).handler(async ({ request }) => {
    return new Response('Hello, World! from ' + request.url)
  }),
}))

```

----------------------------------------

TITLE: Configure Vite Plugin for Tailwind CSS (TypeScript)
DESCRIPTION: Adds the @tailwindcss/vite plugin to the Vite configuration file (`vite.config.ts`). This enables Tailwind CSS processing within the TanStack Start project's build pipeline.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/tailwind-integration

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { defineConfig } from 'vite'
import tsConfigPaths from 'vite-tsconfig-paths'
import { tanstackStart } from '@tanstack/react-start/plugin/vite'
import tailwindcss from '@tailwindcss/vite'
export default defineConfig({
  server: {
    port: 3000,
  },
  plugins: [tsConfigPaths(), tanstackStart(), tailwindcss()],
})
```

----------------------------------------

TITLE: Generate Tailwind and PostCSS Config (Shell)
DESCRIPTION: Generates the `tailwind.config.js` and `postcss.config.js` files using the Tailwind CSS CLI. The `-p` flag ensures both configuration files are created.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/tailwind-integration

LANGUAGE: shell
CODE:
```
npx tailwindcss init -p
```

----------------------------------------

TITLE: Set Headers using setHeaders Helper
DESCRIPTION: Illustrates setting response headers using the `setHeaders` helper function imported from '@tanstack/solid-start/server' in a SolidStart server route.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
import { setHeaders } from '@tanstack/solid-start/server'

export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    setHeaders({
      'Content-Type': 'text/plain',
    })
    return new Response('Hello, World!')
  },
})

```

----------------------------------------

TITLE: Create and Implement a Route with Server Functions in TanStack Start
DESCRIPTION: This snippet shows how to define a route component in TanStack Start. It includes server functions to read and update a counter from a file, and a loader to fetch the initial count. The component displays the count and provides a button to increment it.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/build-from-scratch

LANGUAGE: tsx
CODE:
```
// src/routes/index.tsx
import * as fs from 'node:fs'
import { createFileRoute, useRouter } from '@tanstack/solid-router'
import { createServerFn } from '@tanstack/solid-start'
const filePath = 'count.txt'
async function readCount() {
  return parseInt(
    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),
  )
}
const getCount = createServerFn({
  method: 'GET',
}).handler(() => {
  return readCount()
})
const updateCount = createServerFn({ method: 'POST' })
  .validator((d: number) => d)
  .handler(async ({ data }) => {
    const count = await readCount()
    await fs.promises.writeFile(filePath, `${count + data}`)
  })
export const Route = createFileRoute('/')({
  component: Home,
  loader: async () => await getCount(),
})
function Home() {
  const router = useRouter()
  const state = Route.useLoaderData()
  return (
    <button
      type="button"
      onClick={() => {
        updateCount({ data: 1 }).then(() => {
          router.invalidate()
        })
      }}
    >
      Add 1 to {state()}?
    </button>
  )
}
```

----------------------------------------

TITLE: Combine Server Route with App Route (TSX)
DESCRIPTION: Illustrates how to define both a server route (POST method) and an app route in the same file using TSX. This example handles a JSON request body and responds with a personalized greeting. It also includes a React component to trigger the POST request.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: tsx
CODE:
```
// routes/hello.tsx

export const ServerRoute = createServerFileRoute().methods({
  POST: async ({ request }) => {
    const body = await request.json()
    return new Response(JSON.stringify({ message: `Hello, ${body.name}!` }))
  },
})

export const Route = createFileRoute('/hello')({
  component: HelloComponent,
})

function HelloComponent() {
  const [reply, setReply] = useState('')

  return (
    <div>
      <button
        onClick={() => {
          fetch('/hello', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name: 'Tanner' }),
          })
            .then((res) => res.json())
            .then((data) => setReply(data.message))
        }}
      >
        Say Hello
      </button>
    </div>
  )
}
```

LANGUAGE: tsx
CODE:
```
// routes/hello.tsx

export const ServerRoute = createServerFileRoute().methods({
  POST: async ({ request }) => {
    const body = await request.json()
    return new Response(JSON.stringify({ message: `Hello, ${body.name}!` }))
  },
})

export const Route = createFileRoute('/hello')({
  component: HelloComponent,
})

function HelloComponent() {
  const [reply, setReply] = useState('')

  return (
    <div>
      <button
        onClick={() => {
          fetch('/hello', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name: 'Tanner' }),
          })
            .then((res) => res.json())
            .then((data) => setReply(data.message))
        }}
      >
        Say Hello
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: Consume Server Function in App Component (JSX)
DESCRIPTION: This JSX code demonstrates how to consume the `getJokes` server function within a TanStack Router route. It uses the `loader` function to fetch data when the route is accessed and passes the data to the `JokesList` component.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: jsx
CODE:
```
// App.jsx
import { createFileRoute } from '@tanstack/react-router'
import { getJokes } from './serverActions/jokesActions'
import { JokesList } from './JokesList'
export const Route = createFileRoute('/')({
  loader: async () => {
    // Load jokes data when the route is accessed
    return getJokes()
  },
  component: App,
})
const App = () => {
  const jokes = Route.useLoaderData() || []
  return (
    <div className="p-4 flex flex-col">
      <h1 className="text-2xl">DevJokes</h1>
      <JokesList jokes={jokes} />
    </div>
  )
}
```

----------------------------------------

TITLE: TanStack Start: Throw Custom Errors from Server Functions
DESCRIPTION: Shows how to throw custom errors from TanStack Start server functions. These errors are automatically serialized into a JSON response with a 500 status code, providing a standardized way to communicate server-side issues to the client.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  throw new Error('Something went wrong!')
})
// Usage
function Test() {
  try {
    await doStuff()
  } catch (error) {
    console.error(error)
    // {
    //   message: "Something went wrong!",
    //   stack: "Error: Something went wrong!\n    at doStuff (file:///path/to/file.ts:3:3)"
    // }
  }
}
```

----------------------------------------

TITLE: TanStack Start Root Component
DESCRIPTION: Defines the root component for the TanStack Start application. It sets up the main document structure, including head content, body, navigation links, and development tools.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-basic-react-query

LANGUAGE: jsx
CODE:
```
function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}

function RootDocument({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="p-2 flex gap-2 text-lg">
          <Link
            to="/"
            activeProps={{
              className: 'font-bold',
            }}
            activeOptions={{ exact: true }}
          >
            Home
          </Link>{' '}
          <Link
            to="/posts"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Posts
          </Link>{' '}
          <Link
            to="/users"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Users
          </Link>{' '}
          <Link
            to="/route-a"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Pathless Layout
          </Link>{' '}
          <Link
            to="/deferred"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Deferred
          </Link>{' '}
          <Link
            // @ts-expect-error
            to="/this-route-does-not-exist"
            activeProps={{
              className: 'font-bold',
            }}
          >
            This Route Does Not Exist
          </Link>
        </div>
        <hr />
        {children}
        <TanStackRouterDevtools position="bottom-right" />
        <ReactQueryDevtools buttonPosition="bottom-left" />
        <Scripts />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: TanStack Start Root Route Component (tsx)
DESCRIPTION: Defines the root route for a TanStack Start application, acting as a pathless layout for the entire app. It includes global logic, application shell construction, and manages head content and script loading via HeadContent and Scripts components.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/learn-the-basics

LANGUAGE: tsx
CODE:
```
// src/routes/__root.tsx
import {
  Outlet,
  createRootRoute,
  HeadContent,
  Scripts,
} from '@tanstack/react-router'
import type { ReactNode } from 'react'

export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      {
        title: 'TanStack Start Starter',
      },
    ],
  }),
  component: RootComponent,
})

function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}

function RootDocument({ children }: Readonly<{ children: ReactNode }> ) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        {children}
        <Scripts />
      </body>
    </html>
  )
}

```

LANGUAGE: tsx
CODE:
```
// src/routes/__root.tsx
import {
  Outlet,
  createRootRoute,
  HeadContent,
  Scripts,
} from '@tanstack/react-router'
import type { ReactNode } from 'react'

export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      {
        title: 'TanStack Start Starter',
      },
    ],
  }),
  component: RootComponent,
})

function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}

function RootDocument({ children }: Readonly<{ children: ReactNode }> ) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        {children}
        <Scripts />
      </body>
    </html>
  )
}

```

----------------------------------------

TITLE: Defining Server Functions (Solid)
DESCRIPTION: Server functions must be defined at the top level of a file. On the client, calls to these functions are replaced with fetch requests to the server. This example demonstrates the basic structure for defining a server function within a Solid application context.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: javascript
CODE:
```
import { server$ } from "@tanstack/start";

export const myServerFunction = server$(async () => {
  // Server-only logic here
  return { message: "Hello from server!" };
});
```

----------------------------------------

TITLE: Server Function with Parameter Validation
DESCRIPTION: An example of a server function that accepts a string parameter and uses a validator to ensure type safety. It then uses this validated input in its handler to return a personalized greeting.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
export const greet = createServerFn({
  method: 'GET',
})
  .validator((data: string) => data)
  .handler(async (ctx) => {
    return `Hello, ${ctx.data}!`
  })
greet({
  data: 'John',
})
```

----------------------------------------

TITLE: Create Application Root Component (TSX)
DESCRIPTION: Defines the root component for a TanStack Start application, wrapping all other routes. It includes essential head content and scripts for the application.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/build-from-scratch

LANGUAGE: tsx
CODE:
```
// src/routes/__root.tsx
/// <reference types="vite/client" />
import type { ReactNode } from 'react'
import {
  Outlet,
  createRootRoute,
  HeadContent,
  Scripts,
} from '@tanstack/react-router'

export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      {
        title: 'TanStack Start Starter',
      },
    ],
  }),
  component: RootComponent,
})

function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}

function RootDocument({ children }: Readonly<{ children: ReactNode }> ) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        {children}
        <Scripts />
      </body>
    </html>
  )
}

```

----------------------------------------

TITLE: Execute Server-Side Logic with Next
DESCRIPTION: Provides an example of using the `.server()` method to define server-side logic. It shows how to use the `next` function to execute the subsequent middleware and return its result.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/react-start'

const loggingMiddleware = createMiddleware({ type: 'function' }).server(
  async ({ next }) => {
    console.log('Request received')
    const result = await next()
    console.log('Response processed')
    return result
  },
)
```

----------------------------------------

TITLE: Configure TanStack Router
DESCRIPTION: This code configures the TanStack Router for your application, setting up route handling and scroll restoration. It imports necessary functions from '@tanstack/solid-router' and defines a type for router registration.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/learn-the-basics

LANGUAGE: tsx
CODE:
```
// app/router.tsx
import { createRouter as createTanStackRouter } from '@tanstack/solid-router'
import { routeTree } from './routeTree.gen'

export function createRouter() {
  const router = createTanStackRouter({
    routeTree,
    scrollRestoration: true,
  })

  return router
}

declare module '@tanstack/solid-router' {
  interface Register {
    router: ReturnType<typeof createRouter>
  }
}
```

----------------------------------------

TITLE: Add Joke Server Function (TypeScript)
DESCRIPTION: Creates a POST server function to add a new joke to a JSON file. It includes input validation for the question and answer, generates a unique ID using `uuidv4`, reads existing jokes, appends the new joke, and writes the updated list back to the file.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: typescript
CODE:
```
import { createServerFn } from '@tanstack/react-start'
import * as fs from 'node:fs'
import { v4 as uuidv4 } from 'uuid' // Add this import
import type { Joke, JokesData } from '../types'
export const addJoke = createServerFn({ method: 'POST' })
  .validator((data: { question: string; answer: string }) => {
    // Validate input data
    if (!data.question || !data.question.trim()) {
      throw new Error('Joke question is required')
    }
    if (!data.answer || !data.answer.trim()) {
      throw new Error('Joke answer is required')
    }
    return data
  })
  .handler(async ({ data }) => {
    try {
      // Read the existing jokes from the file
      const jokesData = await getJokes()
      // Create a new joke with a unique ID
      const newJoke: Joke = {
        id: uuidv4(),
        question: data.question,
        answer: data.answer,
      }
      // Add the new joke to the list
      const updatedJokes = [...jokesData, newJoke]
      // Write the updated jokes back to the file
      await fs.promises.writeFile(
        JOKES_FILE,
        JSON.stringify(updatedJokes, null, 2),
        'utf-8',
      )
      return newJoke
    } catch (error) {
      console.error('Failed to add joke:', error)
      throw new Error('Failed to add joke')
    }
  })
```

----------------------------------------

TITLE: Configure TanStack Start for SPA Mode
DESCRIPTION: This snippet shows how to enable SPA mode in TanStack Start by adding the `spa` configuration with `enabled: true` to the Vite plugin options. This prepares the application for static deployment.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/spa-mode

LANGUAGE: tsx
CODE:
```
import { defineConfig } from 'vite';
import TanStackStart from '@tanstack/start';

export default defineConfig({
  plugins: [
    TanStackStart({
      spa: {
        enabled: true,
      },
    }),
  ],
});

```

LANGUAGE: tsx
CODE:
```
import { defineConfig } from 'vite';
import TanStackStart from '@tanstack/start';

export default defineConfig({
  plugins: [
    TanStackStart({
      spa: {
        enabled: true,
      },
    }),
  ],
});

```

----------------------------------------

TITLE: React Root Route Setup with TanStack Router
DESCRIPTION: Sets up the root route for a React application using TanStack Router. It configures global metadata, error handling, not found components, and the main application layout, including SEO tags and stylesheets.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-trellaux

LANGUAGE: tsx
CODE:
```
/// <reference types="vite/client" />
import { ReactQueryDevtools } from '@tanstack/react-query-devtools/production'
import {
  HeadContent,
  Link,
  Outlet,
  Scripts,
  createRootRouteWithContext,
  useRouterState,
} from '@tanstack/react-router'
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'
import * as React from 'react'
import { Toaster } from 'react-hot-toast'
import type { QueryClient } from '@tanstack/react-query'
import { DefaultCatchBoundary } from '~/components/DefaultCatchBoundary'
import { IconLink } from '~/components/IconLink'
import { NotFound } from '~/components/NotFound'
import appCss from '~/styles/app.css?url'
import { seo } from '~/utils/seo'
import { Loader } from '~/components/Loader'
export const Route = createRootRouteWithContext<{ queryClient: QueryClient }>()({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      ...seo({
        title:
          'TanStack Start | Type-Safe, Client-First, Full-Stack React Framework',
        description: `TanStack Start is a type-safe, client-first, full-stack React framework. `,
      }),
    ],
    links: [
      { rel: 'stylesheet', href: appCss },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        href: '/apple-touch-icon.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '32x32',
        href: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '16x16',
        href: '/favicon-16x16.png',
      },
      { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
      { rel: 'icon', href: '/favicon.ico' },
    ],
  }),
  errorComponent: (props) => {
    return (
      <RootDocument>
        <DefaultCatchBoundary {...props} />
      </RootDocument>
    )
  },
  notFoundComponent: () => <NotFound />,
  component: RootComponent,
})
function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}
function RootDocument({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="h-screen flex flex-col min-h-0">
          <div className="bg-slate-900 border-b border-slate-800 flex items-center justify-between py-4 px-8 box-border">
            <div className="flex items-center gap-4">
              <div>
                <Link to="/" className="block leading-tight">
                  <div className="font-black text-2xl text-white">Trellaux</div>
                  <div className="text-slate-500">a TanStack Demo</div>
                </Link>
              </div>
              <LoadingIndicator />
            </div>
            <div className="flex items-center gap-6">
              <IconLink
                href="https://github.com/TanStack/router/tree/main/examples/react/start-trellaux"
                label="Source"
                icon="/github-mark-white.png"
              />
              <IconLink
                href="https://tanstack.com"
                icon="/tanstack.png"
                label="TanStack"
              />
            </div>
          </div>
          <div className="flex-grow min-h-0 h-full flex flex-col">
            {children}
            <Toaster />
          </div>
        </div>
        <ReactQueryDevtools />
        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}

```

----------------------------------------

TITLE: TanStack Start Vite Plugin for Node.js Server
DESCRIPTION: Configure the TanStack Start Vite plugin to target a Node.js server by setting the 'target' option to 'node-server' in your vite.config.ts file. This prepares the application for Node.js deployment.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/hosting

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/react-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'node-server' })],
})
```

----------------------------------------

TITLE: Return Primitives and JSON from Server Function
DESCRIPTION: Illustrates how TanStack Start server functions can return primitive data types (like strings) or JSON-serializable objects. The framework automatically handles serialization for these return types.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    return new Date().toISOString()
  },
)
export const getServerData = createServerFn({ method: 'GET' }).handler(
  async () => {
    return {
      message: 'Hello, World!',
    }
  },
)
```

----------------------------------------

TITLE: Update package.json for Vite and ES Modules
DESCRIPTION: Configures the package.json file to use Vite's CLI for development and building, and sets the module type to 'module' for ES module support.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/build-from-scratch

LANGUAGE: json
CODE:
```
{
  // ...
  "type": "module",
  "scripts": {
    "dev": "vite dev",
    "build": "vite build"
  }
}

```

----------------------------------------

TITLE: Create Server Function with Middleware
DESCRIPTION: Demonstrates how to create a server function and apply custom middleware using the `.middleware()` method in TanStack Start. This allows for customizing server function behavior.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
import { loggingMiddleware } from './middleware'

const fn = createServerFn()
  .middleware([loggingMiddleware])
  .handler(async () => {
    // ...
  })
```

----------------------------------------

TITLE: Create Joke Form Component (React/TypeScript)
DESCRIPTION: This snippet shows the implementation of a React component named JokeForm using TypeScript. It utilizes the useState hook for managing form inputs (question, answer) and submission state. It also integrates with TanStack Router and a server action `addJoke` for handling the form submission.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: tsx
CODE:
```
import { useState } from 'react'
import { useRouter } from '@tanstack/react-router'
import { addJoke } from '../serverActions/jokesActions'
export function JokeForm() {
  const router = useRouter()
  const [question, setQuestion] = useState('')
  const [answer, setAnswer] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  return (
    <form onSubmit={handleSubmit} className="flex flex-row gap-2 mb-6">
      {error && (
        <div className="bg-red-100 text-red-700 p-2 rounded mb-4">{error}</div>
      )}
      <div className="flex flex-col sm:flex-row gap-4 mb-8">
        <input
          id="question"
          type="text"
          placeholder="Enter joke question"
          className="w-full p-2 border rounded focus:ring focus:ring-blue-300 flex-1"
          value={question}
          onChange={(e) => setQuestion(e.target.value)}
          required
        />
        <input
          id="answer"
          type="text"
          placeholder="Enter joke answer"
          className="w-full p-2 border rounded focus:ring focus:ring-blue-300 flex-1 py-4"
          value={answer}
          onChange={(e) => setAnswer(e.target.value)}
          required
        />
        <button
          type="submit"
          disabled={isSubmitting}
          className="bg-blue-500 hover:bg-blue-600 text-white font-medium rounded disabled:opacity-50 px-4"
        >
          {isSubmitting ? 'Adding...' : 'Add Joke'}
        </button>
      </div>
    </form>
  )
}
```

----------------------------------------

TITLE: Define Server Function with Parameter and Validator
DESCRIPTION: An example of a server function that accepts a string parameter, validates it using a validator function, and returns a personalized greeting. The function is configured for the 'GET' method.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
export const greet = createServerFn({
  method: 'GET',
})
  .validator((data: string) => data)
  .handler(async (ctx) => {
    return `Hello, ${ctx.data}!`
  })
greet({
  data: 'John',
})
```

----------------------------------------

TITLE: React Root Route Setup with AuthKit and Radix UI
DESCRIPTION: This snippet sets up the root route for a React application using TanStack Router. It integrates with AuthKit for authentication, fetches sign-in URLs, and uses Radix UI Themes for styling the application layout. The `beforeLoad` hook fetches user authentication status, and the `loader` fetches the sign-in URL. The `RootComponent` renders the application's main structure, including navigation, a sign-in button, and the main content area via `Outlet`.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-workos

LANGUAGE: tsx
CODE:
```
import { Box, Button, Card, Container, Flex, Theme } from '@radix-ui/themes';
import '@radix-ui/themes/styles.css';
import { HeadContent, Link, Outlet, Scripts, createRootRoute } from '@tanstack/react-router';
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools';
import { Suspense } from 'react';
import { getAuth, getSignInUrl } from '../authkit/serverFunctions';
import Footer from '../components/footer';
import SignInButton from '../components/sign-in-button';
import type { ReactNode } from 'react';
export const Route = createRootRoute({
  beforeLoad: async () => {
    const { user } = await getAuth();
    return { user };
  },
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      {
        title: 'AuthKit Example in TanStack Start',
      },
    ],
  }),
  loader: async ({ context }) => {
    const { user } = context;
    const url = await getSignInUrl();
    return {
      user,
      url,
    };
  },
  component: RootComponent,
  notFoundComponent: () => <div>Not Found</div>,
});
function RootComponent() {
  const { user, url } = Route.useLoaderData();
  return (
    <RootDocument>
      <Theme accentColor="iris" panelBackground="solid" style={{ backgroundColor: 'var(--gray-1)' }}>
        <Container style={{ backgroundColor: 'var(--gray-1)' }}>
          <Flex direction="column" gap="5" p="5" height="100vh">
            <Box asChild flexGrow="1">
              <Card size="4">
                <Flex direction="column" height="100%">
                  <Flex asChild justify="between">
                    <header>
                      <Flex gap="4">
                        <Button asChild variant="soft">
                          <Link to="/">Home</Link>
                        </Button>
                        <Button asChild variant="soft">
                          <Link to="/account">Account</Link>
                        </Button>
                      </Flex>
                      <Suspense fallback={<div>Loading...</div>}>
                        <SignInButton user={user} url={url} />
                      </Suspense>
                    </header>
                  </Flex>
                  <Flex flexGrow="1" align="center" justify="center">
                    <main>
                      <Outlet />
                    </main>
                  </Flex>
                </Flex>
              </Card>
            </Box>
            <Footer />
          </Flex>
        </Container>
      </Theme>
      <TanStackRouterDevtools position="bottom-right" />
    </RootDocument>
  );
}
function RootDocument({ children }: Readonly<{ children: ReactNode }>)
{
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        {children}
        <Scripts />
      </body>
    </html>
  );
}

```

----------------------------------------

TITLE: Create and Use Server Function (TSX)
DESCRIPTION: Demonstrates creating a server function using `createServerFn` for fetching user data by ID. It includes data validation with Zod and a handler for server-side logic, showing how to call the function from elsewhere in the application.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/learn-the-basics

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
import * as fs from 'node:fs'
import { z } from 'zod'

const getUserById = createServerFn({
    method: 'GET'
  })
  // Always validate data sent to the function, here we use Zod
  .validator(z.string())
  // The handler function is where you perform the server-side logic
  .handler(async ({ data }) => {
    return db.query.users.findFirst({ where: eq(users.id, data) })
  })

// Somewhere else in your application
const user = await getUserById({ data: '1' })

```

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
import * as fs from 'node:fs'
import { z } from 'zod'

const getUserById = createServerFn({
    method: 'GET'
  })
  // Always validate data sent to the function, here we use Zod
  .validator(z.string())
  // The handler function is where you perform the server-side logic
  .handler(async ({ data }) => {
    return db.query.users.findFirst({ where: eq(users.id, data) })
  })

// Somewhere else in your application
const user = await getUserById({ data: '1' })

```

----------------------------------------

TITLE: Set Headers via Response Constructor
DESCRIPTION: Demonstrates setting response headers by passing a 'headers' object as the second argument to the Response constructor within a SolidStart server route handler.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    return new Response('Hello, World!', {
      headers: {
        'Content-Type': 'text/plain',
      },
    })
  },
})

// Visit /hello to see the response
// Hello, World!

```

----------------------------------------

TITLE: Cloudflare Workers Configuration (wrangler.toml)
DESCRIPTION: Set up the wrangler.toml configuration file for deploying to Cloudflare Workers. This file specifies project name, main entry point, compatibility date, and asset handling.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/hosting

LANGUAGE: toml
CODE:
```
# wrangler.toml
name = "your-cloudflare-project-name"
main = "./.output/server/index.mjs"
compatibility_date = "2025-04-01"
compatibility_flags = ["nodejs_compat"]
[assets]
binding = "ASSETS"
directory = "./.output/public"
```

----------------------------------------

TITLE: TanStack Router: Responding with JSON
DESCRIPTION: Provides an example of how to correctly respond with JSON data from a server route. The route in 'routes/hello.ts' handles GET requests and returns a JSON object with a 'message' field, setting the 'Content-Type' header to 'application/json'.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    return new Response(JSON.stringify({ message: 'Hello, World!' }), {
      headers: {
        'Content-Type': 'application/json',
      },
    })
  },
})
// Visit /hello to see the response
// {"message":"Hello, World!"}

```

----------------------------------------

TITLE: TanStack Start Features
DESCRIPTION: TanStack Start extends TanStack Router with full-stack capabilities, including full-document SSR, streaming, server functions (RPCs), bundling, and deployment support, all while maintaining full-stack type safety.

SOURCE: https://tanstack.com/start/latest/docs

LANGUAGE: TypeScript
CODE:
```
Full-document SSR
Streaming
Server Functions / RPCs
Bundling
Deployment
Full-Stack Type Safety
```

----------------------------------------

TITLE: TanStack Start Server Function Return Value (JS Enabled)
DESCRIPTION: Demonstrates how a server function's return value is accessed in client-side JavaScript when JavaScript is enabled. It shows calling a server function and logging its resolved value.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: typescript
CODE:
```
const yourFn = createServerFn().handler(async () => {
  return 'Hello, world!'
})
// `.then` is not available when JavaScript is disabled
yourFn().then(console.log)
```

LANGUAGE: typescript
CODE:
```
const yourFn = createServerFn().handler(async () => {
  return 'Hello, world!'
})
// `.then` is not available when JavaScript is disabled
yourFn().then(console.log)
```

----------------------------------------

TITLE: Import using Path Alias
DESCRIPTION: This TypeScript example demonstrates how to use the configured path alias '~/' to import components. Instead of using long relative paths like '../../../components/ui/input', you can now use the shorter '~components/ui/input'.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/path-aliases

LANGUAGE: typescript
CODE:
```
// app/routes/posts/$postId/edit.tsx
import { Input } from '~/components/ui/input'
// instead of
import { Input } from '../../../components/ui/input'
```

----------------------------------------

TITLE: Access All Headers in Server Function
DESCRIPTION: Demonstrates how to retrieve all request headers within a TanStack Start server function using the `getHeaders` utility. This is useful for inspecting incoming request details.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
import { getHeaders } from '@tanstack/solid-start/server'
export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    console.log(getHeaders())
    // {
    //   "accept": "*/*",
    //   "accept-encoding": "gzip, deflate, br",
    //   "accept-language": "en-US,en;q=0.9",
    //   "connection": "keep-alive",
    //   "host": "localhost:3000",
    //   ...
    // }
  },
)
```

----------------------------------------

TITLE: TanStack Start SPA Prerendering Options
DESCRIPTION: Configure the prerendering behavior of the SPA shell in TanStack Start, including output path, link crawling, and retry counts. These options can be overridden from their defaults.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/spa-mode

LANGUAGE: typescript
CODE:
```
// vite.config.ts
export default defineConfig({
  plugins: [
    TanStackStart({
      spa: {
        prerender: {
          outputPath: '/custom-shell',
          crawlLinks: true,
          retryCount: 3,
        },
      },
    }),
  ],
})

```

----------------------------------------

TITLE: Configure Template Paths (JS)
DESCRIPTION: Configures the `tailwind.config.js` file to specify the paths to all template files in the project. This allows Tailwind to scan the files for class names and generate the necessary CSS.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/tailwind-integration

LANGUAGE: js
CODE:
```
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
}
```

----------------------------------------

TITLE: TanStack Router SSR Inheritance Example 1
DESCRIPTION: Demonstrates SSR inheritance in TanStack Router where a child route's SSR configuration cannot be less restrictive than its parent's. In this example, `ssr: true` on `$postId` is overridden by the parent's `ssr: false`.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/selective-ssr

LANGUAGE: tsx
CODE:
```
root { ssr: undefined }
  posts { ssr: false }
     $postId { ssr: true }

```

----------------------------------------

TITLE: Configure TanStack Start Vite Plugin in vite.config.ts
DESCRIPTION: This TypeScript snippet demonstrates how to configure the TanStack Start Vite plugin in vite.config.ts. It enables custom Vite React plugins by setting `customViteReactPlugin: true` and includes other common Vite configurations like port and tsconfig-paths.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/build-from-scratch

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { defineConfig } from 'vite'
import tsConfigPaths from 'vite-tsconfig-paths'
import { tanstackStart } from '@tanstack/react-start/plugin/vite'
import viteReact from '@vitejs/plugin-react'

export default defineConfig({
  server: {
    port: 3000,
  },
  plugins: [
    tsConfigPaths(),
    tanstackStart({ customViteReactPlugin: true }),
    viteReact(),
  ],
})
```

----------------------------------------

TITLE: Define TypeScript Types for Joke Data
DESCRIPTION: This TypeScript code defines an interface 'Joke' with properties 'id', 'question', and 'answer', and a type alias 'JokesData' for an array of 'Joke' objects. These types ensure data consistency and provide type safety when working with joke data.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: typescript
CODE:
```
// src/types/index.ts
export interface Joke {
  id: string
  question: string
  answer: string
}
export type JokesData = Joke[]
```

----------------------------------------

TITLE: SolidStart Server Function Validation with Zod
DESCRIPTION: This example demonstrates using the Zod library to validate input parameters for a SolidStart server function. It defines a schema for the 'Person' type and uses Zod's parsing capabilities for validation.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
import { z } from 'zod'
const Person = z.object({
  name: z.string(),
})
export const greet = createServerFn({ method: 'GET' })
  .validator((person: unknown) => {
    return Person.parse(person)
  })
  .handler(async (ctx) => {
    return `Hello, ${ctx.data.name}!`
  })
greet({
  data: {
    name: 'John',
  },
})
```

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
import { z } from 'zod'
const Person = z.object({
  name: z.string(),
})
export const greet = createServerFn({ method: 'GET' })
  .validator((person: unknown) => {
    return Person.parse(person)
  })
  .handler(async (ctx) => {
    return `Hello, ${ctx.data.name}!`
  })
greet({
  data: {
    name: 'John',
  },
})
```

----------------------------------------

TITLE: Server Function Method Option
DESCRIPTION: Illustrates the `method` option for server functions, specifying the allowed HTTP methods ('GET' or 'POST'). This option controls the HTTP verb used for the server function request.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
method?: 'GET' | 'POST'
```

----------------------------------------

TITLE: Import Tailwind CSS Directive (CSS)
DESCRIPTION: Defines a CSS file (e.g., `src/styles/app.css`) and imports Tailwind CSS using the `@import 'tailwindcss';` directive. This file will contain the necessary Tailwind styles.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/tailwind-integration

LANGUAGE: css
CODE:
```
/* src/styles/app.css */
@import 'tailwindcss';
```

----------------------------------------

TITLE: Create First Route with Counter (TSX)
DESCRIPTION: Implements the first route for a TanStack Start application, displaying a counter and allowing it to be incremented. It uses server functions to read and write the counter value to a file.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/build-from-scratch

LANGUAGE: tsx
CODE:
```
// src/routes/index.tsx
import * as fs from 'node:fs'
import { createFileRoute, useRouter } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'

const filePath = 'count.txt'

async function readCount() {
  return parseInt(
    await fs.promises.readFile(filePath, 'utf-8').catch(() => '0'),
  )
}

const getCount = createServerFn({
  method: 'GET',
}).handler(() => {
  return readCount()
})

const updateCount = createServerFn({ method: 'POST' })
  .validator((d: number) => d)
  .handler(async ({ data }) => {
    const count = await readCount()
    await fs.promises.writeFile(filePath, `${count + data}`)
  })

export const Route = createFileRoute('/')({
  component: Home,
  loader: async () => await getCount(),
})

function Home() {
  const router = useRouter()
  const state = Route.useLoaderData()

  return (
    <button
      type="button"
      onClick={() => {
        updateCount({ data: 1 }).then(() => {
          router.invalidate()
        })
      }}
    >
      Add 1 to {state}?
    </button>
  )
}

```

----------------------------------------

TITLE: Call Server Function from Route Loader
DESCRIPTION: Shows how to call a server function, `getServerTime`, from a route loader in TanStack Start. Route loaders automatically handle errors, redirects, and notFounds thrown by server functions.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { getServerTime } from './getServerTime'
export const Route = createFileRoute('/time')({
  loader: async () => {
    const time = await getServerTime()
    return {
      time,
    }
  },
})
```

----------------------------------------

TITLE: SolidStart Basic Server Function Validation
DESCRIPTION: This example shows a basic server function in SolidStart that validates an input parameter manually. It checks if the input is an object and if it contains a 'name' property of type string.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
type Person = {
  name: string
}
export const greet = createServerFn({ method: 'GET' })
  .validator((person: unknown): Person => {
    if (typeof person !== 'object' || person === null) {
      throw new Error('Person must be an object')
    }
    if ('name' in person && typeof person.name !== 'string') {
      throw new Error('Person.name must be a string')
    }
    return person as Person
  })
  .handler(async ({ data }) => {
    return `Hello, ${data.name}!`
  })
```

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
type Person = {
  name: string
}
export const greet = createServerFn({ method: 'GET' })
  .validator((person: unknown): Person => {
    if (typeof person !== 'object' || person === null) {
      throw new Error('Person must be an object')
    }
    if ('name' in person && typeof person.name !== 'string') {
      throw new Error('Person.name must be a string')
    }
    return person as Person
  })
  .handler(async ({ data }) => {
    return `Hello, ${data.name}!`
  })
```

----------------------------------------

TITLE: TanStackStart Static Server Function Example
DESCRIPTION: Demonstrates how to create a static server function in TanStackStart by setting the type to 'static'. This function is executed at build time and its result is cached as a static JSON file.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/static-server-functions

LANGUAGE: tsx
CODE:
```
const myServerFn = createServerFn({
  type: 'static'
}).handler(async () => {
  return 'Hello, world!'
})
```

LANGUAGE: tsx
CODE:
```
const myServerFn = createServerFn({
  type: 'static'
}).handler(async () => {
  return 'Hello, world!'
})
```

----------------------------------------

TITLE: Handle POST Requests with JSON Body
DESCRIPTION: Demonstrates how to handle POST requests in TanStack Start by accessing the request body using `request.json()`. This is crucial for receiving data sent from clients, such as form submissions or API payloads.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
export const ServerRoute = createServerFileRoute().methods({
  POST: async ({ request }) => {
    const body = await request.json()
    return new Response(`Hello, ${body.name}!`)
  },
})

// Send a POST request to /hello with a JSON body like { "name": "Tanner" }
// Hello, Tanner!
```

----------------------------------------

TITLE: Passing JSON Parameters to Server Functions
DESCRIPTION: Demonstrates how server functions can accept JSON-serializable objects as parameters, enabling the passage of complex data structures. This example defines a 'Person' type with name and age, and the server function handler uses this data to construct a greeting.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
type Person = {
  name: string
  age: number
}
export const greet = createServerFn({ method: 'GET' })
  .validator((data: Person) => data)
  .handler(async ({ data }) => {
    return `Hello, ${data.name}! You are ${data.age} years old.`
  })
greet({
  data: {
    name: 'John',
    age: 34,
  },
})
```

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
type Person = {
  name: string
  age: number
}
export const greet = createServerFn({ method: 'GET' })
  .validator((data: Person) => data)
  .handler(async ({ data }) => {
    return `Hello, ${data.name}! You are ${data.age} years old.`
  })
greet({
  data: {
    name: 'John',
    age: 34,
  },
})
```

----------------------------------------

TITLE: Pass Arguments to Server Function via Form (TSX)
DESCRIPTION: This example demonstrates how to pass arguments to a server function when submitting a form. It uses input elements with `name` attributes and sets the form's `encType` to `multipart/form-data` to correctly send the data.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
const yourFn = createServerFn({
  method: 'POST'
})
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const age = formData.get('age')
    if (!age) {
      throw new Error('age is required')
    }
    return age.toString()
  })
  .handler(async ({ data: formData }) => {
    // `age` will be '123'
    const age = formData.get('age')
    // ...
  })
function Component() {
  return (
    //  We need to tell the server that our data type is `multipart/form-data` by setting the `encType` attribute on the form.
    <form action={yourFn.url} method="POST" encType="multipart/form-data">
      <input name="age" defaultValue="34" />
      <button type="submit">Click me!</button>
    </form>
  )
}
```

LANGUAGE: tsx
CODE:
```
const yourFn = createServerFn({
  method: 'POST'
})
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const age = formData.get('age')
    if (!age) {
      throw new Error('age is required')
    }
    return age.toString()
  })
  .handler(async ({ data: formData }) => {
    // `age` will be '123'
    const age = formData.get('age')
    // ...
  })
function Component() {
  return (
    //  We need to tell the server that our data type is `multipart/form-data` by setting the `encType` attribute on the form.
    <form action={yourFn.url} method="POST" encType="multipart/form-data">
      <input name="age" defaultValue="34" />
      <button type="submit">Click me!</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Route Inheritance Example for Selective SSR in TSX
DESCRIPTION: Illustrates how SSR configurations (`ssr: undefined`, `ssr: false`, `ssr: true`) are inherited from parent routes to child routes in TanStack Router.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/selective-ssr

LANGUAGE: tsx
CODE:
```
root { ssr: undefined }
  posts { ssr: false }
     $postId { ssr: true }
```

LANGUAGE: tsx
CODE:
```
root { ssr: undefined }
  posts { ssr: false }
     $postId { ssr: true }
```

----------------------------------------

TITLE: Selective SSR Inheritance with 'data-only' in TSX
DESCRIPTION: Shows an example of SSR configuration inheritance where a parent route is set to `ssr: 'data-only'`, affecting how child routes are rendered on the server.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/selective-ssr

LANGUAGE: tsx
CODE:
```
root { ssr: undefined }
  posts { ssr: 'data-only' }
     $postId { ssr: true }
       details { ssr: false }
```

LANGUAGE: tsx
CODE:
```
root { ssr: undefined }
  posts { ssr: 'data-only' }
     $postId { ssr: true }
       details { ssr: false }
```

----------------------------------------

TITLE: TanStack Router Middleware Execution Order Example
DESCRIPTION: Demonstrates the execution order of global and server function middleware in TanStack Router. It logs messages in a specific sequence: globalMiddleware1, globalMiddleware2, a, b, c, d, and fn, showcasing dependency-first execution.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
const globalMiddleware1 = createMiddleware({ type: 'function' }).server(
  async ({ next }) => {
    console.log('globalMiddleware1')
    return next()
  },
)
const globalMiddleware2 = createMiddleware({ type: 'function' }).server(
  async ({ next }) => {
    console.log('globalMiddleware2')
    return next()
  },
)
registerGlobalMiddleware({
  middleware: [globalMiddleware1, globalMiddleware2],
})
const a = createMiddleware({ type: 'function' }).server(async ({ next }) => {
  console.log('a')
  return next()
})
const b = createMiddleware({ type: 'function' })
  .middleware([a])
  .server(async ({ next }) => {
    console.log('b')
    return next()
  })
const c = createMiddleware({ type: 'function' })
  .middleware()
  .server(async ({ next }) => {
    console.log('c')
    return next()
  })
const d = createMiddleware({ type: 'function' })
  .middleware([b, c])
  .server(async () => {
    console.log('d')
  })
const fn = createServerFn()
  .middleware([d])
  .server(async () => {
    console.log('fn')
  })
```

----------------------------------------

TITLE: Navigate to a New Route using Link (TanStack Router)
DESCRIPTION: Demonstrates how to use the Link component from TanStack Router to create a declarative navigation link to the '/about' route. This is a common pattern for client-side routing within a React application.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/learn-the-basics

LANGUAGE: tsx
CODE:
```
import { Link } from '@tanstack/react-router'

function Home() {
  return <Link to="/about">About</Link>
}
```

----------------------------------------

TITLE: React Joke Form with Server Action
DESCRIPTION: This React component, JokeForm.tsx, provides a form for users to add new jokes. It manages form state (question, answer, submission status, errors) using React's useState hook. The handleSubmit function is responsible for calling the addJoke server action, clearing the form, and invalidating the router to refresh data. Error handling is included for failed submissions.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/reading-writing-file

LANGUAGE: tsx
CODE:
```
//JokeForm.tsx
import { useState } from 'react'
import { addJoke } from '../serverActions/jokesActions'
import { useRouter } from '@tanstack/react-router'
export function JokeForm() {
  const router = useRouter()
  const [question, setQuestion] = useState('')
  const [answer, setAnswer] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const handleSubmit = async () => {
    if (!question || !answer || isSubmitting) return
    try {
      setIsSubmitting(true)
      await addJoke({
        data: { question, answer },
      })
      // Clear form
      setQuestion('')
      setAnswer('')
      // Refresh data
      router.invalidate()
    } catch (error) {
      console.error('Failed to add joke:', error)
      setError('Failed to add joke')
    } finally {
      setIsSubmitting(false)
    }
  }
  return (
    <form onSubmit={handleSubmit} className="flex flex-row gap-2 mb-6">
      {error && (
        <div className="bg-red-100 text-red-700 p-2 rounded mb-4">{error}</div>
      )}
      <input
        type="text"
        name="question"
        placeholder="Question"
        className="p-1 border rounded w-full"
        required
        onChange={(e) => setQuestion(e.target.value)}
        value={question}
      />
      <input
        type="text"
        name="answer"
        placeholder="Answer"
        className="p-1 border rounded w-full"
        required
        onChange={(e) => setAnswer(e.target.value)}
        value={answer}
      />
      <button
        className="bg-blue-500 text-white p-1 rounded hover:bg-blue-600"
        disabled={isSubmitting}
      >
        {isSubmitting ? 'Adding...' : 'Add Joke'}
      </button>
    </form>
  )
}

```

----------------------------------------

TITLE: TanStack Server Function: Update User Data (POST)
DESCRIPTION: Illustrates using `createServerFn` for mutations, specifically updating a user's name. It defines a Zod schema for validation and a handler for the server-side database update. The example also mentions invalidating client-side data after the mutation.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/learn-the-basics

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'

const UserSchema = z.object({
  id: z.string(),
  name: z.string(),
})

const updateUser = createServerFn({ method: 'POST' })
  .validator(UserSchema)
  .handler(async ({ data }) => {
    return db
      .update(users)
      .set({ name: data.name })
      .where(eq(users.id, data.id))
  })

// Somewhere else in your application
await updateUser({ data: { id: '1', name: 'John' } })

```

----------------------------------------

TITLE: Set Custom Headers in Server Function Response
DESCRIPTION: Explains how to add custom HTTP headers to the response of a TanStack Start server function using the `setHeader` utility. This allows for passing additional metadata with the response.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
import { setHeader } from '@tanstack/solid-start/server'
export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    setHeader('X-Custom-Header', 'value')
    return new Date().toISOString()
  },
)
```

----------------------------------------

TITLE: Client Middleware Logic (TSX)
DESCRIPTION: Shows how to define client-side middleware logic using the `client` method in TanStack Start. This logic executes before and after nested middleware and RPC functions, sharing an API similar to server middleware.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
const loggingMiddleware = createMiddleware({ type: 'function' }).client(
  async ({ next }) => {
    console.log('Request sent')
    const result = await next()
    console.log('Response received')
    return result
  },
)
```

----------------------------------------

TITLE: Define Server Functions in TanStack Start (TSX)
DESCRIPTION: Demonstrates how to define server functions in TanStack Start using `createServerFn`. This allows server-side logic to be executed, replacing the `'use server'` directive from Next.js.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: tsx
CODE:
```
import { createServerFn } from "@tanstack/react-start"

export const create = createServerFn().handler(async () => {
  return true
})
```

----------------------------------------

TITLE: SolidStart Type-Safe Server Function Handler
DESCRIPTION: This example illustrates how SolidStart server functions ensure type safety by relying on validator functions. The return type of the validator dictates the type of the 'data' argument in the handler, enhancing runtime data integrity.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
type Person = {
  name: string
}
export const greet = createServerFn({ method: 'GET' })
  .validator((person: unknown): Person => {
    if (typeof person !== 'object' || person === null) {
      throw new Error('Person must be an object')
    }
    if ('name' in person && typeof person.name !== 'string') {
      throw new Error('Person.name must be a string')
    }
    return person as Person
  })
  .handler(
    async ({
      data, // Person
    }) => {
      return `Hello, ${data.name}!`
    },
  )
function test() {
  greet({ data: { name: 'John' } }) // OK
  greet({ data: { name: 123 } }) // Error: Argument of type '{ name: number; }' is not assignable to parameter of type 'Person'.
}
```

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
type Person = {
  name: string
}
export const greet = createServerFn({ method: 'GET' })
  .validator((person: unknown): Person => {
    if (typeof person !== 'object' || person === null) {
      throw new Error('Person must be an object')
    }
    if ('name' in person && typeof person.name !== 'string') {
      throw new Error('Person.name must be a string')
    }
    return person as Person
  })
  .handler(
    async ({
      data, // Person
    }) => {
      return `Hello, ${data.name}!`
    },
  )
function test() {
  greet({ data: { name: 'John' } }) // OK
  greet({ data: { name: 123 } }) // Error: Argument of type '{ name: number; }' is not assignable to parameter of type 'Person'.
}
```

----------------------------------------

TITLE: Throwing Not Found Error in TanStack Router (TSX)
DESCRIPTION: Demonstrates how to use the `notFound` function from `@tanstack/solid-router` within a server function to signal that a requested resource was not found. This allows for custom 404 page rendering. The example shows throwing `notFound` conditionally within a `createServerFn` handler.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { notFound } from '@tanstack/solid-router'
import { createServerFn } from '@tanstack/solid-start'
const getStuff = createServerFn({ method: 'GET' }).handler(async () => {
  // Randomly return a not found error
  if (Math.random() < 0.5) {
    throw notFound()
  }
  // Or return some stuff
  return {
    stuff: 'stuff',
  }
})
export const Route = createFileRoute('/stuff')({
  loader: async () => {
    const stuff = await getStuff()
    return {
      stuff,
    }
  },
})
```

----------------------------------------

TITLE: React Router Setup with TanStack
DESCRIPTION: Configures the root route for a TanStack Router application in React. It includes setting up meta tags for SEO, defining error and not found components, and integrating a shell component for the document structure. It also sets up navigation links and includes TanStack Router Devtools.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-basic

LANGUAGE: tsx
CODE:
```
/// <reference types="vite/client" />
import {
  HeadContent,
  Link,
  Scripts,
  createRootRoute,
} from '@tanstack/react-router'
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'
import * as React from 'react'
import { DefaultCatchBoundary } from '~/components/DefaultCatchBoundary'
import { NotFound } from '~/components/NotFound'
import appCss from '~/styles/app.css?url'
import { seo } from '~/utils/seo'

export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      ...seo({
        title:
          'TanStack Start | Type-Safe, Client-First, Full-Stack React Framework',
        description: `TanStack Start is a type-safe, client-first, full-stack React framework. `,
      }),
    ],
    links: [
      { rel: 'stylesheet', href: appCss },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        href: '/apple-touch-icon.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '32x32',
        href: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '16x16',
        href: '/favicon-16x16.png',
      },
      { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
      { rel: 'icon', href: '/favicon.ico' },
    ],
    scripts: [
      {
        src: '/customScript.js',
        type: 'text/javascript',
      },
    ],
  }),
  errorComponent: DefaultCatchBoundary,
  notFoundComponent: () => <NotFound />,
  shellComponent: RootDocument,
})

function RootDocument({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="p-2 flex gap-2 text-lg">
          <Link
            to="/"
            activeProps={{
              className: 'font-bold',
            }}
            activeOptions={{ exact: true }}
          >
            Home
          </Link>{' '}
          <Link
            to="/posts"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Posts
          </Link>{' '}
          <Link
            to="/users"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Users
          </Link>{' '}
          <Link
            to="/route-a"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Pathless Layout
          </Link>{' '}
          <Link
            to="/deferred"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Deferred
          </Link>{' '}
          <Link
            // @ts-expect-error
            to="/this-route-does-not-exist"
            activeProps={{
              className: 'font-bold',
            }}
          >
            This Route Does Not Exist
          </Link>
        </div>
        <hr />
        {children}
        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}

```

----------------------------------------

TITLE: TanStack Router: Handle Dynamic Path Parameters
DESCRIPTION: Shows how to define server routes with dynamic path parameters, allowing the handler to access specific segments of the URL as parameters. Supports single and multiple dynamic parameters.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: ts
CODE:
```
// routes/users/$id.ts
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ params }) => {
    const { id } = params
    return new Response(`User ID: ${id}`)
  },
})

// Visit /users/123 to see the response
// User ID: 123
```

LANGUAGE: ts
CODE:
```
// routes/users/$id/posts/$postId.ts
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ params }) => {
    const { id, postId } = params
    return new Response(`User ID: ${id}, Post ID: ${postId}`)
  },
})

// Visit /users/123/posts/456 to see the response
// User ID: 123, Post ID: 456
```

----------------------------------------

TITLE: TanStack Router Configuration
DESCRIPTION: Configures the TanStack Router for a TanStack Start application. It sets up route tree generation and enables scroll restoration for a better user experience. This is a core part of defining navigation behavior.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/learn-the-basics

LANGUAGE: tsx
CODE:
```
// src/router.tsx
import { createRouter as createTanStackRouter } from '@tanstack/react-router'
import { routeTree } from './routeTree.gen'

export function createRouter() {
  const router = createTanStackRouter({
    routeTree,
    scrollRestoration: true,
  })

  return router
}

declare module '@tanstack/react-router' {
  interface Register {
    router: ReturnType<typeof createRouter>
  }
}
```

----------------------------------------

TITLE: Inferring Types with Zod Validation
DESCRIPTION: Demonstrates how server functions infer input and output types using the Zod validation library. The validator transforms input data, and the handler's return value dictates the output type. This example shows a transaction schema with amount transformation.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
import { z } from 'zod'
const transactionSchema = z.object({
  amount: z.string().transform((val) => parseInt(val, 10)),
})
const createTransaction = createServerFn()
  .validator(transactionSchema)
  .handler(({ data }) => {
    return data.amount // Returns a number
  })
createTransaction({
  data: {
    amount: '123', // Accepts a string
  },
})
```

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
import { z } from 'zod'
const transactionSchema = z.object({
  amount: z.string().transform((val) => parseInt(val, 10)),
})
const createTransaction = createServerFn()
  .validator(transactionSchema)
  .handler(({ data }) => {
    return data.amount // Returns a number
  })
createTransaction({
  data: {
    amount: '123', // Accepts a string
  },
})
```

----------------------------------------

TITLE: Configure Vite with TanStack Start Plugin
DESCRIPTION: This TypeScript configuration for vite.config.ts integrates the TanStack Start plugin, Tailwind CSS, and tsconfig-paths for a streamlined development environment. It also sets the server port and specifies the routes directory.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import tailwindcss from '@tailwindcss/vite'
import { tanstackStart } from '@tanstack/react-start/plugin/vite'
import { defineConfig } from 'vite'
import tsconfigPaths from 'vite-tsconfig-paths'

export default defineConfig({
  server: {
    port: 3000,
  },
  plugins: [
    tailwindcss(),
    // Enables Vite to resolve imports using path aliases.
    tsconfigPaths(),
    tanstackStart({
      tsr: {
        // Specifies the directory TanStack Router uses for your routes.
        routesDirectory: 'src/app', // Defaults to "src/routes"
      },
    }),
  ],
})
```

----------------------------------------

TITLE: Import CSS in Root Component (TypeScript/TSX)
DESCRIPTION: Imports the generated CSS file into the `__root.tsx` file using a URL query (`?url`) and adds a triple-slash directive for Vite client type definitions. The CSS file is then linked in the `head` configuration of the root route.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/tailwind-integration

LANGUAGE: tsx
CODE:
```
// src/routes/__root.tsx
/// <reference types="vite/client" />
// other imports...
import appCss from '../styles/app.css?url'
export const Route = createRootRoute({
  head: () => ({
    meta: [
      // your meta tags and site config
    ],
    links: [{ rel: 'stylesheet', href: appCss }],
    // other head config
  }),
  component: RootComponent,
})
```

----------------------------------------

TITLE: Respond with JSON Data
DESCRIPTION: Illustrates how to send a JSON response from a TanStack Start server route. It shows the standard method of stringifying JSON and setting the 'Content-Type' header, which is essential for APIs returning structured data.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    return new Response(JSON.stringify({ message: 'Hello, World!' }), {
      headers: {
        'Content-Type': 'application/json',
      },
    })
  },
})

// Visit /hello to see the response
// {"message":"Hello, World!"}
```

----------------------------------------

TITLE: Add Tailwind Directives to CSS (CSS)
DESCRIPTION: Adds the necessary Tailwind CSS directives (`@tailwind base`, `@tailwind components`, `@tailwind utilities`) to the main CSS file (e.g., `src/styles/app.css`). These directives inject Tailwind's styles into the project.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/tailwind-integration

LANGUAGE: css
CODE:
```
/* src/styles/app.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

```

----------------------------------------

TITLE: TanStack Start Error and Not Found Components
DESCRIPTION: Defines the components to be rendered for error boundaries and not-found routes within a TanStack Start application. These ensure graceful handling of application errors and undefined routes.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-basic-react-query

LANGUAGE: jsx
CODE:
```
errorComponent: (props) => {
    return (
      <RootDocument>
        <DefaultCatchBoundary {...props} />
      </RootDocument>
    )
  },
  notFoundComponent: () => <NotFound />,
  component: RootComponent,
})
```

----------------------------------------

TITLE: Access Specific Header in Server Function
DESCRIPTION: Shows how to access a specific request header by its name within a TanStack Start server function using the `getHeader` utility. This allows targeted retrieval of header values like 'User-Agent'.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
import { getHeader } from '@tanstack/solid-start/server'
export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    console.log(getHeader('User-Agent')) // Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3
  },
)
```

----------------------------------------

TITLE: Adapt Home Page for TanStack Start
DESCRIPTION: This snippet shows how to modify the home page component to be compatible with TanStack Start's routing system. It replaces the default Next.js export with TanStack Router's `createFileRoute` definition.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: tsx
CODE:
```
export const Route = createFileRoute('/')({
  component: Home,
})

function Home() {
  return (
    <main className="min-h-dvh w-screen flex items-center justify-center flex-col gap-y-4 p-4">
      <img
        className="max-w-sm w-full"
        src="https://raw.githubusercontent.com/tanstack/tanstack.com/main/src/images/splash-dark.png"
        alt="TanStack Logo"
      />
      <h1>
        <span className="line-through">Next.js</span> TanStack Start
      </h1>
      <a
        className="bg-foreground text-background rounded-full px-4 py-1 hover:opacity-90"
        href="https://tanstack.com/start/latest"
        target="_blank"
      >
        Docs
      </a>
    </main>
  )
}
```

----------------------------------------

TITLE: Update package.json for Vite and Module Type
DESCRIPTION: This snippet shows how to update the package.json file to use Vite's CLI and set the module type to 'module'. It includes the necessary scripts for development and building.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/build-from-scratch

LANGUAGE: json
CODE:
```
{
  // ...
  "type": "module",
  "scripts": {
    "dev": "vite dev",
    "build": "vite build"
  }
}
```

----------------------------------------

TITLE: Define a Server Route
DESCRIPTION: Shows how to define a server route by exporting `ServerRoute` created with `createServerFileRoute`. This allows for adding route-level middleware and defining handlers for different HTTP methods like GET.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: ts
CODE:
```
// routes/hello.ts
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    return new Response('Hello, World! from ' + request.url)
  },
})

```

----------------------------------------

TITLE: Import using Path Alias
DESCRIPTION: Demonstrates how to use the configured path alias `~` for importing components, replacing long relative paths.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/path-aliases

LANGUAGE: typescript
CODE:
```
// app/routes/posts/$postId/edit.tsx
import { Input } from '~/components/ui/input'
// instead of
import { Input } from '../../../components/ui/input'
```

----------------------------------------

TITLE: Cancel Server Function with AbortSignal
DESCRIPTION: Demonstrates how to cancel a server function call on the client using an AbortSignal. On the server, the AbortSignal notifies if the request closed before execution finished. This example shows setting up a server function that can be aborted and how to trigger the abort from the client.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
export const abortableServerFn = createServerFn().handler(
  async ({ signal }) => {
    return new Promise<string>((resolve, reject) => {
      if (signal.aborted) {
        return reject(new Error('Aborted before start'))
      }
      const timerId = setTimeout(() => {
        console.log('server function finished')
        resolve('server function result')
      }, 1000)
      const onAbort = () => {
        clearTimeout(timerId)
        console.log('server function aborted')
        reject(new Error('Aborted'))
      }
      signal.addEventListener('abort', onAbort, { once: true })
    })
  },
)
// Usage
function Test() {
  const controller = new AbortController()
  const serverFnPromise = abortableServerFn({
    signal: controller.signal,
  })
  await new Promise((resolve) => setTimeout(resolve, 500))
  controller.abort()
  try {
    const serverFnResult = await serverFnPromise
    console.log(serverFnResult) // should never get here
  } catch (error) {
    console.error(error) // "signal is aborted without reason"
  }
}
```

----------------------------------------

TITLE: Redirect to External URL (SolidJS)
DESCRIPTION: Illustrates how to redirect a user to an external website or URL using the `href` option within the `redirect` function. This is useful for authentication flows or linking to third-party services.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { redirect } from '@tanstack/solid-router'
import { createServerFn } from '@tanstack/solid-start'
export const auth = createServerFn({ method: 'GET' }).handler(async () => {
  // Redirect the user to the auth provider
  throw redirect({
    href: 'https://authprovider.com/login',
  })
})
```

----------------------------------------

TITLE: Define Basic Server Function
DESCRIPTION: Defines a server function using `createServerFn` that returns the current time after a 1-second delay. This demonstrates the basic structure and asynchronous handling within a server function.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
export const getServerTime = createServerFn().handler(async () => {
  // Wait for 1 second
  await new Promise((resolve) => setTimeout(resolve, 1000))
  // Return the current time
  return new Date().toISOString()
})
```

----------------------------------------

TITLE: TanStack Start Vite Plugin for Cloudflare Workers
DESCRIPTION: Configure the TanStack Start Vite plugin to target Cloudflare Workers by setting the 'target' option to 'cloudflare-module' in your vite.config.ts file. This is a prerequisite for deploying to Cloudflare Workers.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/hosting

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { tanstackStart } from '@tanstack/react-start/plugin/vite'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [tanstackStart({ target: 'cloudflare-module' })],
})
```

----------------------------------------

TITLE: Create TanStack Start Handler
DESCRIPTION: Demonstrates how to create a server handler using `createStartHandler` from `@tanstack/react-start/server`. This handler is responsible for matching incoming requests to server routes and executing middleware and handlers. It takes a `createRouter` function and a stream handler as arguments.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: tsx
CODE:
```
// server.ts
import {
  createStartHandler,
  defaultStreamHandler,
} from '@tanstack/react-start/server'
import { createRouter } from './router'
export default createStartHandler({
  createRouter,
})(defaultStreamHandler)

```

LANGUAGE: tsx
CODE:
```
// server.ts
import { createStartHandler } from '@tanstack/react-start/server'
export default defineHandler((event) => {
  const startHandler = createStartHandler({
    createRouter,
  })(defaultStreamHandler)
  return startHandler(event)
})

```

----------------------------------------

TITLE: Configure Server Function with Options
DESCRIPTION: Shows how to configure a server function with specific options, such as the HTTP method ('GET') and response handling mode ('data'). The `handler` function contains the actual logic.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
export const getData = createServerFn({
  method: 'GET', // HTTP method to use
  response: 'data', // Response handling mode
}).handler(async () => {
  // Function implementation
})
```

----------------------------------------

TITLE: Handling General Server Errors in TanStack Router (TSX)
DESCRIPTION: Illustrates how to catch general server-side errors thrown from `createServerFn` handlers within a route's loader. Unhandled errors are serialized and sent to the client with a 500 status code. This example shows a `try...catch` block to gracefully handle potential errors, such as accessing properties of undefined.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  undefined.foo()
})
export const Route = createFileRoute('/stuff')({
  loader: async () => {
    try {
      await doStuff()
    } catch (error) {
      // Handle the error:
      // error === {
      //   message: "Cannot read property 'foo' of undefined",
      //   stack: "TypeError: Cannot read property 'foo' of undefined\n    at doStuff (file:///path/to/file.ts:3:3)"
    }
  },
})
```

----------------------------------------

TITLE: Use Tailwind CSS in TanStack Router (TSX)
DESCRIPTION: Demonstrates how to use Tailwind CSS classes within a TanStack Router component written in TSX. This example shows a simple 'Hello World' div with red background and white text, utilizing Tailwind's utility classes.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/tailwind-integration

LANGUAGE: tsx
CODE:
```
// src/routes/index.tsx
import { createFileRoute } from '@tanstack/solid-router'

export const Route = createFileRoute('/')({
  component: Home,
})

function Home() {
  return <div className="bg-red-500 text-white p-4">Hello World</div>
}

```

----------------------------------------

TITLE: TanStack Start SPA Shell Mask Path Configuration
DESCRIPTION: Customize the default pathname used to generate the SPA shell in TanStack Start. This configuration is done within the vite.config.ts file.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/spa-mode

LANGUAGE: typescript
CODE:
```
// vite.config.ts
export default defineConfig({
  plugins: [
    tanstackStart({
      spa: {
        maskPath: '/app',
      },
    }),
  ],
})

```

----------------------------------------

TITLE: Set Custom Status Code in Server Function Response
DESCRIPTION: Demonstrates how to set a custom HTTP status code for the response generated by a TanStack Start server function using the `setResponseStatus` utility. This is useful for indicating specific outcomes like successful creation (201).

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
import { setResponseStatus } from '@tanstack/solid-start/server'
export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    setResponseStatus(201)
    return new Date().toISOString()
  },
)
```

----------------------------------------

TITLE: Use json Helper for JSON Responses
DESCRIPTION: Explains the usage of the `json` helper function from `@tanstack/solid-start` for simplifying JSON responses. This function automatically serializes the object and sets the 'Content-Type' header to 'application/json'.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
import { json } from '@tanstack/solid-start'

export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    return json({ message: 'Hello, World!' })
  },
})

// Visit /hello to see the response
// {"message":"Hello, World!"}
```

----------------------------------------

TITLE: TanStack Router SSR Inheritance Example 2
DESCRIPTION: Shows a more complex SSR inheritance scenario in TanStack Router. The `details` route sets `ssr: false`, overriding its parent's `ssr: true` and its grandparent's `ssr: 'data-only'`, demonstrating how restrictions are applied.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/selective-ssr

LANGUAGE: tsx
CODE:
```
root { ssr: undefined }
  posts { ssr: 'data-only' }
     $postId { ssr: true }
       details { ssr: false }

```

----------------------------------------

TITLE: Basic Redirect in Server Function
DESCRIPTION: Demonstrates how to throw a redirect error from a server function to redirect the user to a different URL. This is achieved using the `redirect` function from `@tanstack/react-router` and `createServerFn` from `@tanstack/react-start`. The example redirects to the home page ('/').

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { redirect } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'
export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  // Redirect the user to the home page
  throw redirect({
    to: '/',
  })
})
```

----------------------------------------

TITLE: React Root Route Setup with Material UI
DESCRIPTION: Configures the root route for a React application using TanStack Router. It integrates Material UI components, custom theme, and Roboto font, setting up the basic document structure with providers and navigation elements.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-material-ui

LANGUAGE: tsx
CODE:
```
/// <reference types="vite/client" />
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'
import {
  HeadContent,
  Outlet,
  Scripts,
  createRootRoute,
} from '@tanstack/react-router'
import { CacheProvider } from '@emotion/react'
import { Container, CssBaseline, ThemeProvider } from '@mui/material'
import createCache from '@emotion/cache'
import fontsourceVariableRobotoCss from '@fontsource-variable/roboto?url'
import React from 'react'
import { theme } from '~/setup/theme'
import { Header } from '~/components/Header'

export const Route = createRootRoute({
  head: () => ({
    links: [{ rel: 'stylesheet', href: fontsourceVariableRobotoCss }],
  }),
  component: RootComponent,
})

function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}

function Providers({ children }: { children: React.ReactNode }) {
  const emotionCache = createCache({ key: 'css' })

  return (
    <CacheProvider value={emotionCache}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        {children}
      </ThemeProvider>
    </CacheProvider>
  )
}

function RootDocument({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <Providers>
          <Header />

          <Container component="main" sx={{ paddingBlock: 4 }}>
            {children}
          </Container>
        </Providers>

        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Adapt Root Layout for TanStack Start
DESCRIPTION: This TypeScript React (TSX) code demonstrates the transformation of a Next.js layout file to TanStack Start's __root.tsx format. It includes setting up metadata, defining the root route with head content, and structuring the main layout component with Outlet and Scripts for routing.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: tsx
CODE:
```
- import type { Metadata } from "next" // [!code --]
import {
  Outlet,
  createRootRoute,
  HeadContent,
  Scripts,
} from "@tanstack/react-router"
import "./globals.css"

- export const metadata: Metadata = { // [!code --]
-   title: "Create Next App", // [!code --]
-   description: "Generated by create next app", // [!code --]
- } // [!code --]
export const Route = createRootRoute({
  head: () => ({
    meta: [
      { charSet: "utf-8" },
      {
        name: "viewport",
        content: "width=device-width, initial-scale=1",
      },
      { title: "TanStack Start Starter" }
    ],
  }),
  component: RootLayout,
})

- export default function RootLayout({
-   children,
- }: Readonly<{
-   children: React.ReactNode
- }>) {
-   return (
-     <html lang="en">
-       <body>{children}</body>
-     </html>
-   )
- }
function RootLayout() {
  return (
    <html lang="en">
      <head>
        <HeadContent />
      </head>
      <body>
        <Outlet />
        <Scripts />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Dynamic Data Loading in Root Route (TSX)
DESCRIPTION: This code snippet demonstrates how to define a loader in the root route of a TanStack Start application to fetch dynamic data. The data, in this case a 'name', is then used within the root component to render a personalized greeting. This showcases how server-rendered data is integrated into the application's shell.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/spa-mode

LANGUAGE: tsx
CODE:
```
import { createRootRoute, useLoaderData } from '@tanstack/react-router'
import { Outlet } from '@tanstack/react-router'

const Root = () => {
  const { name } = useLoaderData()
  return (
    <html>
      <body>
        <h1>Hello, {name}!</h1>
        <Outlet />
      </body>
    </html>
  )
}

export const RootRoute = createRootRoute({
  loader: async () => {
    return {
      name: 'Tanner',
    }
  },
  component: Root,
})

```

----------------------------------------

TITLE: TanStack Router Features
DESCRIPTION: TanStack Router provides a comprehensive, type-safe routing system for Solid applications, including features like inferred TypeScript support, nested routing, route loaders with caching, and automatic prefetching.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/overview

LANGUAGE: TypeScript
CODE:
```
100% inferred TypeScript support
Typesafe navigation
Nested Routing and pathless layout routes
Built-in Route Loaders w/ SWR Caching
Designed for client-side data caches (TanStack Query, SWR, etc.)
Automatic route prefetching
Asynchronous route elements and error boundaries
File-based Route Generation
Typesafe JSON-first Search Params state management APIs
Path and Search Parameter Schema Validation
Search Param Navigation APIs
Custom Search Param parser/serializer support
Search param middleware
Route matching/loading middleware
```

----------------------------------------

TITLE: Access Search Parameters in TanStack Start (TSX)
DESCRIPTION: Shows how to access search parameters from the URL in TanStack Start using `Route.useSearch()`. This allows retrieval of query string values like `?page=1&filter=active`.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: tsx
CODE:
```
const { page, filter, sort } = Route.useSearch()
```

----------------------------------------

TITLE: TanStack Router Configuration (router.tsx)
DESCRIPTION: This TypeScript React snippet defines the router configuration for TanStack Start. It uses `createRouter` from `@tanstack/react-router` and imports the route tree from `routeTree.gen`. It also includes configuration for scroll restoration and declares the router type for type safety.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/build-from-scratch

LANGUAGE: tsx
CODE:
```
// src/router.tsx
import { createRouter as createTanStackRouter } from '@tanstack/react-router'
import { routeTree } from './routeTree.gen'

export function createRouter() {
  const router = createTanStackRouter({
    routeTree,
    scrollRestoration: true,
  })

  return router
}

declare module '@tanstack/react-router' {
  interface Register {
    router: ReturnType<typeof createRouter>
  }
}
```

----------------------------------------

TITLE: Retrieve Dynamic Route Parameters in TanStack Start (TSX)
DESCRIPTION: Demonstrates how to retrieve dynamic route parameters in TanStack Start using `createFileRoute` and `useParams`. This is essential for accessing values from URLs like `/app/posts/$slug`.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: tsx
CODE:
```
export const Route = createFileRoute('/app/posts/$slug')({
  component: Page,
})

function Page() {
  const { slug } = Route.useParams()
  return <div>My Post: {slug}</div>
}
```

----------------------------------------

TITLE: React Root Component Setup with TanStack Router
DESCRIPTION: Sets up the root route for a React application using TanStack Router. It configures global metadata, error handling, not found components, and the main application layout, including navigation and essential links.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-convex-trellaux

LANGUAGE: tsx
CODE:
```
/// <reference types="vite/client" />
import { ReactQueryDevtools } from '@tanstack/react-query-devtools/production'
import {
  Link,
  Outlet,
  createRootRouteWithContext,
  useRouterState,
  HeadContent,
  Scripts,
} from '@tanstack/react-router'
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'
import * as React from 'react'
import { Toaster } from 'react-hot-toast'
import type { QueryClient } from '@tanstack/react-query'
import { DefaultCatchBoundary } from '~/components/DefaultCatchBoundary'
import { IconLink } from '~/components/IconLink'
import { NotFound } from '~/components/NotFound'
import appCss from '~/styles/app.css?url'
import { seo } from '~/utils/seo'
import { Loader } from '~/components/Loader'
export const Route = createRootRouteWithContext<{ queryClient: QueryClient }>()({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      ...seo({
        title:
          'TanStack Start | Type-Safe, Client-First, Full-Stack React Framework',
        description: `TanStack Start is a type-safe, client-first, full-stack React framework. `,
      }),
    ],
    links: [
      { rel: 'stylesheet', href: appCss },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        href: '/apple-touch-icon.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '32x32',
        href: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '16x16',
        href: '/favicon-16x16.png',
      },
      { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
      { rel: 'icon', href: '/favicon.ico' },
    ],
  }),
  errorComponent: (props) => {
    return (
      <RootDocument>
        <DefaultCatchBoundary {...props} />
      </RootDocument>
    )
  },
  notFoundComponent: () => <NotFound />,
  component: RootComponent,
})
function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}
function RootDocument({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="h-screen flex flex-col min-h-0">
          <div className="bg-slate-900 border-b border-slate-800 flex items-center justify-between py-4 px-8 box-border">
            <div className="flex items-center gap-4">
              <div>
                <Link to="/" className="block leading-tight">
                  <div className="font-black text-2xl text-white">Trellaux</div>
                  <div className="text-slate-500">a TanStack Demo</div>
                </Link>
              </div>
              <Loader />
            </div>
            <div className="flex items-center gap-6">
              <IconLink
                href="https://github.com/TanStack/router/tree/main/examples/react/start-trellaux"
                label="Source"
                icon="/github-mark-white.png"
              />
              <IconLink
                href="https://tanstack.com"
                icon="/tanstack.png"
                label="TanStack"
              />
            </div>
          </div>
          <div className="flex-grow min-h-0 h-full flex flex-col">
            {children}
            <Toaster />
          </div>
        </div>
        <ReactQueryDevtools />
        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Redirect with Custom Headers (SolidJS)
DESCRIPTION: Demonstrates how to include custom HTTP headers with a redirect response. This can be used for various purposes, such as passing metadata or tracking information during the redirection process.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { redirect } from '@tanstack/solid-router'
import { createServerFn } from '@tanstack/solid-start'
export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  // Redirect the user to the home page with a custom header
  throw redirect({
    to: '/',
    headers: {
      'X-Custom-Header': 'value',
    },
  })
})
```

----------------------------------------

TITLE: TanStack Router: Handle Wildcard/Splat Parameters
DESCRIPTION: Illustrates how to define server routes that capture any remaining path segments using a wildcard parameter (denoted by '$'). The captured segments are available in the params object.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: ts
CODE:
```
// routes/file/$.ts
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ params }) => {
    const { _splat } = params
    return new Response(`File: ${_splat}`)
  },
})

// Visit /file/hello.txt to see the response
// File: hello.txt
```

----------------------------------------

TITLE: Access Catch-All Route Parameters in TanStack Start (TSX)
DESCRIPTION: Explains how to access parameters from catch-all routes (e.g., `src/app/posts/$.tsx`) in TanStack Start using `Route.useParams()`. The catch-all parameter is typically accessed via `_splat`.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: tsx
CODE:
```
const { _splat } = Route.useParams()
```

----------------------------------------

TITLE: Netlify Server Functions and Routes Redirects
DESCRIPTION: Allow specific subpaths to be routed through to the server using Netlify's _redirects file. This includes configuring base paths for server functions and server routes.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/spa-mode

LANGUAGE: bash
CODE:
```
# Allow requests to /_serverFn/* to be routed through to the server (If you have configured your server function base path to be something other than /_serverFn, use that instead)
/_serverFn/* /_serverFn/:splat 200
# Allow any requests to /api/* to be routed through to the server (Server routes can be created at any path, so you must ensure that any server routes you want to use are under this path, or simply add additional redirects for each server route base you want to expose)
/api/* /api/:splat 200
# Catch all other 404 requests and rewrite them to the SPA shell
/* /_shell.html 200

```

----------------------------------------

TITLE: TanStack Start Customized SPA Rendering
DESCRIPTION: Conditionally render UI elements in TanStack Start based on whether the current route is the SPA shell. This is achieved using the isShell() function from the router instance.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/spa-mode

LANGUAGE: typescript
CODE:
```
// src/routes/root.tsx
export default function Root() {
  const isShell = useRouter().isShell()
  if (isShell) console.log('Rendering the shell!')
}

```

----------------------------------------

TITLE: Netlify Redirects: Catch-all 404 to SPA Shell
DESCRIPTION: This Netlify _redirects file configuration sets up a catch-all rule to rewrite all 404 requests to the SPA shell, ensuring that any unhandled routes gracefully fall back to the main application.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/spa-mode

LANGUAGE: netlify
CODE:
```
# Catch all other 404 requests and rewrite them to the SPA shell
/* /_shell.html 200
```

LANGUAGE: netlify
CODE:
```
# Catch all other 404 requests and rewrite them to the SPA shell
/* /_shell.html 200
```

----------------------------------------

TITLE: Configure app.config.ts with vite-tsconfig-paths
DESCRIPTION: Integrates the `vite-tsconfig-paths` plugin into the Vite configuration within `app.config.ts` to activate path aliases.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/path-aliases

LANGUAGE: typescript
CODE:
```
// app.config.ts
import { defineConfig } from '@tanstack/solid-start/config'
import viteTsConfigPaths from 'vite-tsconfig-paths'
export default defineConfig({
  vite: {
    plugins: [
      // this is the plugin that enables path aliases
      viteTsConfigPaths({
        projects: ['./tsconfig.json'],
      }),
    ],
  },
})
```

----------------------------------------

TITLE: Netlify Redirects: Allow Server Functions and API Routes
DESCRIPTION: This Netlify _redirects file configuration allows specific subpaths like /_serverFn/* and /api/* to be routed through to the server, while still maintaining a catch-all redirect to the SPA shell for other 404 errors.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/spa-mode

LANGUAGE: netlify
CODE:
```
# Allow requests to /_serverFn/* to be routed through to the server (If you have configured your server function base path to be something other than /_serverFn, use that instead)
/_serverFn/* /_serverFn/:splat 200
# Allow any requests to /api/* to be routed through to the server (Server routes can be created at any path, so you must ensure that any server routes you want to use are under this path, or simply add additional redirects for each server route base you want to expose)
/api/* /api/:splat 200
# Catch all other 404 requests and rewrite them to the SPA shell
/* /_shell.html 200
```

LANGUAGE: netlify
CODE:
```
# Allow requests to /_serverFn/* to be routed through to the server (If you have configured your server function base path to be something other than /_serverFn, use that instead)
/_serverFn/* /_serverFn/:splat 200
# Allow any requests to /api/* to be routed through to the server (Server routes can be created at any path, so you must ensure that any server routes you want to use are under this path, or simply add additional redirects for each server route base you want to expose)
/api/* /api/:splat 200
# Catch all other 404 requests and rewrite them to the SPA shell
/* /_shell.html 200
```

----------------------------------------

TITLE: Set Response Status Code with setResponseStatus Helper
DESCRIPTION: Shows how to use the `setResponseStatus` helper function from `@tanstack/solid-start/server` to set the HTTP status code. This provides an alternative and often cleaner way to manage response status codes.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
import { json } from '@tanstack/solid-start'
import { setResponseStatus } from '@tanstack/solid-start/server'

export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request, params }) => {
    const user = await findUser(params.id)
    if (!user) {
      setResponseStatus(404)
      return new Response('User not found')
    }
    return json(user)
  },
})
```

----------------------------------------

TITLE: Set Response Status Code with Response Constructor
DESCRIPTION: Demonstrates how to set a custom HTTP status code (e.g., 404) when returning a `Response` object in TanStack Start. This is useful for indicating specific outcomes like resource not found.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
import { json } from '@tanstack/solid-start'

export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request, params }) => {
    const user = await findUser(params.id)
    if (!user) {
      return new Response('User not found', {
        status: 404,
      })
    }
    return json(user)
  },
})
```

----------------------------------------

TITLE: Provide Context to Next Middleware (TSX)
DESCRIPTION: Demonstrates how to pass context to the next middleware in TanStack Start. The `next` function can be called with a context object, merging properties into the parent context for subsequent middleware.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/solid-start'
const awesomeMiddleware = createMiddleware({ type: 'function' }).server(
  ({ next }) => {
    return next({
      context: {
        isAwesome: Math.random() > 0.5,
      },
    })
  },
)
const loggingMiddleware = createMiddleware({ type: 'function' })
  .middleware([awesomeMiddleware])
  .server(async ({ next, context }) => {
    console.log('Is awesome?', context.isAwesome)
    return next()
  })
```

----------------------------------------

TITLE: Implement Navigation Links with TanStack Router (TSX)
DESCRIPTION: Illustrates how to use the `Link` component from `@tanstack/react-router` for client-side navigation within a TanStack Start application. It replaces the `next/link` component and uses the `to` prop instead of `href`.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: tsx
CODE:
```
import { Link } from "@tanstack/react-router"

function Component() {
  return <Link to="/dashboard">Dashboard</Link>
}
```

----------------------------------------

TITLE: TanStack Start: Return Raw Response Object
DESCRIPTION: Demonstrates how to return a raw Response object from a TanStack Start server function by setting the 'response' option to 'raw'. This allows for direct control over the response, such as fetching data from an external API.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
export const getServerTime = createServerFn({
  method: 'GET',
  response: 'raw',
}).handler(async () => {
  // Read a file from s3
  return fetch('https://example.com/time.txt')
})
```

----------------------------------------

TITLE: TanStack Router: Add Middleware to Handler
DESCRIPTION: Demonstrates how to provide a handler function via the method builder object to add middleware to a server route handler. This allows for pre-processing requests.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-routes

LANGUAGE: tsx
CODE:
```
// routes/hello.ts
export const ServerRoute = createServerFileRoute().methods((api) => ({
  GET: api.middleware([loggerMiddleware]).handler(async ({ request }) => {
    return new Response('Hello, World! from ' + request.url)
  }),
}))
```

----------------------------------------

TITLE: Generate Tailwind CSS Configuration (Shell)
DESCRIPTION: Generates the Tailwind CSS and PostCSS configuration files (`tailwind.config.js` and `postcss.config.js`) using the Tailwind CLI. The `-p` flag ensures both configuration files are created.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/tailwind-integration

LANGUAGE: shell
CODE:
```
npx tailwindcss init -p

```

----------------------------------------

TITLE: Configure tsconfig.json for Path Aliases
DESCRIPTION: Defines a path alias `~/` that maps to the `./src/` directory in your TypeScript configuration.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/path-aliases

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "~/*": ["./src/*"]
    }
  }
}
```

----------------------------------------

TITLE: Configure vite.config.ts for Path Aliases
DESCRIPTION: This TypeScript code configures the Vite build process to use the 'vite-tsconfig-paths' plugin. By including this plugin, TanStack Start will recognize and utilize the path aliases defined in your tsconfig.json.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/path-aliases

LANGUAGE: typescript
CODE:
```
// app.config.ts
import { defineConfig } from '@tanstack/react-start/config'
import viteTsConfigPaths from 'vite-tsconfig-paths'
export default defineConfig({
  vite: {
    plugins: [
      // this is the plugin that enables path aliases
      viteTsConfigPaths({
        projects: ['./tsconfig.json'],
      }),
    ],
  },
})
```

----------------------------------------

TITLE: Return Primitives and JSON from Server Function (TanStack Start)
DESCRIPTION: Illustrates how server functions in TanStack Start can return primitive data types (like strings) or JSON-serializable objects. The framework automatically handles serialization for these return types.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    return new Date().toISOString()
  },
)
export const getServerData = createServerFn({ method: 'GET' }).handler(
  async () => {
    return {
      message: 'Hello, World!',
    }
  },
)
```

----------------------------------------

TITLE: Server Function Method Option
DESCRIPTION: Illustrates the `method` option for server functions, which specifies the HTTP method to be used for the request. It can be either 'GET' or 'POST'.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
method?: 'GET' | 'POST'
```

----------------------------------------

TITLE: Send Server Context to Client
DESCRIPTION: Shows how to send data from the server to the client using the `sendContext` property. This example sends the current server time to the client, making it accessible in the client middleware's context.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
const serverTimer = createMiddleware({ type: 'function' }).server(
  async ({ next }) => {
    return next({
      sendContext: {
        // Send the current time to the client
        timeFromServer: new Date(),
      },
    })
  },
)

const requestLogger = createMiddleware({ type: 'function' })
  .middleware([serverTimer])
  .client(async ({ next }) => {
    const result = await next()
    // Woah! We have the time from the server!
    console.log('Time from the server:', result.context.timeFromServer)

    return result
  })

```

----------------------------------------

TITLE: TanStack Router: Handling POST Request Body
DESCRIPTION: Shows how to handle POST requests in a server route. The example in 'routes/hello.ts' defines a POST handler that parses the JSON request body, expecting a 'name' property, and returns a personalized greeting.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
export const ServerRoute = createServerFileRoute().methods({
  POST: async ({ request }) => {
    const body = await request.json()
    return new Response(`Hello, ${body.name}! `)
  },
})
// Send a POST request to /hello with a JSON body like { "name": "Tanner" }
// Hello, Tanner!

```

----------------------------------------

TITLE: Uninstall Next.js and Remove Configuration
DESCRIPTION: Removes Next.js and related configuration files from the project during the migration process.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: sh
CODE:
```
npm uninstall @tailwindcss/postcss next
rm postcss.config.* next.config.*
```

----------------------------------------

TITLE: Import Tailwind CSS in App CSS (CSS)
DESCRIPTION: Imports Tailwind CSS directives into a CSS file. This file will be imported into the root component of the TanStack Start application.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/tailwind-integration

LANGUAGE: css
CODE:
```
/* src/styles/app.css */
@import 'tailwindcss';

```

----------------------------------------

TITLE: TanStack Start: Throwing Custom Errors
DESCRIPTION: Shows how to throw custom errors from TanStack Start server functions. Any thrown error (except specific redirect or notFound errors) will be serialized, sent to the client as a JSON response, and accompanied by a 500 status code.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  throw new Error('Something went wrong!')
})
// Usage
function Test() {
  try {
    await doStuff()
  } catch (error) {
    console.error(error)
    // {
    //   message: "Something went wrong!",
    //   stack: "Error: Something went wrong!\n    at doStuff (file:///path/to/file.ts:3:3)"
    // }
  }
}
```

----------------------------------------

TITLE: Configure tsconfig.json for Path Aliases
DESCRIPTION: This JSON configuration defines a path alias '~/*' that maps to the './src/*' directory in your project. This allows you to use '~' as a shortcut for the 'src' folder, simplifying import statements.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/path-aliases

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "~/*": ["./src/*"]
    }
  }
}
```

----------------------------------------

TITLE: Configure TanStack Start Prerendering in Vite
DESCRIPTION: This code snippet demonstrates how to configure the `tanstackStart` plugin in `vite.config.ts` to enable and customize the prerendering process. It includes options for enabling prerendering, controlling subfolder indexing, setting concurrency, enabling link crawling, defining filter functions, configuring retry mechanisms, and specifying callbacks for successful renders. It also shows how to configure prerendering for specific pages.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/static-prerendering

LANGUAGE: typescript
CODE:
```
import { tanstackStart } from '@tanstack/react-start/plugin/vite'
export default defineConfig({
  plugins: [
    tanstackStart({
      prerender: {
        // Enable prerendering
        enabled: true,
        // Enable if you need pages to be at `/page/index.html` instead of `/page.html`
        autoSubfolderIndex: true,
        // How many prerender jobs to run at once
        concurrency: 14,
        // Whether to extract links from the HTML and prerender them also
        crawlLinks: true,
        // Filter function takes the page object and returns whether it should prerender
        filter: ({ path }) => !path.startsWith('/do-not-render-me'),
        // Number of times to retry a failed prerender job
        retryCount: 2,
        // Delay between retries in milliseconds
        retryDelay: 1000,
        // Callback when page is successfully rendered
        onSuccess: ({ page }) => {
          console.log(`Rendered ${page.path}!`)
        },
      },
      // Optional configuration for specific pages (without this it will still automatically
      // prerender all routes)
      pages: [
        {
          path: '/my-page',
          prerender: { enabled: true, outputPath: '/my-page/index.html' },
        },
      ],
    }),
  ],
})
```

----------------------------------------

TITLE: Enable SSR with beforeLoad and loader on Server (TanStack Router)
DESCRIPTION: Configures the route to enable server-side rendering. `beforeLoad` and `loader` execute on the server for the initial request and on the client for subsequent navigations. The component is rendered on the server.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/selective-ssr

LANGUAGE: tsx
CODE:
```
// src/routes/posts/$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  ssr: true,
  beforeLoad: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  loader: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  component: () => <div>This component is rendered on the client</div>,
})

```

LANGUAGE: tsx
CODE:
```
// src/routes/posts/$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  ssr: true,
  beforeLoad: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  loader: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  component: () => <div>This component is rendered on the client</div>,
})

```

----------------------------------------

TITLE: Configure Vite for Tailwind CSS (TypeScript)
DESCRIPTION: Configures the Vite build tool to use the Tailwind CSS plugin. This involves importing the plugin and adding it to the Vite configuration file (`vite.config.ts`).

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/tailwind-integration

LANGUAGE: typescript
CODE:
```
// vite.config.ts
import { defineConfig } from 'vite'
import tsConfigPaths from 'vite-tsconfig-paths'
import { tanstackStart } from '@tanstack/solid-start/plugin/vite'
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
  server: {
    port: 3000,
  },
  plugins: [tsConfigPaths(), tanstackStart(), tailwindcss()]
})

```

----------------------------------------

TITLE: Register Global Middleware
DESCRIPTION: This code snippet demonstrates how to register global middleware in TanStack Start. Global middleware is executed for every server function in the application, making it suitable for tasks like authentication and logging. The middleware is registered in a dedicated file, typically 'app/global-middleware.ts'.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
// app/global-middleware.ts
import { registerGlobalMiddleware } from '@tanstack/solid-start'
import { authMiddleware } from './middleware'
registerGlobalMiddleware({
  middleware: [authMiddleware],
})
```

----------------------------------------

TITLE: Define and Use No-JS Server Function (TS)
DESCRIPTION: This snippet demonstrates how to create a server function using `createServerFn` with a validator and handler. It also shows how to access the function's URL for use in an HTML form's `action` attribute.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: ts
CODE:
```
const yourFn = createServerFn({
  method: 'POST'
})
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const name = formData.get('name')
    if (!name) {
      throw new Error('Name is required')
    }
    return name
  })
  .handler(async ({ data: name }) => {
    console.log(name) // 'John'
  })
console.info(yourFn.url)
```

LANGUAGE: ts
CODE:
```
const yourFn = createServerFn({
  method: 'POST'
})
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const name = formData.get('name')
    if (!name) {
      throw new Error('Name is required')
    }
    return name
  })
  .handler(async ({ data: name }) => {
    console.log(name) // 'John'
  })
console.info(yourFn.url)
```

----------------------------------------

TITLE: Redirect with Status Code (SolidJS)
DESCRIPTION: Shows how to specify an HTTP status code when throwing a redirect from a server function. This allows for SEO-friendly redirects (e.g., 301 Permanent Redirect) or temporary redirects (e.g., 302 Found).

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { redirect } from '@tanstack/solid-router'
import { createServerFn } from '@tanstack/solid-start'
export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  // Redirect the user to the home page with a 301 status code
  throw redirect({
    to: '/',
    status: 301,
  })
})
```

----------------------------------------

TITLE: Call Server Function from Component with useServerFn Hook
DESCRIPTION: Demonstrates using the `useServerFn` hook to bind a server function (`getServerTime`) to a component. This hook simplifies calling server functions and provides a recommended way to handle potential redirects or notFounds thrown by them.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { useServerFn } from '@tanstack/solid-start'
import { useQuery } from '@tanstack/solid-query'
import { getServerTime } from './getServerTime'
export function Time() {
  const getTime = useServerFn(getServerTime)
  const timeQuery = useQuery({
    queryKey: 'time',
    queryFn: () => getTime(),
  })
}
```

----------------------------------------

TITLE: TanStack Router: Multiple Dynamic Path Parameters
DESCRIPTION: Demonstrates defining a server route with multiple dynamic path parameters. The route, defined in 'routes/users/$id/posts/$postId.ts', handles GET requests and extracts both 'id' and 'postId' from the URL to provide a response.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: typescript
CODE:
```
// routes/users/$id/posts/$postId.ts
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ params }) => {
    const { id, postId } = params
    return new Response(`User ID: ${id}, Post ID: ${postId}`)
  },
})
// Visit /users/123/posts/456 to see the response
// User ID: 123, Post ID: 456

```

----------------------------------------

TITLE: React Application Structure with TanStack Router
DESCRIPTION: This snippet illustrates a typical React application layout using TanStack Router. It includes navigation elements, routing outlets, and the integration of TanStack Router's Devtools for debugging. The structure emphasizes component composition for headers, main content, and footers within a theme provider.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-workos

LANGUAGE: jsx
CODE:
```
function App() {
  return (
    <RootDocument>
      <Theme>
        <Container>
          <Box>
            <Card>
              <Flex asChild justify="between">
                <header>
                  <Flex gap="4">
                    <Button asChild variant="soft">
                      <Link to="/">Home</Link>
                    </Button>
                    <Button asChild variant="soft">
                      <Link to="/account">Account</Link>
                    </Button>
                  </Flex>
                  <Suspense fallback={<div>Loading...</div>}>
                    <SignInButton user={user} url={url} />
                  </Suspense>
                </header>
              </Flex>
              <Flex flexGrow="1" align="center" justify="center">
                <main>
                  <Outlet />
                </main>
              </Flex>
            </Card>
          </Box>
          <Footer />
        </Flex>
      </Theme>
      <TanStackRouterDevtools position="bottom-right" />
    </RootDocument>
  );
}
```

----------------------------------------

TITLE: Create TanStack Router
DESCRIPTION: This code defines the main router for the TanStack application using `@tanstack/react-router`. It imports the route tree and configures scroll restoration, ensuring proper routing behavior.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: tsx
CODE:
```
import { createRouter as createTanStackRouter } from '@tanstack/react-router'
import { routeTree } from './routeTree.gen'

export function createRouter() {
  const router = createTanStackRouter({
    routeTree,
    scrollRestoration: true,
  })

  return router
}

declare module '@tanstack/react-router' {
  interface Register {
    router: ReturnType<typeof createRouter>
  }
}
```

----------------------------------------

TITLE: Configure Template Paths for Tailwind CSS (JS)
DESCRIPTION: Configures the `tailwind.config.js` file to specify the paths to all template files. This allows Tailwind to scan these files for class names and generate the necessary CSS. It includes the `content`, `theme`, and `plugins` sections.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/tailwind-integration

LANGUAGE: js
CODE:
```
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
}

```

----------------------------------------

TITLE: TanStack Router: Single Dynamic Path Parameter
DESCRIPTION: Defines a server route with a single dynamic path parameter. The route is created from a file named 'routes/users/$id.ts' and handles GET requests, extracting the 'id' from the route parameters to return a user-specific response.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: typescript
CODE:
```
// routes/users/$id.ts
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ params }) => {
    const { id } = params
    return new Response(`User ID: ${id}`)
  },
})
// Visit /users/123 to see the response
// User ID: 123

```

----------------------------------------

TITLE: Access Request Context in Server Functions (TSX)
DESCRIPTION: Shows how to retrieve the web request object within a server function using `getWebRequest` from '@tanstack/solid-start/server'. This allows access to request details like method and headers.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
import { getWebRequest } from '@tanstack/solid-start/server'
export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    const request = getWebRequest()
    console.log(request.method) // GET
    console.log(request.headers.get('User-Agent')) // Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3
  },
)
```

----------------------------------------

TITLE: Add Authorization Header to Client Request Middleware
DESCRIPTION: This middleware example demonstrates how to add an 'Authorization' header to a client request using the `createMiddleware` function. It retrieves a token from an authentication library and includes it in the request headers.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
import { getToken } from 'my-auth-library'

const authMiddleware = createMiddleware({ type: 'function' }).client(
  async ({ next }) => {
    return next({
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    })
  },
)
```

----------------------------------------

TITLE: Client-Side Payload Validation (TSX)
DESCRIPTION: Explains how to enable client-side payload validation in TanStack Start middleware by setting `validateClient: true`. This validates data before sending it to the server, using a schema derived from the server-side schema.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/solid-start'
import { zodValidator } from '@tanstack/zod-adapter'
import { z } from 'zod'
const workspaceMiddleware = createMiddleware({ validateClient: true })
  .validator(zodValidator(mySchema))
  .server(({ next, data }) => {
    console.log('Workspace ID:', data.workspaceId)
    return next()
  })
```

----------------------------------------

TITLE: Handle FormData in Server Functions (POST)
DESCRIPTION: Demonstrates how to create a server function that accepts FormData, validates required fields ('name', 'age'), and processes them. Includes an example of how to call this function from a client-side form.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
export const greetUser = createServerFn({ method: 'POST' })
  .validator((data) => {
    if (!(data instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const name = data.get('name')
    const age = data.get('age')
    if (!name || !age) {
      throw new Error('Name and age are required')
    }
    return {
      name: name.toString(),
      age: parseInt(age.toString(), 10),
    }
  })
  .handler(async ({ data: { name, age } }) => {
    return `Hello, ${name}! You are ${age} years old.`
  })
// Usage
function Test() {
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault()
        const formData = new FormData(event.currentTarget)
        const response = await greetUser({ data: formData })
        console.log(response)
      }}
    >
      <input name="name" />
      <input name="age" />
      <button type="submit">Submit</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Hybrid SSR: Data Only on Server (TanStack Router)
DESCRIPTION: A hybrid SSR approach where `beforeLoad` and `loader` run on the server, sending data to the client. Server-side rendering of the component is disabled, and it renders only on the client.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/selective-ssr

LANGUAGE: tsx
CODE:
```
// src/routes/posts/$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  ssr: 'data-only',
  beforeLoad: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  loader: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  component: () => <div>This component is rendered on the client</div>,
})

```

LANGUAGE: tsx
CODE:
```
// src/routes/posts/$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  ssr: 'data-only',
  beforeLoad: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  loader: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  component: () => <div>This component is rendered on the client</div>,
})

```

----------------------------------------

TITLE: Access All Headers in Server Function (TanStack Start)
DESCRIPTION: Demonstrates how to retrieve all request headers within a server function using the `getHeaders` utility from `@tanstack/react-start/server`. This is useful for inspecting incoming request details.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
import { getHeaders } from '@tanstack/react-start/server'
export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    console.log(getHeaders())
    // { ... }
  },
)
```

----------------------------------------

TITLE: Server Function Response Option
DESCRIPTION: Shows the `response` option for server functions, which dictates how responses are processed. Options include 'data' (default JSON parsing), 'full' (detailed response object), and 'raw' (direct Response object).

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
response?: 'data' | 'full' | 'raw'
```

----------------------------------------

TITLE: Dynamic Data in SPA Shell - TSX
DESCRIPTION: Illustrates how to fetch and display dynamic data within the SPA shell using loaders. Data fetched via loaders on the Root Route will be available during the prerendering process, allowing for dynamic content in the shell.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/spa-mode

LANGUAGE: tsx
CODE:
```
// src/routes/__root.tsx
export const RootRoute = createRootRoute({
  loader: async () => {
    return {
      name: 'Tanner',
    }
  },
  component: Root,
})
export default function Root() {
  const { name } = useLoaderData()
  return (
    <html>
      <body>
        <h1>Hello, {name}!</h1>
        <Outlet />
      </body>
    </html>
  )
}
```

LANGUAGE: tsx
CODE:
```
// src/routes/__root.tsx
export const RootRoute = createRootRoute({
  loader: async () => {
    return {
      name: 'Tanner',
    }
  },
  component: Root,
})
export default function Root() {
  const { name } = useLoaderData()
  return (
    <html>
      <body>
        <h1>Hello, {name}!</h1>
        <Outlet />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Disable SSR and render only on Client (TanStack Router)
DESCRIPTION: Disables server-side rendering for the route. `beforeLoad` and `loader` execute only on the client during hydration, and the component is also rendered solely on the client.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/selective-ssr

LANGUAGE: tsx
CODE:
```
// src/routes/posts/$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  ssr: false,
  beforeLoad: () => {
    console.log('Executes on the client during hydration')
  },
  loader: () => {
    console.log('Executes on the client during hydration')
  },
  component: () => <div>This component is rendered on the client</div>,
})

```

LANGUAGE: tsx
CODE:
```
// src/routes/posts/$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  ssr: false,
  beforeLoad: () => {
    console.log('Executes on the client during hydration')
  },
  loader: () => {
    console.log('Executes on the client during hydration')
  },
  component: () => <div>This component is rendered on the client</div>,
})

```

----------------------------------------

TITLE: TanStack Router Features
DESCRIPTION: TanStack Router provides a comprehensive, type-safe routing system for React applications, including features like inferred TypeScript support, typesafe navigation, nested routing, route loaders with caching, and automatic prefetching.

SOURCE: https://tanstack.com/start/latest/docs

LANGUAGE: TypeScript
CODE:
```
100% inferred TypeScript support
Typesafe navigation
Nested Routing and pathless layout routes
Built-in Route Loaders w/ SWR Caching
Designed for client-side data caches (TanStack Query, SWR, etc.)
Automatic route prefetching
Asynchronous route elements and error boundaries
File-based Route Generation
Typesafe JSON-first Search Params state management APIs
Path and Search Parameter Schema Validation
Search Param Navigation APIs
Custom Search Param parser/serializer support
Search param middleware
Route matching/loading middleware
```

----------------------------------------

TITLE: Server Function with JSON Parameters
DESCRIPTION: Shows how server functions can accept JSON-serializable objects as parameters, enabling the passing of complex data structures. This example defines a 'Person' type with name and age, and the handler uses this data to return a greeting.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
type Person = {
  name: string
  age: number
}
export const greet = createServerFn({ method: 'GET' })
  .validator((data: Person) => data)
  .handler(async ({ data }) => {
    return `Hello, ${data.name}! You are ${data.age} years old.`
  })
greet({
  data: {
    name: 'John',
    age: 34,
  },
})
```

----------------------------------------

TITLE: Import CSS in Root Component (TypeScript TSX)
DESCRIPTION: Imports the application's CSS file (containing Tailwind directives) into the `__root.tsx` file. This ensures Tailwind CSS is applied globally to the application.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/tailwind-integration

LANGUAGE: typescript
CODE:
```
// src/routes/__root.tsx
/// <reference types="vite/client" />
// other imports...

import appCss from '../styles/app.css?url'

export const Route = createRootRoute({
  head: () => ({
    meta: [
      // your meta tags and site config
    ],
    links: [{ rel: 'stylesheet', href: appCss }],
    // other head config
  }),
  component: RootComponent,
})

```

----------------------------------------

TITLE: Access Request Context in Server Functions (GET)
DESCRIPTION: Shows how to retrieve the web request object within a server function using `getWebRequest`. This allows access to request details like the HTTP method and headers.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
import { getWebRequest } from '@tanstack/react-start/server'
export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    const request = getWebRequest()
    console.log(request.method) // GET
    console.log(request.headers.get('User-Agent')) // Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3
  },
)
```

----------------------------------------

TITLE: Throw Redirect in Server Function (SolidJS)
DESCRIPTION: Demonstrates how to throw a redirect error from a server function using `@tanstack/solid-router`'s `redirect` function. This is typically used to send the user to a different URL, such as the home page.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { redirect } from '@tanstack/solid-router'
import { createServerFn } from '@tanstack/solid-start'
export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  // Redirect the user to the home page
  throw redirect({
    to: '/',
  })
})
```

----------------------------------------

TITLE: Validate Client Context on Server
DESCRIPTION: Illustrates how to secure client-sent context data by validating it on the server-side using a library like Zod. This example shows validating a `workspaceId` to ensure it's a number before use.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
import { zodValidator } from '@tanstack/zod-adapter'
import { z } from 'zod'

const requestLogger = createMiddleware({ type: 'function' })
  .client(async ({ next, context }) => {
    return next({
      sendContext: {
        workspaceId: context.workspaceId,
      },
    })
  })
  .server(async ({ next, data, context }) => {
    // Validate the workspace ID before using it
    const workspaceId = zodValidator(z.number()).parse(context.workspaceId)
    console.log('Workspace ID:', workspaceId)
    return next()
  })

```

----------------------------------------

TITLE: Handle FormData in Server Functions (TSX)
DESCRIPTION: Demonstrates how to create a server function that accepts and validates FormData objects. It includes a validator to check for the presence of 'name' and 'age' and a handler to process the data and return a greeting.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
export const greetUser = createServerFn({ method: 'POST' })
  .validator((data) => {
    if (!(data instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const name = data.get('name')
    const age = data.get('age')
    if (!name || !age) {
      throw new Error('Name and age are required')
    }
    return {
      name: name.toString(),
      age: parseInt(age.toString(), 10),
    }
  })
  .handler(async ({ data: { name, age } }) => {
    return `Hello, ${name}! You are ${age} years old.`
  })
// Usage
function Test() {
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault()
        const formData = new FormData(event.currentTarget)
        const response = await greetUser({ data: formData })
        console.log(response)
      }}>
      <input name="name" />
      <input name="age" />
      <button type="submit">Submit</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Access Specific Header in Server Function (TanStack Start)
DESCRIPTION: Shows how to access a specific request header by its name using the `getHeader` function from `@tanstack/react-start/server`. This allows targeted retrieval of header values like 'User-Agent'.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
import { getHeader } from '@tanstack/react-start/server'
export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    console.log(getHeader('User-Agent')) // Mozilla/5.0 ...
  },
)
```

----------------------------------------

TITLE: Call Server Function from Route Loader (TSX)
DESCRIPTION: Shows how to call a server function, `getServerTime`, from a route loader in TanStack Start. Route loaders automatically handle errors, redirects, and notFounds thrown by server functions.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { getServerTime } from './getServerTime'
export const Route = createFileRoute('/time')({
  loader: async () => {
    const time = await getServerTime()
    return {
      time,
    }
  },
})

```

----------------------------------------

TITLE: Configure Fonts in Tailwind CSS (CSS)
DESCRIPTION: Demonstrates how to import and configure fonts within the `globals.css` file for use with Tailwind CSS. It shows importing font variables and setting CSS custom properties for font families.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: css
CODE:
```
@import 'tailwindcss';

@import '@fontsource-variable/dm-sans';
@import '@fontsource-variable/jetbrains-mono';

@theme inline {
  --font-sans: 'DM Sans Variable', sans-serif;
  --font-mono: 'JetBrains Mono Variable', monospace;
  /* ... */
}

/* ... */
```

----------------------------------------

TITLE: Disable SSR (ssr: false) in TanStack Router
DESCRIPTION: This configuration disables all server-side operations for the route. Neither 'beforeLoad', 'loader', nor the component will execute on the server. All operations are deferred to the client during hydration.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/selective-ssr

LANGUAGE: tsx
CODE:
```
// src/routes/posts/$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  ssr: false,
  beforeLoad: () => {
    console.log('Executes on the client during hydration')
  },
  loader: () => {
    console.log('Executes on the client during hydration')
  },
  component: () => <div>This component is rendered on the client</div>,
})

```

LANGUAGE: tsx
CODE:
```
// src/routes/posts/$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  ssr: false,
  beforeLoad: () => {
    console.log('Executes on the client during hydration')
  },
  loader: () => {
    console.log('Executes on the client during hydration')
  },
  component: () => <div>This component is rendered on the client</div>,
})

```

----------------------------------------

TITLE: Fetch Data with TanStack Router (TSX)
DESCRIPTION: This code snippet illustrates fetching data asynchronously using TanStack Router's loader functionality. It replaces the `fetch` calls within a Next.js component with the router's `loader` and `useLoaderData` hooks for managing data fetching and access.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/migrate-from-next-js

LANGUAGE: tsx
CODE:
```
export const Route = createFileRoute('/')({
  component: Page,
  loader: async () => {
    const res = await fetch('https://api.vercel.app/blog')
    return res.json()
  },
})

function Page() {
  const posts = Route.useLoaderData()

  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Submit Form to Server Function (TSX)
DESCRIPTION: This React component shows how to create an HTML form that submits data to a server function. The form's `action` attribute is set to the `url` property of the server function, and inputs are given `name` attributes to match the expected form data.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
function Component() {
  return (
    <form action={yourFn.url} method="POST">
      <input name="name" defaultValue="John" />
      <button type="submit">Click me!</button>
    </form>
  )
}
```

LANGUAGE: tsx
CODE:
```
function Component() {
  return (
    <form action={yourFn.url} method="POST">
      <input name="name" defaultValue="John" />
      <button type="submit">Click me!</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Set Custom Response Headers in Server Function (TanStack Start)
DESCRIPTION: Explains how to add custom HTTP headers to a server function's response using the `setHeader` function from `@tanstack/react-start/server`. This allows for passing additional metadata with the response.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
import { setHeader } from '@tanstack/react-start/server'
export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    setHeader('X-Custom-Header', 'value')
    return new Date().toISOString()
  },
)
```

----------------------------------------

TITLE: Redirect with Custom Status Code
DESCRIPTION: Shows how to redirect a user and specify a custom HTTP status code for the redirect response. This example uses the `status` option within the `redirect` function to set a 301 status code, indicating a permanent redirect.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { redirect } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'
export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  // Redirect the user to the home page with a 301 status code
  throw redirect({
    to: '/',
    status: 301,
  })
})
```

----------------------------------------

TITLE: Pass Arguments to Server Function with Form Data (TSX)
DESCRIPTION: This TSX example demonstrates passing arguments to a server function using form inputs. It includes setting the `encType` to `multipart/form-data` and using an input with the `name` attribute 'age' to send data to the server function's handler.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
const yourFn = createServerFn({
  method: 'POST'
})
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const age = formData.get('age')
    if (!age) {
      throw new Error('age is required')
    }
    return age.toString()
  })
  .handler(async ({ data: formData }) => {
    // `age` will be '123'
    const age = formData.get('age')
    // ...
  })
function Component() {
  return (
    //  We need to tell the server that our data type is `multipart/form-data` by setting the `encType` attribute on the form.
    <form action={yourFn.url} method="POST" encType="multipart/form-data">
      <input name="age" defaultValue="34" />
      <button type="submit">Click me!</button>
    </form>
  )
}
```

LANGUAGE: tsx
CODE:
```
const yourFn = createServerFn({
  method: 'POST'
})
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const age = formData.get('age')
    if (!age) {
      throw new Error('age is required')
    }
    return age.toString()
  })
  .handler(async ({ data: formData }) => {
    // `age` will be '123'
    const age = formData.get('age')
    // ...
  })
function Component() {
  return (
    //  We need to tell the server that our data type is `multipart/form-data` by setting the `encType` attribute on the form.
    <form action={yourFn.url} method="POST" encType="multipart/form-data">
      <input name="age" defaultValue="34" />
      <button type="submit">Click me!</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Conditionally Render SPA Shell - TSX
DESCRIPTION: Demonstrates how to use the `isShell()` function from the router instance to conditionally render content when the application is running in SPA mode. This is useful for providing generic head tags or custom fallback components.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/spa-mode

LANGUAGE: tsx
CODE:
```
// src/routes/root.tsx
export default function Root() {
  const isShell = useRouter().isShell()
  if (isShell) console.log('Rendering the shell!')
}
```

LANGUAGE: tsx
CODE:
```
// src/routes/root.tsx
export default function Root() {
  const isShell = useRouter().isShell()
  if (isShell) console.log('Rendering the shell!')
}
```

----------------------------------------

TITLE: Add Tailwind Directives to CSS (CSS)
DESCRIPTION: Adds the necessary Tailwind CSS directives (`@tailwind base`, `@tailwind components`, `@tailwind utilities`) to the main CSS file (e.g., `src/styles/app.css`). These directives are essential for Tailwind to inject its styles into the project.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/tailwind-integration

LANGUAGE: css
CODE:
```
/* src/styles/app.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

```

----------------------------------------

TITLE: Type Safety and Runtime Validation Example
DESCRIPTION: Illustrates the importance of type safety across network boundaries for server functions. The validator's return type dictates the handler's input type, ensuring data consistency and preventing runtime errors.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
type Person = {
  name: string
}
export const greet = createServerFn({ method: 'GET' })
  .validator((person: unknown): Person => {
    if (typeof person !== 'object' || person === null) {
      throw new Error('Person must be an object')
    }
    if ('name' in person && typeof person.name !== 'string') {
      throw new Error('Person.name must be a string')
    }
    return person as Person
  })
  .handler(
    async ({
      data, // Person
    }) => {
      return `Hello, ${data.name}!`
    },
  )
function test() {
  greet({ data: { name: 'John' } }) // OK
  greet({ data: { name: 123 } }) // Error: Argument of type '{ name: number; }' is not assignable to parameter of type 'Person'.
}
```

----------------------------------------

TITLE: Configure SSR with Functional Form in TSX
DESCRIPTION: Demonstrates using a functional `ssr` property to conditionally disable or enable server-side rendering based on route parameters and search values. This allows for dynamic SSR decisions at runtime.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/selective-ssr

LANGUAGE: tsx
CODE:
```
export const Route = createFileRoute('/docs/$docType/$docId')({
  validateSearch: z.object({ details: z.boolean().optional() }),
  ssr: ({ params, search }) => {
    if (params.status === 'success' && params.value.docType === 'sheet') {
      return false
    }
    if (search.status === 'success' && search.value.details) {
      return 'data-only'
    }
  },
  beforeLoad: () => {
    console.log('Executes on the server depending on the result of ssr()')
  },
  loader: () => {
    console.log('Executes on the server depending on the result of ssr()')
  },
  component: () => <div>This component is rendered on the client</div>,
})
```

LANGUAGE: tsx
CODE:
```
export const Route = createFileRoute('/docs/$docType/$docId')({
  validateSearch: z.object({ details: z.boolean().optional() }),
  ssr: ({ params, search }) => {
    if (params.status === 'success' && params.value.docType === 'sheet') {
      return false
    }
    if (search.status === 'success' && search.value.details) {
      return 'data-only'
    }
  },
  beforeLoad: () => {
    console.log('Executes on the server depending on the result of ssr()')
  },
  loader: () => {
    console.log('Executes on the server depending on the result of ssr()')
  },
  component: () => <div>This component is rendered on the client</div>,
})
```

----------------------------------------

TITLE: Throwing Not Found Error in TanStack Router
DESCRIPTION: Demonstrates how to throw a `notFound` error from a server function within a route loader in TanStack Router. This allows for custom handling of 404 scenarios. The example shows importing `notFound` and `createServerFn`, and conditionally throwing the error.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { notFound } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'
const getStuff = createServerFn({ method: 'GET' }).handler(async () => {
  // Randomly return a not found error
  if (Math.random() < 0.5) {
    throw notFound()
  }
  // Or return some stuff
  return {
    stuff: 'stuff',
  }
})
export const Route = createFileRoute('/stuff')({
  loader: async () => {
    const stuff = await getStuff()
    return {
      stuff,
    }
  },
})
```

----------------------------------------

TITLE: Server Middleware with Untyped Context
DESCRIPTION: This example demonstrates a server-side middleware where the context object's properties, such as 'user', are not automatically typed. This highlights a common type safety issue when using global middleware without explicit referencing in server functions.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
// authMiddleware.ts
const authMiddleware = createMiddleware({ type: 'function' }).server(
  ({ next, context }) => {
    console.log(context.user) // <-- This will not be typed!
    // ...
  },
)
```

----------------------------------------

TITLE: Global Middleware Type Safety Example
DESCRIPTION: Illustrates a scenario where global middleware types are detached from server functions. To ensure correct type inference for server function contexts, the global middleware must be explicitly included in the server function's middleware array. This allows the server function to correctly access context properties like 'user'.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
// authMiddleware.ts
const authMiddleware = createMiddleware({ type: 'function' }).server(
  ({ next, context }) => {
    console.log(context.user) // <-- This will not be typed!
    // ...
  },
)

// app/global-middleware.ts
registerGlobalMiddleware({
  middleware: [authMiddleware],
})
```

LANGUAGE: tsx
CODE:
```
import { authMiddleware } from './authMiddleware'
const fn = createServerFn()
  .middleware([authMiddleware])
  .handler(async ({ context }) => {
    console.log(context.user)
    // ...
  })
```

----------------------------------------

TITLE: Enable SSR (ssr: true) in TanStack Router
DESCRIPTION: This configuration enables full server-side rendering. The 'beforeLoad' and 'loader' functions execute on the server during the initial request, and the component is rendered as HTML on the server. This behavior is the default unless explicitly configured otherwise.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/selective-ssr

LANGUAGE: tsx
CODE:
```
// src/routes/posts/$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  ssr: true,
  beforeLoad: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  loader: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  component: () => <div>This component is rendered on the server</div>,
})

```

LANGUAGE: tsx
CODE:
```
// src/routes/posts/$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  ssr: true,
  beforeLoad: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  loader: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  component: () => <div>This component is rendered on the server</div>,
})

```

----------------------------------------

TITLE: Handling Server Errors in TanStack Router
DESCRIPTION: Illustrates how to catch and handle general server errors thrown from server functions within a TanStack Router route loader. The example shows using a try-catch block to manage errors, such as `undefined.foo()`, and provides a structure for error handling logic.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  undefined.foo()
})
export const Route = createFileRoute('/stuff')({
  loader: async () => {
    try {
      await doStuff()
    } catch (error) {
      // Handle the error:
      // error === {
      //   message: "Cannot read property 'foo' of undefined",
      //   stack: "TypeError: Cannot read property 'foo' of undefined\n    at doStuff (file:///path/to/file.ts:3:3)"
    }
  },
})
```

----------------------------------------

TITLE: Define Logging Middleware in SolidJS
DESCRIPTION: Demonstrates how to create a server middleware using `createMiddleware` from `@tanstack/solid-start`. This middleware logs request data before and after the next middleware or handler is executed.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/solid-start'
const loggingMiddleware = createMiddleware({ type: 'function' }).server(
  async ({ next, data }) => {
    console.log('Request received:', data)
    const result = await next()
    console.log('Response processed:', result)
    return result
  },
)
```

----------------------------------------

TITLE: Set Custom Response Status Code in Server Function (TanStack Start)
DESCRIPTION: Demonstrates how to set a specific HTTP status code for a server function's response using the `setResponseStatus` function from `@tanstack/react-start/server`. This is useful for indicating success, failure, or other states.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
import { setResponseStatus } from '@tanstack/react-start/server'
export const getServerTime = createServerFn({ method: 'GET' }).handler(
  async () => {
    setResponseStatus(201)
    return new Date().toISOString()
  },
)
```

----------------------------------------

TITLE: Cancel Server Function with AbortSignal (TSX)
DESCRIPTION: Demonstrates how to create and use a server function that can be cancelled on the client using an AbortSignal. On the server, the AbortSignal notifies if the request closed before execution finished. This example shows setting up a timeout and handling the abort event.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
export const abortableServerFn = createServerFn().handler(
  async ({ signal }) => {
    return new Promise<string>((resolve, reject) => {
      if (signal.aborted) {
        return reject(new Error('Aborted before start'))
      }
      const timerId = setTimeout(() => {
        console.log('server function finished')
        resolve('server function result')
      }, 1000)
      const onAbort = () => {
        clearTimeout(timerId)
        console.log('server function aborted')
        reject(new Error('Aborted'))
      }
      signal.addEventListener('abort', onAbort, { once: true })
    })
  },
)
// Usage
function Test() {
  const controller = new AbortController()
  const serverFnPromise = abortableServerFn({
    signal: controller.signal,
  })
  await new Promise((resolve) => setTimeout(resolve, 500))
  controller.abort()
  try {
    const serverFnResult = await serverFnPromise
    console.log(serverFnResult) // should never get here
  } catch (error) {
    console.error(error) // "signal is aborted without reason"
  }
}

```

----------------------------------------

TITLE: Global Middleware Type Safety Example
DESCRIPTION: Illustrates a scenario where global middleware types are detached from server functions. It shows how to reference global middleware within a server function's middleware array to ensure correct type inference for context properties like 'user'.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
// app/global-middleware.ts
registerGlobalMiddleware({
  middleware: [authMiddleware],
})
```

----------------------------------------

TITLE: Respond with JSON using json helper
DESCRIPTION: Demonstrates using the `json` helper function to automatically set the Content-Type header to application/json and serialize a JSON object for the response.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
import { json } from '@tanstack/react-start'
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    return json({ message: 'Hello, World!' })
  },
})
// Visit /hello to see the response
// {"message":"Hello, World!"}
```

----------------------------------------

TITLE: TanStack Router SSR Parameter and Search Schema
DESCRIPTION: Illustrates the structure of `params` and `search` objects passed to the `ssr` function in TanStack Router. It shows how validation results are represented, with a 'success' status containing validated data or an 'error' status with failure details.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/selective-ssr

LANGUAGE: tsx
CODE:
```
params:
    | { status: 'success'; value: Expand<ResolveAllParamsFromParent<TParentRoute, TParams>> }
    | { status: 'error'; error: unknown }
search:
    | { status: 'success'; value: Expand<ResolveFullSearchSchema<TParentRoute, TSearchValidator>> }
    | { status: 'error'; error: unknown }

```

----------------------------------------

TITLE: Server Function with Typed Context via Middleware
DESCRIPTION: This code snippet shows how to resolve global middleware type safety issues in TanStack Start. By including the global middleware (e.g., `authMiddleware`) in the server function's middleware array, the server function gains correct type information for its context, allowing access to properties like `context.user`.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
import { authMiddleware } from './authMiddleware'

const fn = createServerFn()
  .middleware([authMiddleware])
  .handler(async ({ context }) => {
    console.log(context.user)
    // ...
  })
```

----------------------------------------

TITLE: Type Safety Without Validation using Identity Function
DESCRIPTION: Illustrates how to achieve type safety in server functions without explicit validation by using an identity function as the validator. This method allows for defining input and output types directly, ensuring type correctness even when validation logic is omitted.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
type Person = {
  name: string
}
export const greet = createServerFn({ method: 'GET' })
  .validator((d: Person) => d)
  .handler(async (ctx) => {
    return `Hello, ${ctx.data.name}!`
  })
greet({
  data: {
    name: 'John',
  },
})
```

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
type Person = {
  name: string
}
export const greet = createServerFn({ method: 'GET' })
  .validator((d: Person) => d)
  .handler(async (ctx) => {
    return `Hello, ${ctx.data.name}!`
  })
greet({
  data: {
    name: 'John',
  },
})
```

----------------------------------------

TITLE: Hybrid SSR (ssr: 'data-only') in TanStack Router
DESCRIPTION: This hybrid SSR option executes 'beforeLoad' and 'loader' on the server, sending the resulting context and data to the client. However, it disables server-side rendering of the component, which will be rendered on the client during hydration.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/selective-ssr

LANGUAGE: tsx
CODE:
```
// src/routes/posts/$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  ssr: 'data-only',
  beforeLoad: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  loader: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  component: () => <div>This component is rendered on the client</div>,
})

```

LANGUAGE: tsx
CODE:
```
// src/routes/posts/$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  ssr: 'data-only',
  beforeLoad: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  loader: () => {
    console.log('Executes on the server during the initial request')
    console.log('Executes on the client for subsequent navigation')
  },
  component: () => <div>This component is rendered on the client</div>,
})

```

----------------------------------------

TITLE: TanStack Router Configuration
DESCRIPTION: Configuration for TanStack Router, including favicon links, script inclusion, error component, not found component, and the root document component.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-basic

LANGUAGE: javascript
CODE:
```
import { Scripts } from '@tanstack/react-router'
import { TanStackRouterDevtools } from '@tanstack/router-devtools'

const DefaultCatchBoundary = () => <div>Error</div>
const NotFound = () => <div>Not Found</div>

function HeadContent() {
  return (
    <>
      <meta charSet="UTF-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
      <link
        rel="icon"
        type="image/png"
        sizes="32x32"
        href="/favicon-32x32.png"
      />
      <link
        rel="icon"
        type="image/png"
        sizes="16x16"
        href="/favicon-16x16.png"
      />
      <link rel="manifest" href="/site.webmanifest" color="#fffff" />
      <link rel="icon" href="/favicon.ico" />
    </>
  )
}

const router = createRouter({
  routeTree: routeTree,
  defaultNotFoundComponent: NotFound,
  defaultErrorComponent: DefaultCatchBoundary,
  defaultRootComponent: RootDocument,
  defaultPreload: 'intent',
  defaultComponent: DefaultComponent,
})

function RootDocument({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="p-2 flex gap-2 text-lg">
          <Link
            to="/"
            activeProps={{ className: 'font-bold' }}
            activeOptions={{ exact: true }}
          >
            Home
          </Link>{' '}
          <Link
            to="/posts"
            activeProps={{ className: 'font-bold' }}
          >
            Posts
          </Link>{' '}
          <Link
            to="/users"
            activeProps={{ className: 'font-bold' }}
          >
            Users
          </Link>{' '}
          <Link
            to="/route-a"
            activeProps={{ className: 'font-bold' }}
          >
            Pathless Layout
          </Link>{' '}
          <Link
            to="/deferred"
            activeProps={{ className: 'font-bold' }}
          >
            Deferred
          </Link>{' '}
          <Link
            // @ts-expect-error
            to="/this-route-does-not-exist"
            activeProps={{ className: 'font-bold' }}
          >
            This Route Does Not Exist
          </Link>
        </div>
        <hr />
        {children}
        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Configure Route SSR with Functional Form
DESCRIPTION: Demonstrates using a functional form for the `ssr` property in TanStack Router to conditionally enable or disable server-side rendering based on route parameters and search criteria. This allows for runtime decisions on whether to SSR a route.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/selective-ssr

LANGUAGE: tsx
CODE:
```
import { createFileRoute } from '@tanstack/react-router';
import { z } from 'zod';

export const Route = createFileRoute('/docs/$docType/$docId')({
  validateSearch: z.object({ details: z.boolean().optional() }),
  ssr: ({ params, search }) => {
    if (params.status === 'success' && params.value.docType === 'sheet') {
      return false;
    }
    if (search.status === 'success' && search.value.details) {
      return 'data-only';
    }
  },
  beforeLoad: () => {
    console.log('Executes on the server depending on the result of ssr()');
  },
  loader: () => {
    console.log('Executes on the server depending on the result of ssr()');
  },
  component: () => <div>This component is rendered on the client</div>,
});

```

----------------------------------------

TITLE: Set headers using Response constructor
DESCRIPTION: Demonstrates setting response headers by passing an object as the second argument to the `Response` constructor, specifying the 'Content-Type'.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    return new Response('Hello, World!', {
      headers: {
        'Content-Type': 'text/plain',
      },
    })
  },
})
// Visit /hello to see the response
// Hello, World!
```

----------------------------------------

TITLE: SSR Parameter and Search Schema Types in TSX
DESCRIPTION: Defines the discriminated union types for `params` and `search` objects passed to the SSR function. These types indicate whether validation succeeded or failed, providing either validated data or error details.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/selective-ssr

LANGUAGE: tsx
CODE:
```
params:
    | { status: 'success'; value: Expand<ResolveAllParamsFromParent<TParentRoute, TParams>> }
    | { status: 'error'; error: unknown }
search:
    | { status: 'success'; value: Expand<ResolveFullSearchSchema<TParentRoute, TSearchValidator>> }
    | { status: 'error'; error: unknown }
```

LANGUAGE: tsx
CODE:
```
params:
    | { status: 'success'; value: Expand<ResolveAllParamsFromParent<TParentRoute, TParams>> }
    | { status: 'error'; error: unknown }
search:
    | { status: 'success'; value: Expand<ResolveFullSearchSchema<TParentRoute, TSearchValidator>> }
    | { status: 'error'; error: unknown }
```

----------------------------------------

TITLE: Disable SSR by Default in TanStack Router
DESCRIPTION: This code snippet demonstrates how to configure the TanStack Router in SolidJS to disable Server-Side Rendering (SSR) by default. It sets the `defaultSsr` option to `false` within the `createRouter` function, affecting all routes unless explicitly overridden.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/selective-ssr

LANGUAGE: tsx
CODE:
```
// src/router.tsx
import { createRouter as createTanStackRouter } from '@tanstack/solid-router'
import { routeTree } from './routeTree.gen'
export function createRouter() {
  const router = createTanStackRouter({
    routeTree,
    scrollRestoration: true,
    defaultPendingComponent: () => <div>Loading...</div>,
    // Disable SSR by default
    defaultSsr: false,
  })
  return router
}
```

----------------------------------------

TITLE: TanStack Router: Disable SSR by Default (React/TSX)
DESCRIPTION: Demonstrates how to configure the TanStack Router to disable Server-Side Rendering (SSR) by default using the `defaultSsr: false` option within `createRouter`. This is useful for projects where SSR is not desired for most routes or requires browser-only APIs.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/selective-ssr

LANGUAGE: tsx
CODE:
```
import { createRouter as createTanStackRouter } from '@tanstack/react-router'
import { routeTree } from './routeTree.gen'

export function createRouter() {
  const router = createTanStackRouter({
    routeTree,
    scrollRestoration: true,
    defaultPendingComponent: () => <div>Loading...</div>,
    // Disable SSR by default
    defaultSsr: false,
  })

  return router
}
```

----------------------------------------

TITLE: TanStack Router Root Route with React Query
DESCRIPTION: Sets up the root route for a TanStack Router application, integrating React Query Devtools and defining head content for SEO. It includes navigation links to different sections of the application.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-basic-react-query

LANGUAGE: tsx
CODE:
```
/// <reference types="vite/client" />
import {
  HeadContent,
  Link,
  Outlet,
  Scripts,
  createRootRouteWithContext,
} from '@tanstack/react-router'
import { ReactQueryDevtools } from '@tanstack/react-query-devtools'
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'
import * as React from 'react'
import type { QueryClient } from '@tanstack/react-query'
import { DefaultCatchBoundary } from '~/components/DefaultCatchBoundary'
import { NotFound } from '~/components/NotFound'
import appCss from '~/styles/app.css?url'
import { seo } from '~/utils/seo'

export const Route = createRootRouteWithContext<{
  queryClient: QueryClient
}>()({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      ...seo({
        title:
          'TanStack Start | Type-Safe, Client-First, Full-Stack React Framework',
        description: `TanStack Start is a type-safe, client-first, full-stack React framework. `,
      }),
    ],
    links: [
      { rel: 'stylesheet', href: appCss },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        href: '/apple-touch-icon.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '32x32',
        href: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '16x16',
        href: '/favicon-16x16.png',
      },
      { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
      { rel: 'icon', href: '/favicon.ico' },
    ],
  }),
  errorComponent: (props) => {
    return (
      <RootDocument>
        <DefaultCatchBoundary {...props} />
      </RootDocument>
    )
  },
  notFoundComponent: () => <NotFound />,
  component: RootComponent,
})

function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}

function RootDocument({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="p-2 flex gap-2 text-lg">
          <Link
            to="/"
            activeProps={{
              className: 'font-bold',
            }}
            activeOptions={{ exact: true }}
          >
            Home
          </Link>{' '}
          <Link
            to="/posts"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Posts
          </Link>{' '}
          <Link
            to="/users"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Users
          </Link>{' '}
          <Link
            to="/route-a"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Pathless Layout
          </Link>{' '}
          <Link
            to="/deferred"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Deferred
          </Link>{' '}
          <Link
            // @ts-expect-error
            to="/this-route-does-not-exist"
            activeProps={{
              className: 'font-bold',
            }}
          >
            This Route Does Not Exist
          </Link>
        </div>
        <hr />
        {children}
        <TanStackRouterDevtools position="bottom-right" />
        <ReactQueryDevtools buttonPosition="bottom-left" />
        <Scripts />
      </body>
    </html>
  )
}

```

----------------------------------------

TITLE: TanStack Router Root Configuration
DESCRIPTION: Sets up the root route for the TanStack Router application. It defines metadata, error handling, not found components, and the main application component. It also includes context for the QueryClient.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-convex-trellaux

LANGUAGE: typescript
CODE:
```
/// <reference types="vite/client" />
import { ReactQueryDevtools } from '@tanstack/react-query-devtools/production'
import {
  Link,
  Outlet,
  createRootRouteWithContext,
  useRouterState,
  HeadContent,
  Scripts,
} from '@tanstack/react-router'
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'
import * as React from 'react'
import { Toaster } from 'react-hot-toast'
import type { QueryClient } from '@tanstack/react-query'
import { DefaultCatchBoundary } from '~/components/DefaultCatchBoundary'
import { IconLink } from '~/components/IconLink'
import { NotFound } from '~/components/NotFound'
import appCss from '~/styles/app.css?url'
import { seo } from '~/utils/seo'
import { Loader } from '~/components/Loader'
export const Route = createRootRouteWithContext<{ queryClient: QueryClient }>()({
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      ...seo({
        title:
          'TanStack Start | Type-Safe, Client-First, Full-Stack React Framework',
        description: `TanStack Start is a type-safe, client-first, full-stack React framework. `,
      }),
    ],
    links: [
      { rel: 'stylesheet', href: appCss },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        href: '/apple-touch-icon.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '32x32',
        href: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '16x16',
        href: '/favicon-16x16.png',
      },
      { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
      { rel: 'icon', href: '/favicon.ico' },
    ],
  }),
  errorComponent: (props) => {
    return (
      <RootDocument>
        <DefaultCatchBoundary {...props} />
      </RootDocument>
    )
  },
  notFoundComponent: () => <NotFound />,
  component: RootComponent,
})
function RootComponent() {
  return (
    <RootDocument>
      <Outlet />
    </RootDocument>
  )
}
function RootDocument({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="h-screen flex flex-col min-h-0">
          <div className="bg-slate-900 border-b border-slate-800 flex items-center justify-between py-4 px-8 box-border">
            <div className="flex items-center gap-4">
              <div>
                <Link to="/" className="block leading-tight">
                  <div className="font-black text-2xl text-white">Trellaux</div>
                  <div className="text-slate-500">a TanStack Demo</div>
                </Link>
              </div>
              <LoadingIndicator />
            </div>
            <div className="flex items-center gap-6">
              <IconLink
                href="https://github.com/TanStack/router/tree/main/examples/react/start-trellaux"
                label="Source"
                icon="/github-mark-white.png"
              />
              <IconLink
                href="https://tanstack.com"
                icon="/tanstack.png"
                label="TanStack"
              />
            </div>
          </div>
          <div className="flex-grow min-h-0 h-full flex flex-col">
            {children}
            <Toaster />
          </div>
        </div>
        <ReactQueryDevtools />
        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Register Global and Server Middleware - TSX
DESCRIPTION: This code snippet demonstrates how to create and register global middleware, and then define a chain of server middleware (a, b, c, d) that execute in a specific order, culminating in a server function (fn). It utilizes the `createMiddleware` and `createServerFn` utilities.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
const globalMiddleware1 = createMiddleware({ type: 'function' }).server(
  async ({ next }) => {
    console.log('globalMiddleware1')
    return next()
  },
)

const globalMiddleware2 = createMiddleware({ type: 'function' }).server(
  async ({ next }) => {
    console.log('globalMiddleware2')
    return next()
  },
)

registerGlobalMiddleware({
  middleware: [globalMiddleware1, globalMiddleware2],
})

const a = createMiddleware({ type: 'function' }).server(async ({ next }) => {
  console.log('a')
  return next()
})

const b = createMiddleware({ type: 'function' })
  .middleware([a])
  .server(async ({ next }) => {
    console.log('b')
    return next()
  })

const c = createMiddleware({ type: 'function' })
  .middleware()
  .server(async ({ next }) => {
    console.log('c')
    return next()
  })

const d = createMiddleware({ type: 'function' })
  .middleware([b, c])
  .server(async () => {
    console.log('d')
  })

const fn = createServerFn()
  .middleware([d])
  .server(async () => {
    console.log('fn')
  })
```

----------------------------------------

TITLE: Server Function Compilation Process
DESCRIPTION: Details the steps involved in compiling server functions, including checking for 'use server' directives, extracting functions to server bundles, and replacing client-side functions with proxies.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: javascript
CODE:
```
function example() {
  // Server function logic
}
```

----------------------------------------

TITLE: React TanStack Router with Clerk Authentication
DESCRIPTION: This code sets up the root route for a React application using TanStack Router and Clerk for authentication. It defines the layout, handles authentication state, and includes navigation links and user controls. Dependencies include `@tanstack/react-router`, `@clerk/tanstack-react-start`, and Vite client types.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-clerk-basic

LANGUAGE: tsx
CODE:
```
/// <reference types="vite/client" />
import {
  HeadContent,
  Link,
  Outlet,
  Scripts,
  createRootRoute,
} from '@tanstack/react-router'
import {
  ClerkProvider,
  SignInButton,
  SignedIn,
  SignedOut,
  UserButton,
} from '@clerk/tanstack-react-start'
import { TanStackRouterDevtools } from '@tanstack/react-router-devtools'
import { createServerFn } from '@tanstack/react-start'
import * as React from 'react'
import { getAuth } from '@clerk/tanstack-react-start/server'
import { getWebRequest } from '@tanstack/react-start/server'
import { DefaultCatchBoundary } from '~/components/DefaultCatchBoundary.js'
import { NotFound } from '~/components/NotFound.js'
import appCss from '~/styles/app.css?url'
const fetchClerkAuth = createServerFn({ method: 'GET' }).handler(async () => {
  const { userId } = await getAuth(getWebRequest()!)
  return {
    userId,
  }
})
export const Route = createRootRoute({
  beforeLoad: async () => {
    const { userId } = await fetchClerkAuth()
    return {
      userId,
    }
  },
  head: () => ({
    meta: [
      {
        charSet: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
    ],
    links: [
      { rel: 'stylesheet', href: appCss },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        href: '/apple-touch-icon.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '32x32',
        href: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '16x16',
        href: '/favicon-16x16.png',
      },
      { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
      { rel: 'icon', href: '/favicon.ico' },
    ],
  }),
  errorComponent: (props) => {
    return (
      <RootDocument>
        <DefaultCatchBoundary {...props} />
      </RootDocument>
    )
  },
  notFoundComponent: () => <NotFound />,
  component: RootComponent,
})
function RootComponent() {
  return (
    <ClerkProvider>
      <RootDocument>
        <Outlet />
      </RootDocument>
    </ClerkProvider>
  )
}
function RootDocument({ children }: { children: React.ReactNode }) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        <div className="p-2 flex gap-2 text-lg">
          <Link
            to="/"
            activeProps={{
              className: 'font-bold',
            }}
            activeOptions={{ exact: true }}
          >
            Home
          </Link>{' '}
          <Link
            to="/posts"
            activeProps={{
              className: 'font-bold',
            }}
          >
            Posts
          </Link>
          <div className="ml-auto">
            <SignedIn>
              <UserButton />
            </SignedIn>
            <SignedOut>
              <SignInButton mode="modal" />
            </SignedOut>
          </div>
        </div>
        <hr />
        {children}
        <TanStackRouterDevtools position="bottom-right" />
        <Scripts />
      </body>
    </html>
  )
}

```

----------------------------------------

TITLE: Solid.js Root Route Configuration
DESCRIPTION: Configures the root route for a Solid.js application using TanStack Router. It sets up metadata, links, error handling, and a shell component for the application layout. Includes navigation links to different sections of the application and TanStack Router devtools.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/examples/start-basic

LANGUAGE: tsx
CODE:
```
/// <reference types="vite/client" />
import {
  HeadContent,
  Link,
  Scripts,
  createRootRoute,
} from '@tanstack/solid-router'
import { TanStackRouterDevtools } from '@tanstack/solid-router-devtools'
import type * as Solid from 'solid-js'
import { DefaultCatchBoundary } from '~/components/DefaultCatchBoundary'
import { NotFound } from '~/components/NotFound'
import appCss from '~/styles/app.css?url'
import { seo } from '~/utils/seo'
export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charset: 'utf-8',
      },
      {
        name: 'viewport',
        content: 'width=device-width, initial-scale=1',
      },
      ...seo({
        title:
          'TanStack Start | Type-Safe, Client-First, Full-Stack React Framework',
        description: `TanStack Start is a type-safe, client-first, full-stack React framework. `,
      }),
    ],
    links: [
      { rel: 'stylesheet', href: appCss },
      {
        rel: 'apple-touch-icon',
        sizes: '180x180',
        href: '/apple-touch-icon.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '32x32',
        href: '/favicon-32x32.png',
      },
      {
        rel: 'icon',
        type: 'image/png',
        sizes: '16x16',
        href: '/favicon-16x16.png',
      },
      { rel: 'manifest', href: '/site.webmanifest', color: '#fffff' },
      { rel: 'icon', href: '/favicon.ico' },
    ],
  }),
  errorComponent: DefaultCatchBoundary,
  notFoundComponent: () => <NotFound />,
  shellComponent: RootDocument,
})
function RootDocument({ children }: { children: Solid.JSX.Element }) {
  return (
    <>
      <HeadContent />
      <div class="p-2 flex gap-2 text-lg">
        <Link
          to="/"
          activeProps={{
            class: 'font-bold',
          }}
          activeOptions={{ exact: true }}
        >
          Home
        </Link>{' '}
        <Link
          to="/posts"
          activeProps={{
            class: 'font-bold',
          }}
        >
          Posts
        </Link>{' '}
        <Link
          to="/users"
          activeProps={{
            class: 'font-bold',
          }}
        >
          Users
        </Link>{' '}
        <Link
          to="/route-a"
          activeProps={{
            class: 'font-bold',
          }}
        >
          Pathless Layout
        </Link>{' '}
        <Link
          to="/deferred"
          activeProps={{
            class: 'font-bold',
          }}
        >
          Deferred
        </Link>{' '}
        <Link
          // @ts-expect-error
          to="/this-route-does-not-exist"
          activeProps={{
            class: 'font-bold',
          }}
        >
          This Route Does Not Exist
        </Link>
      </div>
      <hr />
      {children}
      <TanStackRouterDevtools position="bottom-right" />
      <Scripts />
    </>
  )
}

```

----------------------------------------

TITLE: Use Middleware with Server Functions in SolidJS
DESCRIPTION: Shows how to integrate a defined middleware, such as `loggingMiddleware`, into a server function created with `createServerFn` from `@tanstack/solid-start`. This allows for custom request processing chains.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/solid-start'
import { loggingMiddleware } from './middleware'
const fn = createServerFn()
  .middleware([loggingMiddleware])
  .handler(async () => {
    // ...
  })
```

----------------------------------------

TITLE: Add Middleware to Chain
DESCRIPTION: Shows how to add middleware to an existing chain using the `.middleware()` method. This method accepts an array of middleware objects and is executed before the current middleware.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/react-start'

const loggingMiddleware = createMiddleware({ type: 'function' }).middleware([
  authMiddleware,
  loggingMiddleware,
])
```

----------------------------------------

TITLE: Define Logging Middleware for Server Functions
DESCRIPTION: Demonstrates how to create a server function middleware using `createMiddleware` from `@tanstack/react-start`. This middleware logs incoming request data and the processed response, allowing for custom server-side logic and observability.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/react-start'

const loggingMiddleware = createMiddleware({ type: 'function' }).server(
  async ({ next, data }) => {
    console.log('Request received:', data)
    const result = await next()
    console.log('Response processed:', result)
    return result
  },
)
```

----------------------------------------

TITLE: Send Server Context to Client
DESCRIPTION: Shows how to send server-side context, like the current time, to the client. This is achieved by calling `next({ sendContext: ... })` in the server middleware, making the data available in the client's context after awaiting the `next()` call.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
const serverTimer = createMiddleware({ type: 'function' }).server(
  async ({ next }) => {
    return next({
      sendContext: {
        // Send the current time to the client
        timeFromServer: new Date(),
      },
    })
  },
)
const requestLogger = createMiddleware({ type: 'function' })
  .middleware([serverTimer])
  .client(async ({ next }) => {
    const result = await next()
    // Woah! We have the time from the server!
    console.log('Time from the server:', result.context.timeFromServer)
    return result
  })
```

----------------------------------------

TITLE: Root Document Component for HTML Structure
DESCRIPTION: This component defines the fundamental HTML document structure for a React application. It includes the `<html>`, `<head>`, and `<body>` tags, incorporating essential elements like `HeadContent` and `Scripts` for rendering the application.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-workos

LANGUAGE: tsx
CODE:
```
function RootDocument({ children }: Readonly<{ children: ReactNode }>) {
  return (
    <html>
      <head>
        <HeadContent />
      </head>
      <body>
        {children}
        <Scripts />
      </body>
    </html>
  );
}
```

----------------------------------------

TITLE: TanStackStart: Create Static Server Function
DESCRIPTION: Demonstrates how to create a static server function in TanStackStart by setting the 'type' option to 'static' in createServerFn. This function will be executed at build time and cached as a static asset.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/static-server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start/server'

const myServerFn = createServerFn({
  type: 'static'
}).handler(async () => {
  return 'Hello, world!'
})
```

----------------------------------------

TITLE: TanStack Server Functions vs. React Server Functions
DESCRIPTION: Compares TanStack Server Functions with React Server Functions, highlighting TanStack's framework-agnostic nature and its use of standard HTTP requests for invocation, avoiding serial-execution bottlenecks.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: react
CODE:
```
/*
TanStack Server Functions are not tied to a specific front-end framework, and can be used with any front-end framework or none at all.
TanStack Server Functions are backed by standard HTTP requests and can be called as often as you like without suffering from serial-execution bottlenecks.
*/
```

----------------------------------------

TITLE: Respond with status code using Response constructor
DESCRIPTION: Shows how to set a custom HTTP status code by passing it as a property in the second argument to the `Response` constructor when a user is not found.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
import { json } from '@tanstack/react-start'
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request, params }) => {
    const user = await findUser(params.id)
    if (!user) {
      return new Response('User not found', {
        status: 404,
      })
    }
    return json(user)
  },
})
```

----------------------------------------

TITLE: Define a Basic Server Function
DESCRIPTION: Demonstrates how to define a simple server function using `createServerFn` that returns the current time after a one-second delay. This function is intended to be executed on the server.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
export const getServerTime = createServerFn().handler(async () => {
  // Wait for 1 second
  await new Promise((resolve) => setTimeout(resolve, 1000))
  // Return the current time
  return new Date().toISOString()
})
```

----------------------------------------

TITLE: Respond with status code using setResponseStatus helper
DESCRIPTION: Illustrates setting the HTTP status code using the `setResponseStatus` helper function from `@tanstack/react-start/server` when a user is not found.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
import { json } from '@tanstack/react-start'
import { setResponseStatus } from '@tanstack/react-start/server'
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request, params }) => {
    const user = await findUser(params.id)
    if (!user) {
      setResponseStatus(404)
      return new Response('User not found')
    }
    return json(user)
  },
})
```

----------------------------------------

TITLE: Set headers using setHeaders helper
DESCRIPTION: Shows how to set response headers using the `setHeaders` helper function from `@tanstack/react-start/server`, specifying the 'Content-Type'.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: typescript
CODE:
```
// routes/hello.ts
import { setHeaders } from '@tanstack/react-start/server'
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ request }) => {
    setHeaders({
      'Content-Type': 'text/plain',
    })
    return new Response('Hello, World!')
  },
})
```

----------------------------------------

TITLE: Securely Send Client Context with Validation
DESCRIPTION: Illustrates how to send client context to the server and then validate it on the server-side using Zod and a validator. This is crucial for security when handling dynamic or user-generated data.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
import { zodValidator } from '@tanstack/zod-adapter'
import { z } from 'zod'
const requestLogger = createMiddleware({ type: 'function' })
  .client(async ({ next, context }) => {
    return next({
      sendContext: {
        workspaceId: context.workspaceId,
      },
    })
  })
  .server(async ({ next, data, context }) => {
    // Validate the workspace ID before using it
    const workspaceId = zodValidator(z.number()).parse(context.workspaceId)
    console.log('Workspace ID:', workspaceId)
    return next()
  })
```

----------------------------------------

TITLE: Client Method Middleware Logic (TSX)
DESCRIPTION: Defines client-side middleware logic using the `client` method. This logic executes before and after nested middleware and the client-side RPC function, sharing a similar API to server middleware.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
const loggingMiddleware = createMiddleware({ type: 'function' }).client(
  async ({ next }) => {
    console.log('Request sent')
    const result = await next()
    console.log('Response received')
    return result
  },
)
```

LANGUAGE: tsx
CODE:
```
const loggingMiddleware = createMiddleware({ type: 'function' }).client(
  async ({ next }) => {
    console.log('Request sent')
    const result = await next()
    console.log('Response received')
    return result
  },
)
```

----------------------------------------

TITLE: Send Client Context to Server
DESCRIPTION: Demonstrates how to send client-side context data, such as a workspace ID, to the server using the `sendContext` property in the `next` function. This data becomes available in the server middleware's context.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
const requestLogger = createMiddleware({ type: 'function' })
  .client(async ({ next, context }) => {
    return next({
      sendContext: {
        // Send the workspace ID to the server
        workspaceId: context.workspaceId,
      },
    })
  })
  .server(async ({ next, data, context }) => {
    // Woah! We have the workspace ID from the client!
    console.log('Workspace ID:', context.workspaceId)
    return next()
  })
```

----------------------------------------

TITLE: Define POST Server Route and App Component in TSX
DESCRIPTION: This snippet demonstrates how to define a server route that handles POST requests and an associated client-side component in a single TSX file. The server route processes JSON data from the request body and returns a personalized greeting. The client component includes a button to trigger the POST request and display the server's response.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: tsx
CODE:
```
// routes/hello.tsx
export const ServerRoute = createServerFileRoute().methods({
  POST: async ({ request }) => {
    const body = await request.json()
    return new Response(JSON.stringify({ message: `Hello, ${body.name}!` }))
  },
})
export const Route = createFileRoute('/hello')({
  component: HelloComponent,
})
function HelloComponent() {
  const [reply, setReply] = useState('')
  return (
    <div>
      <button
        onClick={() => {
          fetch('/hello', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name: 'Tanner' }),
          })
            .then((res) => res.json())
            .then((data) => setReply(data.message))
        }}
      >
        Say Hello
      </button>
    </div>
  )
}
```

----------------------------------------

TITLE: TanStackStart Custom Static Server Cache
DESCRIPTION: Shows how to customize the static server function cache in TanStackStart. It involves creating a custom cache implementation with `createServerFnStaticCache` and setting it globally using `setServerFnStaticCache`.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/static-server-functions

LANGUAGE: tsx
CODE:
```
import {
  createServerFnStaticCache,
  setServerFnStaticCache,
} from '@tanstack/solid-start/client'

const myCustomStaticCache = createServerFnStaticCache({
  setItem: async (ctx, data) => {
    // Store the static data in your custom cache
  },
  getItem: async (ctx) => {
    // Retrieve the static data from your custom cache
  },
  fetchItem: async (ctx) => {
    // During runtime, fetch the static data from your custom cache
  },
})

setServerFnStaticCache(myCustomStaticCache)
```

LANGUAGE: tsx
CODE:
```
import {
  createServerFnStaticCache,
  setServerFnStaticCache,
} from '@tanstack/solid-start/client'

const myCustomStaticCache = createServerFnStaticCache({
  setItem: async (ctx, data) => {
    // Store the static data in your custom cache
  },
  getItem: async (ctx) => {
    // Retrieve the static data from your custom cache
  },
  fetchItem: async (ctx) => {
    // During runtime, fetch the static data from your custom cache
  },
})

setServerFnStaticCache(myCustomStaticCache)
```

----------------------------------------

TITLE: TanStackStart: Customize Static Server Function Cache
DESCRIPTION: Shows how to customize the static server function cache in TanStackStart by implementing a custom cache using createServerFnStaticCache and setting it with setServerFnStaticCache. This allows for custom storage and retrieval of static data.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/static-server-functions

LANGUAGE: tsx
CODE:
```
import {
  createServerFnStaticCache,
  setServerFnStaticCache,
} from '@tanstack/react-start/client'

const myCustomStaticCache = createServerFnStaticCache({
  setItem: async (ctx, data) => {
    // Store the static data in your custom cache
  },
  getItem: async (ctx) => {
    // Retrieve the static data from your custom cache
  },
  fetchItem: async (ctx) => {
    // During runtime, fetch the static data from your custom cache
  },
})

setServerFnStaticCache(myCustomStaticCache)
```

----------------------------------------

TITLE: Redirect to External URL
DESCRIPTION: Illustrates how to redirect a user to an external website or URL. This is done by providing the `href` option to the `redirect` function, specifying the full URL of the external target.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { redirect } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'
export const auth = createServerFn({ method: 'GET' }).handler(async () => {
  // Redirect the user to the auth provider
  throw redirect({
    href: 'https://authprovider.com/login',
  })
})
```

----------------------------------------

TITLE: React Loading Indicator Component
DESCRIPTION: A React component that displays a loading indicator based on the router's loading state. It uses conditional styling to show or hide the loader with a smooth transition.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-trellaux

LANGUAGE: typescript
CODE:
```
function LoadingIndicator() {
  const isLoading = useRouterState({ select: (s) => s.isLoading })
  return (
    <div
      className={`h-12 transition-all duration-300 ${isLoading ? `opacity-100 delay-300` : `opacity-0 delay-0`}`}
    >
      <Loader />
    </div>
  )
}
```

----------------------------------------

TITLE: Define and Use No-JS Server Function (TypeScript)
DESCRIPTION: This snippet demonstrates how to define a server function using `createServerFn` in TypeScript. It includes a validator to check form data and a handler to process it. The `yourFn.url` is then used in an HTML form's `action` attribute for submission.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: typescript
CODE:
```
const yourFn = createServerFn({
  method: 'POST'
})
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const name = formData.get('name')
    if (!name) {
      throw new Error('Name is required')
    }
    return name
  })
  .handler(async ({ data: name }) => {
    console.log(name) // 'John'
  })
console.info(yourFn.url)
```

LANGUAGE: typescript
CODE:
```
const yourFn = createServerFn({
  method: 'POST'
})
  .validator((formData) => {
    if (!(formData instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    const name = formData.get('name')
    if (!name) {
      throw new Error('Name is required')
    }
    return name
  })
  .handler(async ({ data: name }) => {
    console.log(name) // 'John'
  })
console.info(yourFn.url)
```

----------------------------------------

TITLE: Submit Server Function via HTML Form (TSX)
DESCRIPTION: This TSX code shows how to create an HTML form that submits data to a server function. The form's `action` attribute is set to `yourFn.url`, and an input field named 'name' is included to pass data to the server.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
function Component() {
  return (
    <form action={yourFn.url} method="POST">
      <input name="name" defaultValue="John" />
      <button type="submit">Click me!</button>
    </form>
  )
}
```

LANGUAGE: tsx
CODE:
```
function Component() {
  return (
    <form action={yourFn.url} method="POST">
      <input name="name" defaultValue="John" />
      <button type="submit">Click me!</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Call Server Function from Hooks/Components with useServerFn (TSX)
DESCRIPTION: Demonstrates using the `useServerFn` hook from `@tanstack/react-start` to call server functions within React components or hooks. This hook simplifies handling potential redirects or notFounds thrown by server functions.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { useServerFn } from '@tanstack/react-start'
import { useQuery } from '@tanstack/react-query'
import { getServerTime } from './getServerTime'
export function Time() {
  const getTime = useServerFn(getServerTime)
  const timeQuery = useQuery({
    queryKey: 'time',
    queryFn: () => getTime(),
  })
}

```

----------------------------------------

TITLE: Send Client Context to Server
DESCRIPTION: Demonstrates how to send client-side context data, such as a workspace ID, to the server using the `sendContext` property in the `next` function. This data is then available in the server middleware's context.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
const requestLogger = createMiddleware({ type: 'function' })
  .client(async ({ next, context }) => {
    return next({
      sendContext: {
        // Send the workspace ID to the server
        workspaceId: context.workspaceId,
      },
    })
  })
  .server(async ({ next, data, context }) => {
    // Woah! We have the workspace ID from the client!
    console.log('Workspace ID:', context.workspaceId)
    return next()
  })

```

----------------------------------------

TITLE: TanStack Router: Wildcard/Splat Path Parameter
DESCRIPTION: Illustrates how to create a server route that captures a wildcard or 'splat' parameter at the end of a path. The route from 'routes/file/$.ts' uses '$' to denote the wildcard, capturing any subsequent path segments into the '_splat' parameter.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-routes

LANGUAGE: typescript
CODE:
```
// routes/file/$.ts
export const ServerRoute = createServerFileRoute().methods({
  GET: async ({ params }) => {
    const { _splat } = params
    return new Response(`File: ${_splat}`)
  },
})
// Visit /file/hello.txt to see the response
// File: hello.txt

```

----------------------------------------

TITLE: Client-Side Payload Validation (TSX)
DESCRIPTION: Shows how to enable client-side validation by setting `validateClient: true` in `createMiddleware`. This validates data on the client before sending it to the server, using the same schema as the server-side validation.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/react-start'
import { zodValidator } from '@tanstack/zod-adapter'
import { z } from 'zod'

const workspaceMiddleware = createMiddleware({ validateClient: true })
  .validator(zodValidator(mySchema))
  .server(({ next, data }) => {
    console.log('Workspace ID:', data.workspaceId)
    return next()
  })
```

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/react-start'
import { zodValidator } from '@tanstack/zod-adapter'
import { z } from 'zod'

const workspaceMiddleware = createMiddleware({ validateClient: true })
  .validator(zodValidator(mySchema))
  .server(({ next, data }) => {
    console.log('Workspace ID:', data.workspaceId)
    return next()
  })
```

----------------------------------------

TITLE: Provide Context to Next Middleware (TSX)
DESCRIPTION: Demonstrates how to pass context to the next middleware function. The `context` property in the `next` function call merges with the parent context, making properties available to subsequent middleware.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/react-start'

const awesomeMiddleware = createMiddleware({ type: 'function' }).server(
  ({ next }) => {
    return next({
      context: {
        isAwesome: Math.random() > 0.5,
      },
    })
  },
)

const loggingMiddleware = createMiddleware({ type: 'function' })
  .middleware([awesomeMiddleware])
  .server(async ({ next, context }) => {
    console.log('Is awesome?', context.isAwesome)
    return next()
  })
```

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/react-start'

const awesomeMiddleware = createMiddleware({ type: 'function' }).server(
  ({ next }) => {
    return next({
      context: {
        isAwesome: Math.random() > 0.5,
      },
    })
  },
)

const loggingMiddleware = createMiddleware({ type: 'function' })
  .middleware([awesomeMiddleware])
  .server(async ({ next, context }) => {
    console.log('Is awesome?', context.isAwesome)
    return next()
  })
```

----------------------------------------

TITLE: Conditional Opacity and Delay in React
DESCRIPTION: This snippet demonstrates conditional styling in React using ternary operators to control opacity and delay based on a loading state. It's typically used for UI transitions.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-trellaux

LANGUAGE: jsx
CODE:
```
isLoading ? `opacity-100 delay-300` : `opacity-0 delay-0`
```

----------------------------------------

TITLE: Server Function with Zod Validation
DESCRIPTION: Demonstrates creating a server function that uses Zod for input validation and transformation. The validator infers the input type, and the handler infers the output type. It shows how to parse a string amount into an integer.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
import { z } from 'zod'
const transactionSchema = z.object({
  amount: z.string().transform((val) => parseInt(val, 10)),
})
const createTransaction = createServerFn()
  .validator(transactionSchema)
  .handler(({ data }) => {
    return data.amount // Returns a number
  })
createTransaction({
  data: {
    amount: '123', // Accepts a string
  },
})
```

----------------------------------------

TITLE: Basic Server Function Validation
DESCRIPTION: Demonstrates a basic server function with runtime input validation. It checks if the input is an object and if the 'name' property is a string, returning a typed 'Person' object.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
type Person = {
  name: string
}
export const greet = createServerFn({ method: 'GET' })
  .validator((person: unknown): Person => {
    if (typeof person !== 'object' || person === null) {
      throw new Error('Person must be an object')
    }
    if ('name' in person && typeof person.name !== 'string') {
      throw new Error('Person.name must be a string')
    }
    return person as Person
  })
  .handler(async ({ data }) => {
    return `Hello, ${data.name}!`
  })
```

----------------------------------------

TITLE: Add Authorization Header to Client Request
DESCRIPTION: This middleware modifies the client request by adding an 'Authorization' header. It uses a hypothetical 'getToken' function from an authentication library to retrieve the token. This is useful for securing API requests made from the client.

SOURCE: https://tanstack.com/start/latest/docs/framework/solid/middleware

LANGUAGE: tsx
CODE:
```
import { getToken } from 'my-auth-library'
const authMiddleware = createMiddleware({ type: 'function' }).client(
  async ({ next }) => {
    return next({
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    })
  },
)
```

----------------------------------------

TITLE: Redirect with Custom Headers
DESCRIPTION: Explains how to include custom HTTP headers with a redirect response. The `headers` option in the `redirect` function allows you to pass an object containing key-value pairs for custom headers, such as 'X-Custom-Header'.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { redirect } from '@tanstack/react-router'
import { createServerFn } from '@tanstack/react-start'
export const doStuff = createServerFn({ method: 'GET' }).handler(async () => {
  // Redirect the user to the home page with a custom header
  throw redirect({
    to: '/',
    headers: {
      'X-Custom-Header': 'value',
    },
  })
})
```

----------------------------------------

TITLE: Server Function Response Option
DESCRIPTION: Details the `response` option for server functions, which controls how responses are processed. Options include 'data' (default, parses JSON), 'full' (returns result, error, and context), and 'raw' (returns the raw Response object).

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
response?: 'data' | 'full' | 'raw'
```

----------------------------------------

TITLE: Server Function with Identity Validator for Type Safety
DESCRIPTION: Illustrates how to achieve type safety in server functions without explicit validation by using an identity function as the validator. This method provides type information for inputs and outputs, ensuring correct data handling.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
type Person = {
  name: string
}
export const greet = createServerFn({ method: 'GET' })
  .validator((d: Person) => d)
  .handler(async (ctx) => {
    return `Hello, ${ctx.data.name}!`
  })
greet({
  data: {
    name: 'John',
  },
})
```

----------------------------------------

TITLE: Server Function Validation with Zod
DESCRIPTION: Shows how to use the Zod validation library with a server function. It defines a Zod schema for 'Person' and uses `Person.parse()` within the validator to ensure type safety and data integrity.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/server-functions

LANGUAGE: tsx
CODE:
```
import { createServerFn } from '@tanstack/react-start'
import { z } from 'zod'
const Person = z.object({
  name: z.string(),
})
export const greet = createServerFn({ method: 'GET' })
  .validator((person: unknown) => {
    return Person.parse(person)
  })
  .handler(async (ctx) => {
    return `Hello, ${ctx.data.name}!`
  })
greet({
  data: {
    name: 'John',
  },
})
```

----------------------------------------

TITLE: Loading Indicator Component
DESCRIPTION: A React component that displays a loading indicator based on the router's loading state. It uses Tailwind CSS for styling and transitions.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/examples/start-convex-trellaux

LANGUAGE: jsx
CODE:
```
function LoadingIndicator() {
  const isLoading = useRouterState({ select: (s) => s.isLoading })
  return (
    <div
      className={`h-12 transition-all duration-300 ${ isLoading ? `opacity-100 delay-300` : `opacity-0 delay-0`}`}
    >
      <Loader />
    </div>
  )
}
```

----------------------------------------

TITLE: Validate Data with Zod Validator
DESCRIPTION: Illustrates using the `.validator()` method with `zodValidator` to modify and validate the data object before it's passed to middleware or the server function. It includes a Zod schema for validation.

SOURCE: https://tanstack.com/start/latest/docs/framework/react/middleware

LANGUAGE: tsx
CODE:
```
import { createMiddleware } from '@tanstack/react-start'
import { zodValidator } from '@tanstack/zod-adapter'
import { z } from 'zod'

const mySchema = z.object({
  workspaceId: z.string(),
})

const workspaceMiddleware = createMiddleware({ type: 'function' })
  .validator(zodValidator(mySchema))
  .server(({ next, data }) => {
    console.log('Workspace ID:', data.workspaceId)
    return next()
  })
```